<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue-路由组件</title>
      <link href="/2019/10/21/Vue-%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/10/21/Vue-%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><blockquote><p><code>Vue-router</code>做路径匹配时支持动态片段、全匹配片段以及查询参数（片段指的是<code>URL</code>中的一部分）</p><p>对于解析过的路由，这些信息都可以通过路由上下文对象（从现在起，我们会称其为路由对象）访问。</p><p>在使用了<code>vue-router</code>的应用中，路由对象会被注入每个组件中，赋值为<code>this.$route</code>，并且当路由切换时，路由对象会被更新</p></blockquote><a id="more"></a><!-- # Vue-路由组件 发表于 1970-01-07 |  分类于 [Web ](https://lienze.tech/blog/categories/Web/)， [Vue](https://lienze.tech/blog/categories/Web/Vue/) --><h3 id="Vue的两种模式"><a href="#Vue的两种模式" class="headerlink" title="Vue的两种模式"></a>Vue的两种模式</h3><blockquote><p>一般单页面应用是(<code>SPA</code>)不会请求页面而是只更新视图</p><p><code>vue-router</code>提供了两种方式来实现前端路由：<code>Hash</code>模式和<code>History</code>模式,可以用<code>mode</code>参数来决定使用哪一种方式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> <span class="selector-tag">new</span> <span class="selector-tag">Router</span>(&#123;</span><br><span class="line">  <span class="attribute">mode</span>: <span class="string">'history'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>hash</code>模式：<code>vue-router</code>默认使用<code>Hash</code>模式，使用 <code>url</code>的<code>hash</code>来模拟一个完整的<code>url</code>；此时<code>url</code>变化时，浏览器是不会重新加载的；<code>Hash(即#)</code>是<code>url</code>的锚点，代表的是网页中的一个位置，仅仅改变<code>#</code>后面部分，浏览器只会滚动对应的位置，而不会重新加载页面。<code>#</code>仅仅只是对浏览器进行指导，而对服务端是完全没有作用的！它不会被包括在<code>http</code>请求中，故也不会重新加载页面。同时<code>hash</code>发生变化时，<code>url</code>都会被浏览器记录下来，这样你就可以使用浏览器的后退了</li><li><code>History</code>模式：如果你不喜欢<code>hash</code>这种<code>#</code>样式，可以使用<code>history</code>模式。这种模式利用了<code>HTML5 History</code>新增的<code>pushState()</code>和<code>replaceState()</code>方法。除了之前的<code>back</code>，<code>forward</code>，<code>go</code>方法；这两个新方法可以应用在<strong>浏览器历史记录</strong>的增加替换功能上。使用<code>History</code>模式，通过历史记录修改<code>url</code>。但它不会立即向后端发送请求。</li></ul><blockquote><p>注意：虽然<code>History</code>模式可以丢掉不美观的<code>#</code>，也可以正常的前进后退，但是刷新<code>f5</code>后，此时浏览器就会访问服务器，在没有后台支持的情况下，此时就会得到一个<code>404</code>！</p><p>官方文档给出的描述是：<code>不过这种模式要玩好；还需要后台配置支持</code></p><p>因为我们的应用是单个客户端应用，如果后台没有正确的配置，当用户直接访问时,就会返回<code>404</code>，所以，要在服务端增加一个覆盖所有情况的的候选资源。如果<code>url</code>匹配不到任何静态资源；则应该返回同一个<code>index.html</code>页面</p></blockquote><h3 id="路由属性"><a href="#路由属性" class="headerlink" title="路由属性"></a>路由属性</h3><ul><li><p>路由对象<code>this.$route</code>支持属性</p><ul><li><code>$route.path</code>：字符串，等于当前路由对象的路径，会被解析为绝对路径</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/aaa/</span>bbb</span><br></pre></td></tr></table></figure><ul><li><code>$route.params</code>：包含路由中的动态片段和全匹配片段的键值对</li><li><code>$route.query</code>：获取连接中查询参数的键值对</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/foo?user=<span class="number">1</span></span><br><span class="line"><span class="comment">// 可以获取到</span></span><br><span class="line">$route.query.user == <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><code>$route.router</code>：路由规则所属的路由器以及其所属的组件</li><li><code>$route.matched</code>：数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象</li><li><code>$route.name</code>：当前路径的名字</li></ul></li><li><p>路由中设置自定义参数</p></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="built_in">map</span>(&#123;</span><br><span class="line">  <span class="string">'/a'</span>: &#123;</span><br><span class="line">    component: &#123; <span class="params">...</span> &#125;,</span><br><span class="line">    auth: <span class="literal">true</span> <span class="comment">// 这里 auth 是一个自定义字段</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当 <code>/a</code> 被匹配时，<code>$route.auth</code> 的值将会是 <code>true</code>。我们可以利用这个特性在全局的钩子函数中进行身份验证</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.before<span class="constructor">Each(<span class="params">function</span> (<span class="params">transition</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (transition.<span class="keyword">to</span>.auth) &#123;</span><br><span class="line">    <span class="comment">// 对用户身份进行验证...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态路由（-号通配符）"><a href="#动态路由（-号通配符）" class="headerlink" title="动态路由（:号通配符）"></a>动态路由（:号通配符）</h3><blockquote><p>路由中的动态片段使用以冒号开头的路径片段定义</p><p>类比<code>django</code>中的路由传参</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'&lt;int:name&gt;/'</span>,views.xx),</span><br><span class="line"><span class="type">path</span>: <span class="string">'/user/:username'</span>,</span><br><span class="line">component: &#123;</span><br><span class="line">    <span class="keyword">template</span>: <span class="string">'&lt;p&gt;用户名是&#123;&#123;$route.params.username&#125;&#125;&lt;/p&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一条路径中可以包含多个动态片段，每个片段都会被解析成 <code>$route.params</code> 的一个键值对</p></blockquote><ul><li>解析模式</li></ul><table><thead><tr><th align="left">模式</th><th align="left">匹配的路径</th><th align="left">$route.params</th></tr></thead><tbody><tr><td align="left"><code>/user/:username</code></td><td align="left"><code>/user/evan</code></td><td align="left"><code>{ username: &#39;evan&#39; }</code></td></tr><tr><td align="left"><code>/user/:username/post/:post_id</code></td><td align="left"><code>/user/evan/post/123</code></td><td align="left"><code>{ username: &#39;evan&#39;, post_id: 123 }</code></td></tr></tbody></table><h3 id="全匹配路由（-号通配符）"><a href="#全匹配路由（-号通配符）" class="headerlink" title="全匹配路由（*号通配符）"></a>全匹配路由（*号通配符）</h3><blockquote><p>动态片段只能匹配路径中的一个部分，而全匹配片段则基本类似于它的贪心版</p><p>例如 <code>/foo/*bar</code> 会匹配任何以 <code>/foo/</code> 开头的路径</p><p>当使用一个通配符时，<code>$route.params</code>内会自动添加一个名为<code>pathMatch</code>的参数，其中包含了在连接中通过通配符所匹配到的部分</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'/user/*/cc'</span>,</span><br><span class="line">    name: <span class="string">'User'</span>,</span><br><span class="line">    component: User,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>访问的<code>URL</code>如下</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span><span class="regexp">/user/</span><span class="number">1231</span><span class="regexp">/aaa/</span>cc</span><br></pre></td></tr></table></figure><ul><li>那么此时<code>*</code>通配符拿到的部分为</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"pathMatch"</span>: <span class="string">"1231/aaa"</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="具名路径（命名路由）"><a href="#具名路径（命名路由）" class="headerlink" title="具名路径（命名路由）"></a>具名路径（命名路由）</h3><ul><li>类似<code>django</code>的路由命名，<code>vue</code>路由映射中也可以为某一个路由通过<code>name</code>属性设置命名</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'/user/:userid'</span>,</span><br><span class="line">    name: <span class="string">'User'</span>,</span><br><span class="line">    component: User,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>在使用<code>v-link</code>标签进行路由跳转时，就可以更加方便啦</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123;name: 'User', params: &#123;userid: 'zhangsan' &#125;&#125;"</span>&gt;user&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以在<code>js</code>代码中使用<code>router.go</code>切换到该路径下</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">router</span><span class="selector-class">.go</span>(&#123; <span class="attribute">name</span>: <span class="string">'user'</span>, params: &#123; userId: <span class="number">123</span> &#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="V-link"><a href="#V-link" class="headerlink" title="V-link"></a>V-link</h2><ul><li><code>v-link</code> 是一个用来让用户在<code>vue-router</code>应用的不同路径间跳转的指令。该指令接受一个<code>JavaScript</code>表达式，并会在用户点击元素时用该表达式的值去调用 <code>router.go</code></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 字面量路径 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 效果同上 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'home' &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 具名路径 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; name: 'user', params: &#123; userId: 123 &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>应该使用 <code>v-link</code> 而不是 <code>href</code> 来处理浏览时的跳转。原因如下<ul><li>它在<code>HTML5 history</code>模式和<code>hash</code>模式下的工作方式相同，所以如果你决定改变模式，或者<code>IE9</code>浏览器退化为<code>hash</code>模式时，都不需要做任何改变</li></ul></li><li>在<code>HTML5 history</code>模式下，<code>v-link</code> 会监听点击事件，防止浏览器尝试重新加载页面</li><li>在<code>HTML5 history</code>模式下使用 <code>root</code> 选项时，不需要在 <code>v-link</code> 的<code>URL</code>中包含<code>root</code>路径</li></ul><h3 id="V-Link其他选项"><a href="#V-Link其他选项" class="headerlink" title="V-Link其他选项"></a>V-Link其他选项</h3><ul><li>replace</li></ul><blockquote><p>一个带有 <code>replace: true</code> 的链接被点击时将会触发 <code>router.replace()</code> 而不是 <code>router.go()</code>。由此产生的跳转不会留下历史记录</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123;name: 'User', params: &#123;userid: 'zhangsan' &#125;, replace: true &#125;"</span>&gt;replace&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure><ul><li>append</li></ul><blockquote><p>带有 <code>append: true</code> 选项的相对路径链接会确保该相对路径始终添加到当前路径之后。举例来说，从 <code>/a</code> 跳转到相对路径 <code>b</code> 时，如果没有 <code>append: true</code> 我们会跳转到 <code>/b</code>，但有 <code>append: true</code> 则会跳转到 <code>/a/b</code></p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123;name: 'User', append: true &#125;"</span>&gt;append&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由钩子"><a href="#路由钩子" class="headerlink" title="路由钩子"></a>路由钩子</h2><blockquote><p>全局的钩子</p></blockquote><ul><li><code>beforeEach(to, from, next)</code></li></ul><blockquote><p>添加一个全局的前置钩子函数，这个函数会在路由切换开始时调用。调用发生在整个切换流水线之前。如果此钩子函数拒绝了切换，整个切换流水线根本就不会启动</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to and from are both route objects. must call `next`.</span></span><br><span class="line">  <span class="built_in">console</span>.log(to) <span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-------------'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>) <span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-------------'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(next) <span class="comment">// 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>路由解析流程</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导航被触发。</span><br><span class="line"><span class="number">2.</span>在失活的组件里调用离开守卫。</span><br><span class="line"><span class="number">3.</span>调用全局的 beforeEach 守卫。</span><br><span class="line"><span class="number">4.</span>在重用的组件里调用 beforeRouteUpdate 守卫 (<span class="number">2.2</span>+)。</span><br><span class="line"><span class="number">5.</span>在路由配置里调用 beforeEnter。</span><br><span class="line"><span class="number">6.</span>解析异步路由组件。</span><br><span class="line"><span class="number">7.</span>在被激活的组件里调用 beforeRouteEnter。</span><br><span class="line"><span class="number">8.</span>调用全局的 beforeResolve 守卫 (<span class="number">2.5</span>+)。</span><br><span class="line"><span class="number">9.</span>导航被确认。</span><br><span class="line"><span class="number">10.</span>调用全局的 afterEach 钩子。</span><br><span class="line"><span class="number">11.</span>触发 DOM 更新。</span><br><span class="line"><span class="number">12.</span>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</span><br></pre></td></tr></table></figure><ul><li>使用<code>beforeEach</code>控制路由跳转，拦截路由</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.before<span class="constructor">Each((<span class="params">to</span>, <span class="params">from</span>, <span class="params">next</span>)</span> =&gt; &#123;</span><br><span class="line">  <span class="comment">// to and from are both route objects. must call `next`.</span></span><br><span class="line">  <span class="keyword">let</span> toQuery = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>stringify(<span class="keyword">to</span>.query));</span><br><span class="line">  console.log(toQuery) <span class="comment">// 获取连接参数</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">to</span>.meta.requiredAuth<span class="operator"> == </span><span class="literal">true</span>)&#123; <span class="comment">// 如果要进入的路由需要用户登陆</span></span><br><span class="line">    <span class="keyword">if</span>(window.localStorage.get<span class="constructor">Item('<span class="params">username</span>')</span>)&#123; <span class="comment">// 获取存储的用户名</span></span><br><span class="line">      next<span class="literal">()</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123; <span class="comment">// 没有获取到，则跳转到登陆页面</span></span><br><span class="line">      next(&#123;</span><br><span class="line">        path: <span class="character">'/'</span>,</span><br><span class="line">        query: toQuery,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next<span class="literal">()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Cli</title>
      <link href="/2019/10/21/Vue-Cli/"/>
      <url>/2019/10/21/Vue-Cli/</url>
      
        <content type="html"><![CDATA[<h2 id="组件开发自动化工具"><a href="#组件开发自动化工具" class="headerlink" title="组件开发自动化工具"></a>组件开发自动化工具</h2><blockquote><p><code>Node.js</code>是一个新的后端(后台)语言，它的语法和<code>JavaScript</code>类似，所以可以说它是属于前端的后端语言</p></blockquote><blockquote><p><strong>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</strong></p><p><strong>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</strong></p></blockquote><a id="more"></a><!-- # Vue-Cli 发表于 1970-01-06 |  分类于 [Web ](https://lienze.tech/blog/categories/Web/)， [Vue](https://lienze.tech/blog/categories/Web/Vue/) --><ul><li><code>Node.js</code>如果安装成功，可以查看<code>Node.js</code>的版本,在终端输入如下命令</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm</span><br></pre></td></tr></table></figure><ul><li>全局安装<code>vue</code>脚手架，<code>vue-cli</code>，这玩意儿可以自动生成项目模板</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue-<span class="keyword">cli</span></span><br><span class="line">cnpm install --<span class="keyword">global</span> vue-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><h3 id="单页应用-SPWA"><a href="#单页应用-SPWA" class="headerlink" title="单页应用 SPWA"></a>单页应用 SPWA</h3><blockquote><p>单页<code>Web</code>应用（<strong>single page web application</strong>，<code>SPWA</code>），就是将系统所有的操作交互限定在一个<code>web</code>页面中。</p><p>单页应用程序 (<code>SPA</code>)是加载单个<code>HTML</code>页面，系统的不同功能通过加载不同功能组件的形式来切换，不同功能组件全部封装到了<code>js</code>文件中，这些文件在应用开始访问时就一起加载完；</p><p>整个系统在切换不同功能时，页面的地址是不变的，系统切换可以做到局部刷新，也可以叫做无刷新，这么做的目的是为了给用户提供更加流畅的用户体验</p></blockquote><ul><li>通过<code>vue-cli</code>脚手架开启一个项目：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack myproject</span><br><span class="line">- Project name: 项目名称，如果不需要就直接回车。注：此处项目名不能使用大写。</span><br><span class="line">- Project description: 项目描述，直接回车</span><br><span class="line">- Author：作者</span><br><span class="line">- vue build: 构建方式 默认即可</span><br><span class="line">- <span class="keyword">install</span> vue-router? 是否安装vue的路由插件</span><br><span class="line"></span><br><span class="line">- <span class="keyword">Use</span> ESLint <span class="keyword">to</span> lint your code? 是否使用ESLint检测你的代码？</span><br><span class="line">（ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。）</span><br><span class="line"></span><br><span class="line">- Pick an ESLint preset:选择分支风格</span><br><span class="line"><span class="number">1.</span>standard(https://github.com/feross/standard) js的标准风格</span><br><span class="line"><span class="number">2.</span>Airbnb(https://github.com/airbnb/javascript) JavaScript最合理的方法，这个github地址说是JavaScript最合理的方法</span><br><span class="line"><span class="number">3.</span><span class="keyword">none</span> (configure it yourself) 自己配置</span><br><span class="line"></span><br><span class="line">- Setup unit tests? 是否安装单元测试</span><br><span class="line">- Pick a <span class="keyword">test</span> runner 选择一个单元测试运行器</span><br><span class="line"><span class="number">1.</span>Jest（Jest是由Facebook发布的开源的、基于Jasmine的JavaScript单元测试框架）</span><br><span class="line"><span class="number">2.</span>Karma <span class="keyword">and</span> Mocha</span><br><span class="line"><span class="number">3.</span><span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">- Setup e2e tests <span class="keyword">with</span> Nightwatch(Y/n)?是否安装E2E测试框架NightWatch</span><br><span class="line">（E2E，也就是<span class="keyword">End</span> <span class="keyword">To</span> <span class="keyword">End</span>，就是所谓的“用户真实场景”。）</span><br><span class="line"></span><br><span class="line">- Should we run <span class="string">'npm install'</span> <span class="keyword">for</span> you <span class="keyword">after</span> the <span class="keyword">project</span> has been created?</span><br><span class="line">项目创建后是否要为你运行“npm <span class="keyword">install</span>”?</span><br><span class="line">yes,<span class="keyword">use</span> npm(使用npm)</span><br><span class="line">yes,<span class="keyword">use</span> yarn(使用yarn)</span><br><span class="line"><span class="keyword">no</span>,I will handle that myself(自己操作)</span><br></pre></td></tr></table></figure><ul><li>启动开发服务器：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd myproject <span class="comment"># 进入目录</span></span><br><span class="line">cnpm install <span class="comment"># 安装依赖</span></span><br><span class="line">cnpm <span class="keyword">run</span><span class="bash"> dev <span class="comment"># 开启服务</span></span></span><br></pre></td></tr></table></figure><blockquote><p><code>vue</code>启动服务之后，是通过一个小型的<code>express</code>服务进行测试开发环境部署，在这个服务中，主要是通过<code>webpack-dev-middleware</code>和<code>webpack-hot-middleware</code>这两个中间件完成，并且会在每次代码对于<code>src</code>目录下的代码进行修改时，服务端会动态检测并让浏览器自动刷新</p></blockquote><ul><li>项目目录介绍</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> src <span class="comment"># 主开发目录，所有的单文件组件都会放在这个目录下</span></span></span><br><span class="line"><span class="ruby">- static <span class="comment"># 项目静态目录，所有的css、js都会放在这个文件夹下</span></span></span><br><span class="line"><span class="ruby">- dist <span class="comment"># 项目打包发布文件夹，最后要上线单文件夹项目都在这个文件夹中</span></span></span><br><span class="line"><span class="ruby">- node_modules <span class="comment"># node的包目录</span></span></span><br><span class="line"><span class="ruby">- config <span class="comment"># 配置目录，主要用于区分开发环境，测试环境，线上环境的不同</span></span></span><br><span class="line"><span class="ruby">- build <span class="comment"># 项目打包时依赖的目录</span></span></span><br></pre></td></tr></table></figure><h3 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h3><blockquote><p>将一个组件相关的<code>html</code>结构，<code>css</code>样式，以及交互的<code>JavaScript</code>代码从<code>html</code>文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为<code>.vue</code>，比如：<code>menu.vue</code></p><p>组件文件一般定义在<code>src</code>目录下的<code>components</code>文件夹里</p></blockquote><ul><li><code>template</code>标签定义<code>HTML</code>部分</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teamplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        账号</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teamplate</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>js</code>写成模块导出的形式</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使用<span class="keyword">export</span> <span class="keyword">default</span>命令，为模块指定默认输出</span><br><span class="line"><span class="title">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">data</span>: function()&#123;</span></span><br><span class="line"><span class="class">        <span class="title">return</span> &#123;</span></span><br><span class="line"><span class="class">            <span class="title">name</span>:"张三",</span></span><br><span class="line"><span class="class">            <span class="title">age</span>:16,</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>样式中的编写，如果含有scope关键字，表示这些样式是组件局部的，</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.beauty</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:0px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><blockquote><p>当拥有一个组件文件时，要在项目的<code>src</code>目录下的<code>router</code>目录下的<code>index.js</code>文件下</p><p>进行组件的路由加载配置</p></blockquote><blockquote><p>在导入组件文件时，可以使用<code>@</code>符号，代表从<code>src</code>目录起</p><p>比如：<em>import</em> index <em>from</em> ‘@/components/index’</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"><span class="keyword">import</span> first <span class="keyword">from</span> <span class="string">'@/components/first'</span> // 从组件目录下导入组件文件，不需要加后缀</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="string">'@/components/index'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="built_in">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">path</span>: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="keyword">index</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">path</span>: <span class="string">'/first'</span>, // 访问路径</span><br><span class="line">      component: first</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>当配置好路由之后，需要在最主要的<code>App.Vue</code>文件下进行连接引入</p></blockquote><blockquote><p>通过<code>&lt;router-link to=&quot;连接地址&quot;&gt;首页&lt;/router-link&gt;</code>标签进行连接引入</p><p>通过<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签进行路由加载，可以简写为：<code>&lt;router-view/&gt;</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/first"</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>App.Vue</code>文件下的<code>template</code>标签处如果已经引入了其他跳转连接；</p><p>那么在子组件的<code>template</code>部分不需要在进行引入</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>编写<code>components</code>组件</li><li><code>index.js</code>配置路由</li><li>在主入口<code>App.vue</code>中加载路由组件<code>&lt;router-view/&gt;</code>，一般默认已经写好</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2019/10/21/Vue/"/>
      <url>/2019/10/21/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><blockquote><p><code>Vue.js</code>是前端三大新框架：<code>Angular.js</code>、<code>React.js</code>、<code>Vue.js</code>之一，<code>Vue.js</code>目前的使用和关注程度在三大框架中稍微胜出，并且它的热度还在递增</p><p><code>Vue</code>的核心库只关注视图层，<code>Vue</code>的目标是通过尽可能简单的<code>API</code>实现响应的数据绑定，在这一点上<code>Vue.js</code>类似于后台的模板语言</p><p><code>Vue</code>也可以将界面拆分成一个个的组件，通过组件来构建界面，然后用自动化工具来生成单页面(<code>SPA - single page application</code>)系统</p></blockquote><a id="more"></a><!-- # Vue 发表于 1970-01-05 |  分类于 [Web ](https://lienze.tech/blog/categories/Web/)， [Vue](https://lienze.tech/blog/categories/Web/Vue/) --><ul><li><code>Vue.js</code>官方文档： <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></li><li><code>vue.js</code>下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></li></ul><h3 id="npm配置cnpm"><a href="#npm配置cnpm" class="headerlink" title="npm配置cnpm"></a>npm配置cnpm</h3><ul><li><code>windows</code>下配置<code>cnmp</code>环境：</li></ul><blockquote><p>默认的使用<code>NPM</code>可能会因为网络问题而导致无法使用或延迟居高，可以使<code>npm</code>升级为<code>cnpm</code>，从国内淘宝镜像中加载所需的<code>npm</code>软件源</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure><ul><li>设置安装包缓存路径</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm<span class="built_in"> config </span><span class="builtin-name">set</span> cache <span class="string">"C:\nodejs\node_cache"</span></span><br></pre></td></tr></table></figure><ul><li>设置安装包位置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span><span class="string">"C:\nodejs\node_global"</span></span><br></pre></td></tr></table></figure><blockquote><p>之后使用命令安装的模块存储在<strong>C:\nodejs\node_global\node_modules</strong>里</p><p>请按照个人需求设置你的文件位置</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> cache <span class="string">"C:\nodejs\node_cache"</span></span><br></pre></td></tr></table></figure><h3 id="Vue部署"><a href="#Vue部署" class="headerlink" title="Vue部署"></a>Vue部署</h3><ul><li>安装<code>Vue</code></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> vue -g</span><br></pre></td></tr></table></figure><ul><li>安装<code>vue</code>脚手架</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><blockquote><p><code>-g</code>参数代表全局位置安装，这样可以在环境变量生效的情况下直接在命令行等工具下使用vue命令行进行项目的开启</p></blockquote><h3 id="vue-devtools调试工具"><a href="#vue-devtools调试工具" class="headerlink" title="vue-devtools调试工具"></a>vue-devtools调试工具</h3><blockquote><p><code>vue-devtools</code>可以方便开发者进行<code>Vue</code>中变量等信息的调试跟踪</p></blockquote><ul><li>下载<code>vue-devtools</code></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/vuejs/vue-devtools</span><br></pre></td></tr></table></figure><ul><li>进入到<code>vue-devtools</code>目录下安装依赖包</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">vue-devtools-dev</span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">install </span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">run build</span></span><br></pre></td></tr></table></figure><ul><li>注意：在进行调试工具安装时，首先需要修改<code>shells&gt;chrome</code>文件夹下的<code>mainifest.json</code>中的persistent为true</li><li>将插件目录下的<code>chrome</code>文件夹拖入到<code>chrome</code>浏览器的扩展程序下，记得打开调试模式</li></ul><blockquote><p>扩展程序可以通过浏览器访问</p></blockquote><p><a href="https://lienze.tech/blog/images/1561789924.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1561789924.png" alt="1561789924"></a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">chrome:</span><span class="comment">//extensions/</span></span><br></pre></td></tr></table></figure><h3 id="Vue-CDN"><a href="#Vue-CDN" class="headerlink" title="Vue-CDN"></a>Vue-CDN</h3><blockquote><p>除去通过<code>npm</code>安装的方式来使用<code>vue</code>，还可以直接使用<code>cdn</code>中的<code>vue.js</code>文件</p></blockquote><ul><li>vue.js：开发版本，包含了有帮助的命令行警告</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>vue.min.js：生产环境版本，优化了尺寸和速度</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue语法"><a href="#Vue语法" class="headerlink" title="Vue语法"></a>Vue语法</h3><blockquote><p>每个<code>vue</code>应用都是通过实例化一个新的<code>vue</code>对象开始的</p></blockquote><ul><li>创建第一个模板语法：</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123; message &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 这个也叫做插值表达式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">var vm = new Vue(&#123; // vm这个变量不允许使用连字符，可以使用下划线，比如vm-data是不允许的</span><br><span class="line">    el: <span class="string">"#content"</span>, </span><br><span class="line">    // 对<span class="built_in">应document</span>中的一个标签，当vue对象创建后，这个标签内的区域就被接管</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"这是vue里的变量"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当一个<code>vue</code>实例被创建时，<code>vue</code>的响应式系统中加入了对其<code>data</code>对象中能找到的所有属性</li><li>当这些属性值被改变时，视图也会发生<strong>相应</strong>，并将对应属性更新为新的值</li><li>也可以通过定义函数来改变实例中<code>data</code>对象中的数据，数据改变，视图中的数据也将改变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="ChangeMsg"&gt;改变&lt;/</span>button&gt;</span><br><span class="line">    &lt;!-- 绑定点击事件为定义好的vue函数 --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">window.onload = function()&#123;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: "#app",</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            message: "我对应的是message的变量"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123; /</span><span class="regexp">/ 定义一个函数 并绑定在按钮的点击事件上</span></span><br><span class="line"><span class="regexp">            ChangeMsg:function()&#123;</span></span><br><span class="line"><span class="regexp">                this.message = "我被改变了";</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 修改当前实例中的message变量</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的代码，将在点击按钮时，使当前的<code>message</code>变量发生变化</p><p>``这样的语法有点类似一些<code>Web</code>框架，比如<code>django</code>的模板语言中的模板变量</p></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><blockquote><p>除了直接定义某个变量的固定值进行页面渲染，模板变量还支持通过函数的返回值进行赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; classType &#125;&#125;学习&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; describe() &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>, <span class="comment">// getElementById('app')</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            classType: <span class="string">"vue"</span>,</span><br><span class="line">            content: <span class="string">"这是vue的一个测试"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            describe:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这是一个函数的返回值"</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue模板指令"><a href="#Vue模板指令" class="headerlink" title="Vue模板指令"></a>Vue模板指令</h3><ul><li>模板语法指的是如何将数据放入html中</li></ul><blockquote><p><strong>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层 Vue 实例的数据</strong></p><p><strong>所有 Vue.js的模板都是合法的 HTML ，所以能被遵循规范的浏览器和HTML 解析器解析</strong></p></blockquote><ul><li>插入值，模板变量</li></ul><blockquote><p>数据绑定最常见的形式就是使用<code>Mustache</code>语法(双大括号) 的文本插值，也就是上面示例中的``</p></blockquote><h4 id="内容绑定"><a href="#内容绑定" class="headerlink" title="内容绑定"></a>内容绑定</h4><h5 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h5><blockquote><p>将内容按照<code>html</code>格式进行插入</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> v-html=<span class="string">"contetn"</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">var</span> vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"&lt;b&gt;段落标签&lt;/b&gt;文本内容"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在网站上动态渲染任意<code>HTML</code>是非常危险的，因为容易导致<code>XSS</code>攻击</p><p><code>v-html</code>一般只用在可信内容中，<strong>永不</strong>用在用户提交的内容上</p></blockquote><h5 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h5><blockquote><p>将内容按照文本格式进行插入，但会覆盖原有标签内的内容，不会有加载的闪烁问题</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"contetn"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="xquery">&#123;&#123; gender ? <span class="string">'男'</span> : <span class="string">'女'</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- ok? true:false --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      gender:<span class="built_in"> true</span>, // 变量值<span class="built_in">为true</span>时，显示模板变量中左边的值</span><br><span class="line">      content: <span class="string">"&lt;b&gt;段落标签&lt;/b&gt;文本内容"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h5><blockquote><p>解决使用差值表达式时页面渲染过程，由于变量没有初始化而导致的闪烁问题</p></blockquote><blockquote><p>通俗的来说，比如<code>变量的实际内容没有被创建，那么此时页面只会展示出</code>这样的效果，之后当变量初始化之后，``将变化为实际的值，此时变化的过程我们称作闪烁</p></blockquote><blockquote><p>这个指令可以隐藏未编译的标签直到实例准备完毕</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: "#app",</span></span><br><span class="line"><span class="xml">        data:&#123;</span></span><br><span class="line"><span class="xml">            message: "测试",</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>在上面的代码中，如果网速够慢的清空下，页面首先加载显示出的内容是``</li><li><strong>解决办法</strong>：通过<code>v-clock</code>指令，在使用到模板变量的标签上写入，并设置一个<code>v-clock</code>的类样式</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    [v-cloak]&#123;</span></span><br><span class="line"><span class="xml">        display: none;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><blockquote><p>如果我们需要设置的模板变量是一个属性，比如<code>a</code>标签的<code>href</code>属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a v-bind:href=<span class="string">"message"</span>&gt;连接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a :href="message +'abc'"&gt;连接&lt;/</span>a&gt;</span><br><span class="line">    &lt;!-- 属性内的模板变量写法已被移除，使用v-bind:attr 或 :attr --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">    message: "https:/</span><span class="regexp">/www.baidu.com"</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>v-bind</code>指令或者<code>:</code>的简写对某个<code>dom</code>元素的属性进行绑定</p><p>在下面还有更加详细的属性绑定示例</p></blockquote><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><blockquote><p>给元素绑定对应事件，以下是对于点击事件的绑定</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"show"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="show"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">new Vue(&#123;</span></span><br><span class="line"><span class="regexp">el: "#app",</span></span><br><span class="line"><span class="regexp">    method: &#123;</span></span><br><span class="line"><span class="regexp">    show: function()&#123;</span></span><br><span class="line"><span class="regexp">alert("弹一下")</span></span><br><span class="line"><span class="regexp">        &#125;    </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h4><blockquote><p>这里有一个跑马灯效果可以玩耍</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h3 v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"start"</span>&gt;开始&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="stop"&gt;停止&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">        message: "这是一个跑马灯",</span></span><br><span class="line"><span class="regexp">        sT: null, /</span><span class="regexp">/ 定时器实例</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods:&#123;</span></span><br><span class="line"><span class="regexp">        work()&#123;</span></span><br><span class="line"><span class="regexp">            this.message = this.message.substring(1) + this.message[0] </span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 循环定时器所作的事情</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        start()&#123;</span></span><br><span class="line"><span class="regexp">            if (this.sT==null) &#123; /</span><span class="regexp">/ 判断此时是否已有定时器开启</span></span><br><span class="line"><span class="regexp">                console.log("开启定时器")</span></span><br><span class="line"><span class="regexp">                this.sT = setInterval(this.work,400)</span></span><br><span class="line"><span class="regexp">            &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                console.log("已经开启 不在开启")</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        stop()&#123; /</span><span class="regexp">/ 关闭定时器 设置定时器变量为null</span></span><br><span class="line"><span class="regexp">            console.log("关闭定时器")</span></span><br><span class="line"><span class="regexp">            clearInterval(this.sT)</span></span><br><span class="line"><span class="regexp">            this.sT = null</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="绑定事件修饰符"><a href="#绑定事件修饰符" class="headerlink" title="绑定事件修饰符"></a>绑定事件修饰符</h4><h5 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h5><blockquote><p>比如一个按钮在一个<code>div</code>中，并且按钮和<code>div</code>均有自己的事件，那么此时点击按钮，事件会像冒泡一样从按钮开始一直到<code>div</code>进行触发，<code>.stop</code>修饰符用来阻止默认的事件触发行为</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fDiv"</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"fBtn"</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#fDiv"</span>, <span class="comment">// 控制区域</span></span></span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                divClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div被点击了"</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                btnClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>.stop</code>修饰阻止冒泡</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"fDiv"</span> @click=<span class="string">"divClick"</span>&gt;</span><br><span class="line">    &lt;button <span class="built_in">id</span>=<span class="string">"fBtn"</span> @click.stop=<span class="string">"btnClick"</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h5><blockquote><p>比如像<code>a</code>标签这样的，在点击时他有默认的跳转动作，可以通过<code>.prevent</code>阻止该默认行为</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"fDiv"</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">"https://www.baidu.com"</span> @click.prevent=<span class="string">"aLink"</span>&gt;去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue()&#123;</span><br><span class="line">    el: <span class="string">"#fDiv"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    aLink()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接被点击"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="捕获事件"><a href="#捕获事件" class="headerlink" title="捕获事件"></a>捕获事件</h5><blockquote><p>默认的事件触发处理机制是冒泡机制，capture代表具有该修饰的事件，会优先触发，脱离冒泡顺序；</p><p>也可理解为谁有该修饰符，先触发谁的事件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fDiv"</span> @<span class="attr">click.capture</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"fBtn"</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#fDiv"</span>, <span class="comment">// 控制区域</span></span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            divClick()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"div被点击了"</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            btnClick()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="自身事件"><a href="#自身事件" class="headerlink" title="自身事件"></a>自身事件</h5><blockquote><p>与<code>capture</code>和冒泡不同，<code>.self</code>只有是自身触发的当前的事件才真正执行处理的回调函数</p><p>并且<code>.self</code>只会阻止当前元素的事件触发行为</p></blockquote><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keywords">div</span> <span class="symbol">id</span>=<span class="string">"fDiv"</span> @click.<span class="literal">self</span>=<span class="string">"divClick"</span>&gt;</span><br><span class="line">    &lt;button <span class="symbol">id</span>=<span class="string">"fBtn"</span> @click.<span class="literal">self</span>=<span class="string">"btnClick"</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/<span class="keywords">div</span>&gt;</span><br><span class="line"><span class="comment">// 与上同</span></span><br></pre></td></tr></table></figure><h5 id="单次事件"><a href="#单次事件" class="headerlink" title="单次事件"></a>单次事件</h5><blockquote><p>使用<code>.once</code>只触发一次事件函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"fDiv"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"https://www.baidu.com"</span> @click.prevent.once=<span class="string">"aLink"</span>&gt;去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 连接无法跳转的阻止事件 只会出现一次 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue()&#123;</span><br><span class="line">    el: <span class="string">"#fDiv"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    aLink()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接被点击"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单双向绑定"><a href="#表单双向绑定" class="headerlink" title="表单双向绑定"></a>表单双向绑定</h3><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>使用v-model指令可以在表单<code>input</code>、<code>textarea</code>以及<code>select</code>元素上创建双向数据绑定</p><p>根据表单上的值，自动更新模板变量中的值</p></blockquote><blockquote><p><code>v-model</code>会忽略表单的初始值，比如：<code>checked</code>、<code>value</code>、<code>selected</code>，如果需要的话，应该在<code>javascript</code>中首先声明初始值</p></blockquote><h5 id="text"><a href="#text" class="headerlink" title="text"></a><strong>text</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"这是个表单内容"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a><strong>textarea</strong></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h3</span> v-html=<span class="string">"message"</span>&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;<span class="selector-tag">textarea</span> v-model=<span class="string">"message"</span>&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><h5 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a><strong>checkbox</strong></h5><ul><li><strong>单个复选框</strong>：数据为绑定为<code>true</code>和<code>false</code>的布尔值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                checked: <span class="literal">true</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>多个复选框</strong>：选中的结果会绑定到同一个数组，将保存的<code>v-model</code>变量创建为数组</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"apple"</span>  <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>苹果</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"banana"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>香蕉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>橘子</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                checked: <span class="keyword">new</span> <span class="built_in">Array</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="radio"><a href="#radio" class="headerlink" title="radio"></a><strong>radio</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"picked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"junior"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                picked: <span class="string">"哈哈哈哈"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="select"><a href="#select" class="headerlink" title="select"></a><strong>select</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"selected"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>你想去哪<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"山西"</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上海"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                selected: <span class="string">""</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="selects"><a href="#selects" class="headerlink" title="selects"></a><strong>selects</strong></h5><blockquote><p>设置<code>select</code>标签的<code>multiple</code>属性即可设置为多选下拉菜单，按着<code>ctrl</code>键可以多选</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"selecteds"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span> <span class="attr">v-model</span>=<span class="string">"selecteds"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上衣"</span>&gt;</span>上衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"裤子"</span>&gt;</span>裤子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"鞋"</span>&gt;</span>鞋<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                selecteds: <span class="keyword">new</span> <span class="built_in">Array</span>, <span class="comment">// 多重数据一般都要保存成数组</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h5><blockquote><p>默认情况下，<code>v-model</code>在<code>input</code>和<code>textarea</code>表单中进行同步输入框的改动</p><p>添加了<code>.lazy</code>修饰符之后，对应的<code>v-model</code>绑定事件触发机制将变为<code>change</code>事件，只有在光标失去焦点时会触发</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"这是个表单内容"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h5><blockquote><p>如果用户希望将输入表单的内容处理为<code>Number</code>类型，可以使用<code>.number</code>给<code>v-model</code>进行修饰；如果表单字符串无法被处理为数字，则返回原始的值</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h3</span> v-html=<span class="string">"typeof message"</span>&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> v-model.number=<span class="string">"message"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h5><blockquote><p>使用<code>.trim</code>可以自动过滤输入框的首尾空格</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过查看另一个表单中同步的缩进 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><blockquote><p>当某些情况下，无法确定表单中所代表的属性值，可以使用<code>v-bind</code>进行动态绑定，<code>v-model</code>获取到的表单输入此时则是我们定义的<code>v-bind</code>属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">:value</span>=<span class="string">"choiceA"</span>&gt;</span> A</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">:value</span>=<span class="string">"choiceB"</span>&gt;</span> B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">""</span>, <span class="comment">// 表单绑定变量</span></span></span><br><span class="line"><span class="actionscript">                choiceA: <span class="string">"Yes!"</span>, <span class="comment">// 属性绑定变量，未来不需要修改标签中的value值即可动态修改</span></span></span><br><span class="line"><span class="actionscript">                choiceB: <span class="string">"No!"</span>,</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>关键词：<code>computed</code></li></ul><blockquote><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的</p><p>在模板中放入太多的逻辑会让模板过重且难以维护</p><p>也就是说，某些时候页面中的模板变量如果需要复杂的运算处理，应该使用<strong>计算属性</strong>，而不是直接在模板位置进行计算。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function () &#123;</span></span><br><span class="line"><span class="xml">            var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">                el: "#container",</span></span><br><span class="line"><span class="xml">                data: &#123;</span></span><br><span class="line"><span class="xml">                    String1:"这是一个字符串",</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                methods: &#123;</span></span><br><span class="line"><span class="xml">                    MreverseString()&#123;</span></span><br><span class="line"><span class="xml">                        return this.String1.split("").reverse().join("")</span></span><br><span class="line"><span class="xml">                    &#125; // 定义一个函数进行字符串逆置</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                computed: &#123;</span></span><br><span class="line"><span class="xml">                    CreverseString()&#123;</span></span><br><span class="line"><span class="xml">                        return this.String1.split("").reverse().join("")</span></span><br><span class="line"><span class="xml">                    &#125; // 定义一个计算属性进行字符串逆置</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个字符串:</span><span class="template-variable">&#123;&#123; String1 &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; String1.split("").reverse().join("") &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; CreverseString &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 计算属性直接写入函数名 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; MreverseString() &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 普通methods函数调用需加括号 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：虽然计算属性和函数都可以达成同样的目的，但是<code>computed</code>会缓存结果，计算属性如果发现依赖的属性<code>message</code>未发生改变，再次访问计算属性不会重复运算函数，而是直接利用已有结果；如果依赖数据发生改动，计算属性函数才会重新运算。</li><li>在函数及计算属性中添加日志输出即可看到这个效果：</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    MreverseString() &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">"MreverseString被运算了"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.String1.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">CreverseString() &#123;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"CreverseString被运算了"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.String1.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在终端下进行计算属性以及函数的访问即可看到效果。</li></ul><h4 id="计算属性SetAttr"><a href="#计算属性SetAttr" class="headerlink" title="计算属性SetAttr"></a>计算属性SetAttr</h4><blockquote><p>默认的计算属性只有获取<code>getattr</code>的方式，我们可以手动为他添加一个<code>setter</code></p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    CreverseStrin<span class="variable">g:</span> &#123;</span><br><span class="line">        ge<span class="variable">t:</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">            <span class="keyword">return</span> this.String1.<span class="keyword">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="keyword">join</span>(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">se</span><span class="variable">t:</span> <span class="function"><span class="keyword">function</span><span class="params">(val)</span>&#123;</span></span><br><span class="line">            this.String1 = val.<span class="keyword">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="keyword">join</span>(<span class="string">""</span>)</span><br><span class="line">            // 如果当前的逆置之后字符串为val，那么原本的字符串需要再颠倒一次</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h3><blockquote><p>侦听属性的作用是侦听某些属性的变化，从而做相应的操作，进行对数据变化的相应，</p><p>侦听属性是一个对象（字典），<code>key</code>值是要监听的元素，值是当监听的元素发生改变时要执行的函数；</p><p>监听函数有两个参数，一个是当前值，另一个是变化后的值</p></blockquote><ul><li>比如监听一个变量的变化</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                content: "", // 表单内容</span></span><br><span class="line"><span class="xml">                count: 0, // 记录表单内用户敲了多少次</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            watch:&#123;</span></span><br><span class="line"><span class="xml">                content:function (oldVal,newVal)&#123;</span></span><br><span class="line"><span class="xml">                    // 只要在文本框输入内容影响到了age数据发生改变，就会触发</span></span><br><span class="line"><span class="xml">                    this.count += 1</span></span><br><span class="line"><span class="xml">                &#125;，</span></span><br><span class="line"><span class="xml">            &#125;，</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>你敲了:</span><span class="template-variable">&#123;&#123; count &#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的年纪"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="属性绑定-1"><a href="#属性绑定-1" class="headerlink" title="属性绑定"></a>属性绑定</h3><blockquote><p>使用<code>v-bind:class</code>指令来设置元素的class属性；</p><p>属性表达式的类型可以是字符串、对象或数组</p></blockquote><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><blockquote><p>可以通过为元素绑定一个数组，用来为元素设置单个或多个样式，类名在数组中用单引号</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fontBold</span> &#123;</span></span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.fontRed</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['fontBold','fontRed']"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h4><blockquote><p>可以通过为元素绑定一个对象，对象的key是样式类，对象的value是true或false来动态切换class</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                flag: <span class="literal">true</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                toggle() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.flag)&#123; <span class="comment">// 判断当前toggle变量的属性，对称变换</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.flag = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.flag = <span class="literal">true</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;fontBold: flag&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;flag? fontBold:''&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三元表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><blockquote><p>使用<code>v-bind:style</code>语法，为元素绑定样式</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;color:'red','font-weight':'bold'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    一段文字</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>也可以在<code>vue</code>的<code>data</code>中定义一个对象，用来描述样式，其中带有连字符的样式属性要加引号</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> :style=<span class="string">"styleObj"</span>&gt;一段文字&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">styleObj: &#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="string">'red'</span>,</span><br><span class="line"><span class="string">'font-weight'</span>:<span class="string">'bold'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><code>data</code>中的对象也可以通过数组类型绑定到元素上</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[styleObj1,styleObj2]"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 对于js的样式绑定不需要加引号，因为就是一个变量 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">styleObj1: &#123;</span><br><span class="line">    border: <span class="string">'1px solid gray'</span>,</span><br><span class="line">    width: <span class="string">'100px'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">    background: <span class="string">'black'</span>,</span><br><span class="line">    color: <span class="string">'blue'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>通过条件指令可以控制元素的显示及隐藏，或者说叫做创建和销毁</p></blockquote><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><blockquote><p><code>v-if</code>指令用于条件性的渲染一块内容。这块内容只会在指令的表达式返回<code>truthy</code>值的时候渲染</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"oh3"</span>&gt;</span>h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"gender === 'girl'"</span>&gt;</span>你是女的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"gender === 'boy'"</span>&gt;</span>你是男的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>不男不女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                oh3:<span class="string">"a"</span>,</span></span><br><span class="line"><span class="actionscript">                gender: <span class="string">'other'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>truthy</code>和<code>ture</code>的区别：</li><li>隐含有<code>true</code>属性的变量不可以认为它是<code>true</code>，它不是<code>boolean</code>类型</li></ul><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><blockquote><p>与<code>v-if</code>不同的是，<code>v-show</code> 的元素始终会被渲染并保留在<code>DOM</code>中</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; v-show` 只是简单地切换元素的`CSS`属性 `display</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"oh3"</span>&gt;</span>h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-show</span>=<span class="string">"oh4"</span>&gt;</span>h4标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                oh3:<span class="string">"1"</span>, <span class="comment">// v-if 在该变量不为真时直接消失在document中</span></span></span><br><span class="line"><span class="actionscript">                oh4:<span class="string">"1"</span>, <span class="comment">// v-show 处理不为真的变量条件 绑定元素不会消失</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><blockquote><p>把一个数组对应为一组元素</p><p>用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染</p></blockquote><blockquote><p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，<code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                users: [</span></span><br><span class="line"><span class="xml">                    &#123;name:"张三",age:18&#125;,</span></span><br><span class="line"><span class="xml">                    &#123;name:"李四",age:20&#125;,</span></span><br><span class="line"><span class="xml">                    &#123;name:"王五",age:19&#125;,</span></span><br><span class="line"><span class="xml">                ]</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>v-for还可以支持将当前循环索引作为渲染时的第二个参数，第二个参数为访问索引位置</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>  v-<span class="keyword">for</span>=<span class="string">"(user,index) in users"</span>&gt;</span><br><span class="line">    &#123;&#123; index &#125;&#125;:&#123;&#123; user<span class="selector-class">.age</span> &#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">    users: [</span><br><span class="line">        &#123;name:<span class="string">"张三"</span>,age:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;name:<span class="string">"李四"</span>,age:<span class="number">20</span>&#125;,</span><br><span class="line">        &#123;name:<span class="string">"王五"</span>,age:<span class="number">19</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>使用<code>v-for</code>迭代访问一个对象</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"key in myself"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123;<span class="built_in"> key</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 当v-for渲染时只有一个参数，此时参数为value值 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">myself : &#123;</span><br><span class="line">   <span class="built_in"> name</span>:<span class="string">"赵六"</span>,</span><br><span class="line">    age:<span class="string">"17"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code>支持最多三个参数，同时获取遍历对象的<code>key</code>和<code>value</code>值，以及<code>index</code>索引位置</li></ul><blockquote><p>要注意的是，此时的<code>key</code>和<code>value</code>和<code>python</code>中的顺序是颠倒的，<code>key</code>在后，<code>value</code>在前</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in myself"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123; index &#125;</span><span class="xml">&#125;: </span><span class="xquery">&#123;&#123;<span class="built_in"> key</span> &#125;</span><span class="xml">&#125; - </span><span class="xquery">&#123;&#123; <span class="keyword">value</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">myself : &#123;</span><br><span class="line">   <span class="built_in"> name</span>:<span class="string">"孙七"</span>,</span><br><span class="line">    age:<span class="string">"17"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code>进行一段取值</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; n &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 1 2 3 4 5 6 7 8 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="选项卡练习"><a href="#选项卡练习" class="headerlink" title="选项卡练习"></a>选项卡练习</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                choicId: <span class="literal">null</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    li&#123;</span><br><span class="line">        list-style-type: none;</span><br><span class="line">        border: 3px outset lightgreen;</span><br><span class="line">        width: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:lightblue</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">        border: 3px inset gray;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 1"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 2"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 3"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 4"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 1"</span>&gt;</span>aaaaaaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 2"</span>&gt;</span>bbbbbbbbbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 3"</span>&gt;</span>cccccccccc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 4"</span>&gt;</span>dddddddddd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>js</code>中两个等号和三个等号的区别：</li></ul><blockquote><p><code>==</code>表示： 如果两边值的类型不同的时候，是要先先进行类型转换后，才能做比较；<code>equality</code>等同</p></blockquote><blockquote><p><code>===</code>表示：不需要做类型转换，如果两边值的类型不同，就表示一定是不等的<code>identity</code>恒等</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><code>Vue</code>无法检测到对于数组的索引设置及长度修改以及对于对象属性的删除或添加</p><p>但是可以通过以下方式进行属性添加触发状态更新</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(<span class="variable">$vm</span><span class="selector-class">.Object</span>,<span class="string">"key"</span>,<span class="string">"val"</span>) <span class="comment">// 对于对象 这样的添加方式可以触发状态更新</span></span><br><span class="line">Vue.set(<span class="variable">$vm</span><span class="selector-class">.Array</span>, index, newVal) <span class="comment">// 对于数组 添加元素 触发状态更新</span></span><br><span class="line"><span class="comment">// vm.items.splice(newLength) // 设置数组长度</span></span><br></pre></td></tr></table></figure><ul><li><code>javascript.splice(where, num, [additem1,additem2...] )</code>：删除或添加元素</li></ul><blockquote><p>此外，当<code>v-for</code>与<code>v-if</code>同时使用时，<code>v-for</code>有更高的优先级，这会造成重复遍历得到的元素都要在做一次<code>v-if</code>的判断，如果我们是为了有目的判断当前是否需要渲染这个元素，或是跳过这个循环，可以将<code>v-if</code>放在外层元素，比如<code>template</code>标签中，(<code>template</code>标签无实际意义，默认不展示，但是可以起到包裹作用)</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p><code>Vue.js</code>允许你自定义过滤器，可被用于一些常见的文本，对它们进行格式化</p></blockquote><blockquote><p>过滤器可以用在两个地方：<strong>双花括号插值和 v-bind 表达式</strong> (后者从 2.1.0+ 开始支持)</p><p>过滤器应该被添加在<code>JavaScript</code>表达式的尾部，由<code>管道</code>符号指示</p></blockquote><ul><li>语法</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; message | filter &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:type</span>=<span class="string">"message | filter"</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>过滤器本质上是一个函数，比如我们定义一个将表单输入的内容中所有的字母变大写的过滤器</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>展示: </span><span class="template-variable">&#123;&#123; message | toUpper &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function () &#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data: &#123;</span></span><br><span class="line"><span class="xml">                message: "",</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            filters: &#123;</span></span><br><span class="line"><span class="xml">                toUpper: function (value) &#123;</span></span><br><span class="line"><span class="xml">                    if (!value) return '' // 字符串内容为空 直接返回</span></span><br><span class="line"><span class="xml">                    console.log("正在变大小")</span></span><br><span class="line"><span class="xml">                    return String(value).toUpperCase()</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>过滤器函数也可以有多个参数</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message |<span class="built_in"> filter</span>(arg1, arg2) &#125;&#125;</span><br><span class="line">// message 第一个参数</span><br><span class="line">// arg1 第二个参数</span><br><span class="line">// arg2 第三个参数</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>展示: </span><span class="xquery">&#123;&#123; message | toLong(<span class="string">"| "</span>,<span class="string">" |"</span>) &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">filters: </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    toLong(<span class="keyword">value</span>,arg1,arg2)&#123;</span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span> (!<span class="keyword">value</span>) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> arg1 + <span class="keyword">value</span> + arg2</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Vue实例生命周期"><a href="#Vue实例生命周期" class="headerlink" title="Vue实例生命周期"></a>Vue实例生命周期</h3><blockquote><p>每个<code>Vue</code>实例在被创建时都要经过一系列的初始化过程</p><p>例如：需要设置数据监听、编译模板、将实例挂载到<code>DOM</code>并在数据变化时更新<code>DOM</code>等</p><p>同时在这个过程中会自动运行一些叫做生命周期钩子的函数，我们可以使用这些函数，在实例的不同阶段加上我们需要的代码，实现特定的功能</p></blockquote><ul><li><code>beforeCreate</code>：数据还没有监听，没有绑定到<code>vue</code>对象实例，同时也没有挂载对象</li><li><code>created</code>：数据已经绑定到了对象实例，但是还没有挂载对象</li><li><code>beforeMount</code>：模板已经编译好了，根据数据和模板已经生成了对应的元素对象，将数据对象关联到了对象的<code>$el</code>属性</li></ul><blockquote><p><code>$el</code>属性是一个<code>HTMLElement</code>对象，也就是这个阶段，<code>vue</code>实例通过原生的<code>createElement</code>等方法来创建这个<code>html</code>片段，准备注入到我们<code>vue</code>实例指明的<code>el</code>属性所对应的挂载点</p></blockquote><ul><li><code>mounted</code>： 将<code>$el</code>的内容挂载到了<code>el</code>，相当于我们在<code>jQuery</code>执行了<code>$(el).html($el)</code>，生成页面上真正的<code>dom</code></li></ul><blockquote><p>上面我们就会发现页面的元素和我们<code>$el</code>的元素是一致的；在此之后，我们能够用方法来获取到<code>el</code>元素下的<code>dom</code>对象，并进行各种操作</p></blockquote><ul><li><code>beforeUpdate</code>：数据发生变化时调用</li><li><code>updated</code>：由于数据更改导致的虚拟<code>DOM</code>重新渲染和打补丁，在这之后会调用该钩子</li><li><code>beforeDestroy</code>：<code>Vue</code>实例销毁前</li><li><code>destroyed</code>：<code>Vue</code>实例销毁后</li></ul><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> window.<span class="variable">$vm</span>.<span class="variable">$destroy</span>()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li>一大段代码进行钩子函数的调用过程监控</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showData</span><span class="params">(process, vm)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(process)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"vue数据:"</span>, vm.message) <span class="comment">// 当前Vue中的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Vue挂载el:"</span>) <span class="comment">// Vue接管的元素</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm.$el) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"真实Dom:"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"container"</span>).innerHTML)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------------'</span>)</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="comment">// 这个函数用来输出相关信息的</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#container"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">"aaaaa"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeCreate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"创建Vue实例前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"创建Vue实例后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"挂载到Dom前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        mounted: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"挂载到Dom后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeUpdate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"数据发生变化时"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        updated: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"数据发生变化后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeDestroy: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"Vue实例销毁前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        destroyed: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"Vue实例销毁后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h4><blockquote><p><code>ES6</code>是<code>JavaScript</code>语言的新版本，它也可以叫做<code>ES2015</code>，之前学习的<code>JavaScript</code>属于<code>ES5</code>，<code>ES6</code>在它的基础上增加了一些语法</p><p><code>ES6</code>是未来<code>JavaScript</code>的趋势，而且<code>vue</code>组件开发中会使用很多的<code>ES6</code>的语法，所以掌握这些常用的<code>ES6</code>语法是必须的</p></blockquote><h5 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h5><ul><li><code>let</code>：定义封闭作用域的变量，并且变量只能声明一次</li><li><code>const</code>：定义封闭作用域的常量，并且变量只能声明一次</li></ul><blockquote><p><code>let</code>和<code>const</code>是新增的声明变量的开头的关键字，在这之前，变量声明是用<code>var</code>关键字</p><p>这两个关键字和<code>var</code>的区别是，它们声明的变量没有<strong>预解析</strong>，无法脱离定义空间使用</p><p><code>let</code>和<code>const</code>的区别是，<code>let</code>声明的是一般变量，<code>const</code>申明的常量，不可修改</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">console.log(a) <span class="comment">// undefined</span></span><br><span class="line">console.log(b) <span class="comment">// b is not defined</span></span><br><span class="line">console.log(c) <span class="comment">// c is not defined</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> =  <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">2</span></span><br><span class="line">let <span class="selector-tag">b</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// let b = 3 // Identifier 'b' has already been declared</span></span><br><span class="line">const c = <span class="number">3</span></span><br><span class="line"><span class="comment">// const c = 4 // Identifier 'c' has already been declared</span></span><br><span class="line">c = <span class="number">4</span> <span class="comment">//  Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><blockquote><p>可以把箭头函数理解成匿名函数的第二种写法，箭头函数的作用是可以在对象中绑定<code>this</code></p><p>解决了<code>JavaScript</code>中<code>this</code>指定混乱的问题</p></blockquote><ul><li>定义函数的一般方式</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名赋值创建函数</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>箭头函数的写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这样的函数在嵌套时，会自动绑定外部作用域下的this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 一个参数时，可以省略参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#container"</span>,</span><br><span class="line">        data: &#123; <span class="attr">message</span>: <span class="string">"abcdef"</span>, &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"这是show函数:"</span>, <span class="keyword">this</span>.message),</span><br><span class="line">                    func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"我是内部函数:"</span>, <span class="keyword">this</span>.message)</span><br><span class="line">                &#125;,</span><br><span class="line">                    func(), <span class="comment">// 调用一下这个内部函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"show"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h4><blockquote><p>组件<code>Component</code>是<code>Vue.js</code>最强大的功能之一</p></blockquote><blockquote><p>组件可以扩展<code>HTML</code>元素，<strong>封装可重用的代码</strong></p><p>所有的<code>Vue</code>组件同时也都是<code>Vue</code>的实例，所以可接受相同的选项对象（除了一些根级特有的选项）并提供相同的生命周期钩子</p></blockquote><h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><ul><li>注册一个全局组件语法格式如下</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>component(tagName, options)</span><br><span class="line"><span class="comment">// tagName：组件名</span></span><br><span class="line"><span class="comment">// options：配置选项</span></span><br></pre></td></tr></table></figure><ul><li>比如这样一个全局组件</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'button_show'</span>, &#123;</span><br><span class="line">    <span class="attribute">data</span>: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            <span class="attribute">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="comment">// 当前组件会需要的数据，定义为函数的返回值</span></span><br><span class="line">    <span class="attribute">template</span>: <span class="string">'&lt;button @click="count++"&gt;按钮:&#123;&#123; count &#125;&#125;&lt;/button&gt;'</span></span><br><span class="line">    <span class="comment">// 组件的标签模板</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>接下来可以在任何<code>Vue</code>接管的元素中使用该组件，</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;button_show&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button_show</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#container",</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="data必须是函数"><a href="#data必须是函数" class="headerlink" title="data必须是函数"></a>data必须是函数</h5><blockquote><p>组件就是<code>vue</code>的实例，所有<code>vue</code>实例中属性和方法，组件中也可以用</p><p>其中<code>data</code>属性必须是一个函数，因为组件会重复使用在多个地方，为了使用在多个地方的组件数据相对独立，<code>data</code>属性需要用一个函数的返回值来将数据处理为不同的每个个体</p></blockquote><h5 id="Prop传递数据"><a href="#Prop传递数据" class="headerlink" title="Prop传递数据"></a>Prop传递数据</h5><blockquote><p><code>Prop</code>是你可以在组件上注册的一些自定义特性</p><p>当一个值传递给一个<code>prop</code>特性的时候，它就变成了那个组件实例的一个属性</p><p>为了给组件传递数据，我们可以用一个 <code>props</code> 选项将一些特性值列举在其中</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"myp"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">"content"</span>,<span class="string">"like"</span>], <span class="comment">// 需要两个外界传入的值</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">'like'</span>&gt;</span></span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>"</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 组件绑定未来要接受的变量，要用到v:bind</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                content: <span class="string">'这是p段落的文本'</span>,</span></span><br><span class="line"><span class="actionscript">                like: <span class="string">'beauty'</span>, <span class="comment">// 要传递的变量</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">.beauty&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    color: red;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myp</span> <span class="attr">:like</span>=<span class="string">"like"</span> <span class="attr">:content</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">myp</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递到组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2019/10/21/jQuery/"/>
      <url>/2019/10/21/jQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><blockquote><p><code>jQuery</code>是一个<code>JavaScript</code>函数库。</p><p><code>jQuery</code>是一个轻量级的<code>JavaScript</code>库。</p><p><code>jQuery</code>库包含以下功能：</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>HTML 元素选取</span><br><span class="line"><span class="bullet">- </span>HTML 元素操作</span><br><span class="line"><span class="bullet">- </span>CSS 操作</span><br><span class="line"><span class="bullet">- </span>HTML 事件函数</span><br><span class="line"><span class="bullet">- </span>JavaScript 特效和动画</span><br><span class="line"><span class="bullet">- </span>HTML DOM 遍历和修改</span><br><span class="line"><span class="bullet">- </span>AJAX 异步加载</span><br></pre></td></tr></table></figure><a id="more"></a><!-- # jQuery 发表于 1970-01-04 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><h3 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h3><blockquote><p><code>jQuery</code>是目前使用最广泛的<code>javascript</code>函数库。据统计，全世界排名前<code>100</code>万的网站，有<code>46%</code>使用<code>jQuery</code>，远远超过其他库</p><p>微软公司甚至把<code>jQuery</code>作为他们的官方库</p><p><code>jQuery</code>的版本分为<code>1.x</code>系列和<code>2.x</code>、<code>3.x</code>系列，<code>1.x</code>系列兼容低版本的浏览器；<code>2.x</code>、<code>3.x</code>系列放弃支持低版本浏览器，目前使用最多的是<code>1.x</code>系列的</p></blockquote><ul><li><code>jquery</code>是一个函数库，一个<code>js</code>文件，页面用<code>script</code>标签引入这个<code>js</code>文件就可以使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下载jQuery"><a href="#下载jQuery" class="headerlink" title="下载jQuery"></a>下载jQuery</h3><ul><li>官网：<a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a></li><li>下载：<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a></li></ul><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"p"</span>).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="keyword">this</span>).css(<span class="string">"color"</span>))</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: blue;"</span>&gt;</span>我会变红<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Jquery基础语法：Query 语法是通过选取 HTML 元素，并对选取的元素执行某些操作</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">$(<span class="params">selector</span>)</span>.action<span class="literal">()</span></span><br></pre></td></tr></table></figure><ul><li>美元符号定义<code>jQuery</code></li><li>选择符（<code>selector</code>）<strong>查询</strong>和<strong>查找</strong><code>HTML</code>元素</li><li><code>jQuery</code>的<code>action()</code>执行对元素的操作</li></ul><h3 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h3><ul><li>这是为了防止文档在完全加载（就绪）之前运行<code>jQuery</code>代码，<code>jQuery</code>的代码经常会位于一个<code>document ready</code>函数中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 开始写 jQuery 代码...</span></span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong></li></ul><blockquote><p><code>jQuery</code>入口函数与<code>JavaScript</code>入口函数的区别</p><p><code>jQuery</code>的入口函数是在<code>html</code>所有标签(DOM)都加载之后，就会去执行</p><p><code>JavaScript</code>的<code>window.onload</code>事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行</p></blockquote><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><blockquote><p>jQuery的选择器可以更加方便我们对页面的DOM元素进行操作，而原生的操作方式是比较痛苦的</p></blockquote><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><ul><li><code>jQuery</code>选择器允许对<code>HTML</code>元素组或单个元素进行操作</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="keyword">this</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当某个p被点击时，都会触发该js函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><ul><li><code>ID</code>选择器通过<code>HTML</code>元素的<code>ID</code>属性选取指定的元素</li><li>页面中的元素的<code>id</code>应该是唯一的，在页面中选取唯一的元素需要<code>#id</code>选择器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#change"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="keyword">this</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); <span class="comment">// css属性函数</span></span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当Id值为change的p标签被点击时，触发该js函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"change"</span>&gt;</span>我是第三个p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>通过元素的<code>class</code>属性进行查找</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">".pClass"</span>).hide();</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pClass"</span>&gt;</span></span><br><span class="line">        这是测试内容，点击按钮后，这里的东西会消失</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        点击</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h4><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>$(this)</code></td><td align="left">选取当前<code>HTML</code>元素</td></tr><tr><td align="left"><code>$(&quot;*&quot;)</code></td><td align="left">选取所有元素</td></tr><tr><td align="left"><code>$(&quot;p.intro&quot;)</code></td><td align="left">选取<code>class</code>为<code>intro</code>的<code>&lt;p&gt;</code>元素</td></tr><tr><td align="left"><code>$(&quot;p:first&quot;)</code></td><td align="left">选取第一个<code>&lt;p&gt;</code> 元素</td></tr><tr><td align="left"><code>$(&quot;ul li:first&quot;)</code></td><td align="left">选取第一个<code>&lt;ul&gt;</code>元素的第一个<code>&lt;li&gt;</code>元素</td></tr><tr><td align="left"><code>$(&quot;ul li:first-child&quot;)</code></td><td align="left">选取每个<code>&lt;ul&gt;</code>元素的第一个<code>&lt;li&gt;</code>元素</td></tr><tr><td align="left"><code>$(&quot;[href]&quot;)</code></td><td align="left">选取带有<code>href</code>属性的元素</td></tr><tr><td align="left"><code>$(&quot;a[target=&#39;_blank&#39;]&quot;)</code></td><td align="left">选取所有<code>target</code>属性值等于<code>_blank</code>的<code>&lt;a&gt;</code>元素</td></tr><tr><td align="left"><code>$(&quot;:button&quot;)</code></td><td align="left">选取所有<code>type=&quot;button&quot;</code>的 <code>&lt;input&gt;</code>元素 和<code>&lt;button&gt;</code>元素</td></tr><tr><td align="left"><code>$(&quot;tr:odd&quot;)</code></td><td align="left">选取奇数位置的<code>&lt;tr&gt;</code>元素</td></tr></tbody></table><h3 id="jQuery遍历"><a href="#jQuery遍历" class="headerlink" title="jQuery遍历"></a>jQuery遍历</h3><ul><li>在查找时,可以通过遍历,相对于某些元素进行位置查找,从而获取到想要的元素位置</li><li>先要分清楚在<code>HTML</code>中元素的级别关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>a<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span>&gt;</span> b <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">div</span>&gt;</span> 元素是 <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 的父元素，同时是其中所有内容的祖先。</span><br><span class="line">- <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 元素是 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 元素的父元素，同时是 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 的子元素</span><br><span class="line">- 左边的 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 元素是 <span class="tag">&lt;<span class="name">span</span>&gt;</span> 的父元素，<span class="tag">&lt;<span class="name">ul</span>&gt;</span> 的子元素，同时是 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 的后代。</span><br><span class="line">- <span class="tag">&lt;<span class="name">span</span>&gt;</span> 元素是 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 的子元素，同时是 <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 的后代。</span><br><span class="line">- 两个 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 元素是同胞（拥有相同的父元素）。</span><br><span class="line">- 右边的 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 元素是 <span class="tag">&lt;<span class="name">a</span>&gt;</span> 的父元素，<span class="tag">&lt;<span class="name">ul</span>&gt;</span> 的子元素，同时是 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 的后代。</span><br><span class="line">- <span class="tag">&lt;<span class="name">a</span>&gt;</span> 元素是右边的 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 的子元素，同时是 <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 的后代。</span><br></pre></td></tr></table></figure><h4 id="祖先遍历"><a href="#祖先遍历" class="headerlink" title="祖先遍历"></a>祖先遍历</h4><ul><li><code>parent()</code>：返回被选择元素的直接父元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).parent().css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    // 这里选择到了全部span标签的父标签,li标签,并且设置红色2像素边框</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parents()</code>：返回被选择元素的全部父元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).parents().css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 选中了li标签 ul标签 div标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>该方法也可以指定父元素中的某些元素进行二次过滤，比如选择所有父元素中类为<code>father</code>的元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).parents(<span class="string">".father"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 div标签和ul标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parentsUntil(&quot;limit&quot;)</code>：向上查找,直到找到元素界限为止之前的所有父元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).parentsUntil(<span class="string">"div"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 ul标签 第一个li标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后代遍历"><a href="#后代遍历" class="headerlink" title="后代遍历"></a>后代遍历</h4><ul><li><code>children()</code>：返回被选元素的直接子元素，不会继续向深层次遍历</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"li"</span>).children().css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 span标签 a标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>find(&quot;*&quot;)</code>：返回被选元素的所有符合条件的直接子元素，会继续向深层次遍历</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"ul"</span>).find(<span class="string">"*"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 两个li标签 span标签 a标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>普通内容1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="同胞遍历"><a href="#同胞遍历" class="headerlink" title="同胞遍历"></a>同胞遍历</h4><ul><li><code>siblings()</code>：返回被选元素的所有同胞元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).siblings().css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 p标签 h标签 strong标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>一个h标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>一个strong标签<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>next()</code>：返回被选元素的下一个同胞元素，只返回一个元素</li><li><code>nextAll()</code>：返回被选元素的所有下面的同胞元素，返回所有跟随同胞</li><li><code>nextUntil(&quot;limit&quot;)</code>：返回直到<code>limit</code>界限的所有跟随同胞，不包含<code>limit</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"span"</span>).next().css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到了 h标签</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>一个h标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>一个strong标签<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过滤方法"><a href="#过滤方法" class="headerlink" title="过滤方法"></a>过滤方法</h4><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>first()</code></td><td align="left">返回被选元素的首个元素</td></tr><tr><td align="left"><code>last()</code></td><td align="left">返回被选元素的最后个元素</td></tr><tr><td align="left"><code>eq()</code></td><td align="left">返回被选元素中带有指定索引号的元素，索引从<code>0</code>开始</td></tr><tr><td align="left"><code>filter()</code></td><td align="left">规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回</td></tr><tr><td align="left"><code>not()</code></td><td align="left">返回不匹配标准的所有元素，与<code>filter</code>相反</td></tr></tbody></table><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"h3"</span>).filter(<span class="string">".suit"</span>);</span><br><span class="line">/<span class="regexp">/ 选择所有类名为suit的h3标签</span></span><br><span class="line"><span class="regexp">$("p").not(".green");</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 过滤所有类名为green的p标签</span></span><br></pre></td></tr></table></figure><h3 id="判断是否选择到了元素"><a href="#判断是否选择到了元素" class="headerlink" title="判断是否选择到了元素"></a>判断是否选择到了元素</h3><blockquote><p><code>jquery</code>有容错机制，即使没有找到元素，也不会出错</p><p>可以用<code>length</code>属性来判断是否找到了元素，<code>length</code>等于<code>0</code>，就是没选择到元素；<code>length</code>大于<code>0</code>，就是选择到了元素</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oh = $(<span class="string">"h1"</span>);</span><br><span class="line">alert(oh.length) <span class="comment">// &gt; 1 | 0</span></span><br></pre></td></tr></table></figure><h3 id="jQuery样式操作"><a href="#jQuery样式操作" class="headerlink" title="jQuery样式操作"></a>jQuery样式操作</h3><h4 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h4><ul><li><code>$(&quot;selector&quot;).css(&quot;attr&quot;)</code></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"color"</span>); <span class="comment">// rgb(255, 0, 0)</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"border"</span>); <span class="comment">// 1px solid rgb(128, 128, 128)</span></span><br></pre></td></tr></table></figure><h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><ul><li><code>$(&quot;selector&quot;).css(&quot;attr&quot;,&quot;xxx&quot;)</code></li><li><code>$(&quot;selector&quot;).css({&quot;attr1&quot;: &quot;xxx&quot;, &quot;attr2&quot;: &quot;yyy&quot;})</code></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;<span class="string">"color"</span>:<span class="string">"blue"</span>, <span class="string">"border"</span>:<span class="string">"1px dashed yellow"</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>:如果选择器div选择到了多个,在获取信息时,只取第一个</li></ul><h4 id="其他操作样式的方式"><a href="#其他操作样式的方式" class="headerlink" title="其他操作样式的方式"></a>其他操作样式的方式</h4><ul><li><code>addClass()</code>：向被选元素添加一个或多个属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.redFont</span>&#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.blueBoder</span>&#123;</span></span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $("button").click(function()&#123;</span><br><span class="line">        $(".father").addClass("redFont blueBoder");</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    这是个div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>removeClass()</code>：删除指定的<code>class</code>属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.redFont</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.blueBoder</span>&#123;</span></span><br><span class="line">        border: 1px solid blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    $("button").click(function()&#123;</span><br><span class="line">        $(".redFont").removeClass("blueBoder");</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blueBoder redFont"</span>&gt;</span></span><br><span class="line">    这是个div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>toggleClass()</code>：设置或移除被选元素的一个或多个类进行切换</li></ul><blockquote><p>该方法检查每个元素中指定的类</p><p>如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blueBoder redFont"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    这是个div</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">$<span class="built_in">(document</span>).ready(<span class="keyword">function</span>()&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="keyword">function</span>()&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).toggleClass(<span class="string">"redFont"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"redFont"</span>&gt;</span>第一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"redFont"</span>&gt;</span>第二段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第三段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第四段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li><code>click</code>：点击</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>dbclick</code>：双击</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).dbclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>mouseenter</code>：穿过某元素</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>moseleave</code>：鼠标离开</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ... </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>hover</code>：鼠标悬停</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>keydown</code>：键按下的过程</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).keydown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>keypress</code>：键被按下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"input"</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"span"</span>).text(i+=<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在input表单中按了多少次</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;p&gt;按键的次数: <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><code>keyup</code>：键被松开</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li><code>submit</code>：表单提交</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"form"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="string">"表单被提交"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>change</code>：表单修改</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"文本已被修改"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong>当用于<code>select</code>元素时，<code>change</code>事件会在选择某个选项时发生。当用于<code>text field</code>或<code>text area</code> 时，<code>change</code>事件会在元素失去焦点时发生</li><li><code>focus</code>：光标选中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"label"</span>).fadeOut(<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 当输入框被选中时，label标签淡出 fadeOut</span></span><br><span class="line">&lt;label&gt;看看这个文字&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text"&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>blur</strong>：光标离开</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"输入框失去了焦点"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="文档-窗口事件"><a href="#文档-窗口事件" class="headerlink" title="文档/窗口事件"></a>文档/窗口事件</h4><ul><li><code>load</code>：指定元素已加载</li></ul><blockquote><p><code>load()</code>方法在<code>jQuery</code>版本<code>1.8</code>中已废弃</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"图片已载入"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>resize</code>：当调整浏览器窗口大小时，发生<code>resize</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"span"</span>).text(i+=<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;span&gt;<span class="number">0</span>&lt;<span class="regexp">/span&gt;次</span></span><br></pre></td></tr></table></figure><ul><li><code>scroll</code>：当用户滚动指定的元素时，会发生<code>scroll</code>事件</li></ul><blockquote><p><code>scroll</code>事件适用于所有可滚动的元素和<code>window</code>对象（浏览器窗口）</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"span"</span>).text(x+=<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>unload</code>：当用户离开页面时，会发生<code>unload</code>事件</li></ul><blockquote><p><code>unload()</code>方法在<code>jQuery</code>版本<code>1.8</code>中已废弃，在<code>3.0</code>版本被移除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).unload(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Goodbye!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// unload() 方法只应用于 window 对象</span></span><br></pre></td></tr></table></figure><h3 id="获取内容和属性"><a href="#获取内容和属性" class="headerlink" title="获取内容和属性"></a>获取内容和属性</h3><ul><li><code>text()</code>：设置或返回所选元素的文本内容</li><li><code>html()</code>：设置或返回所选元素的内容（包括<code>HTML</code>标记）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是个&lt;b&gt;p&lt;<span class="regexp">/b&gt;标签&lt;/</span>p&gt;</span><br><span class="line"> &lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">$("button").click(function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log($("p").text()); /</span><span class="regexp">/ 这是个p标签</span></span><br><span class="line"><span class="regexp">console.log($("p").html()); /</span><span class="regexp">/ 这是个&lt;b&gt;p&lt;/</span>b&gt;标签</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>val()</code>：设置或返回表单字段的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"123"</span>&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">$("button").click(function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log($("input").val());</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><ul><li><code>attr(&quot;src&quot;)</code>：获取属性</li></ul><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://www.baidu.com"</span>&gt;百度&lt;/a&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>($(<span class="string">"a"</span>).attr(<span class="string">"href"</span>)); <span class="comment">// https://www.baidu.com</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取a标签的href属性</span></span><br></pre></td></tr></table></figure><h3 id="改变内容和属性"><a href="#改变内容和属性" class="headerlink" title="改变内容和属性"></a>改变内容和属性</h3><ul><li><code>text()</code>、<code>html()</code>、<code>val()</code></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test3"</span>).val(<span class="string">"RUNOOB"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>attr()</code></li></ul><blockquote><p>以下是一个点击按钮将<code>a</code>标签的跳转地址变为搜狗的示例</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://www.baidu.com"</span>&gt;百度&lt;/a&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line"><span class="constructor">$(<span class="params">document</span>)</span>.ready(<span class="keyword">function</span><span class="literal">()</span>&#123;    </span><br><span class="line"><span class="constructor">$(<span class="string">"button"</span>)</span>.click(<span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">      <span class="constructor">$(<span class="string">"a"</span>)</span>.attr(<span class="string">"href"</span>,<span class="string">"https://www.sougou.com"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 同时设置多个属性</span></span><br><span class="line"></span><br><span class="line"><span class="constructor">$(<span class="params">document</span>)</span>.ready(<span class="keyword">function</span><span class="literal">()</span>&#123;    </span><br><span class="line">    <span class="constructor">$(<span class="string">"a"</span>)</span>.attr(&#123;</span><br><span class="line">        <span class="string">"href"</span> : <span class="string">"https://www.sougou.com"</span>,</span><br><span class="line">        <span class="string">"class"</span> : <span class="string">"sougou"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h3><h4 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示|隐藏"></a>显示|隐藏</h4><ul><li><code>hide(speed:[slow|fast], callback)</code>：隐藏元素</li><li><code>show(speed:[slow|fast], callback)</code>：显示元素</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;button id=<span class="string">"hide"</span> &gt;hide&lt;/button&gt; </span><br><span class="line">&lt;button id=<span class="string">"show"</span> &gt;show&lt;/button&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $(<span class="string">"#hide"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).hide(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#show"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).show();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>toggle()</code>：显示被隐藏的元素，并隐藏已显示的元素</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="keyword">function</span>()&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="淡入-淡出"><a href="#淡入-淡出" class="headerlink" title="淡入|淡出"></a>淡入|淡出</h4><ul><li><code>fadeIn()</code>：淡入已隐藏的元素</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">"p2"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">"p3"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line"><span class="constructor">$(<span class="params">document</span>)</span>.ready(<span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">    <span class="constructor">$(<span class="string">"p"</span>)</span>.hide<span class="literal">()</span> <span class="comment">// 隐藏元素</span></span><br><span class="line">    <span class="constructor">$(<span class="string">"button"</span>)</span>.click(<span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p1"</span>)</span>.fade<span class="constructor">In()</span>;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p2"</span>)</span>.fade<span class="constructor">In(<span class="string">"slow"</span>)</span>;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p3"</span>)</span>.fade<span class="constructor">In(3000)</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>fadeOut()</code>：淡出可见元素</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">"p2"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">"p3"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line"><span class="constructor">$(<span class="params">document</span>)</span>.ready(<span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">    <span class="constructor">$(<span class="string">"button"</span>)</span>.click(<span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p1"</span>)</span>.fade<span class="constructor">Out()</span>;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p2"</span>)</span>.fade<span class="constructor">Out(<span class="string">"slow"</span>)</span>;</span><br><span class="line">        <span class="constructor">$(<span class="string">"#p3"</span>)</span>.fade<span class="constructor">Out(3000)</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>fadeToggle()</code>：在<code>fadeIn()</code>与<code>fadeOut()</code>方法之间进行切换</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#p1"</span>).fadeToggle();</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#p2"</span>).fadeToggle(<span class="string">"slow"</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#p3"</span>).fadeToggle(<span class="number">3000</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span>&gt;</span>这是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- slide<span class="constructor">Down(<span class="params">speed</span>,<span class="params">callback</span>)</span> <span class="comment">// 向下滑动元素</span></span><br><span class="line">- slide<span class="constructor">Up(<span class="params">speed</span>,<span class="params">callback</span>)</span> <span class="comment">// 向上滑动元素</span></span><br><span class="line">- slide<span class="constructor">Toggle(<span class="params">speed</span>,<span class="params">callback</span>)</span> <span class="comment">// 在 slideDown() 与 slideUp() 方法之间进行切换</span></span><br><span class="line"><span class="comment">// 可选的 speed 参数规定效果的时长。它可以取以下值："slow"、"fast" 或毫秒。</span></span><br><span class="line"><span class="comment">// 可选的 callback 参数是滑动完成后所执行的函数名称</span></span><br></pre></td></tr></table></figure><h3 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h3><ul><li><code>$(selector).animate( {params}, speed, callback)</code></li><li><code>params</code>：可选参数；动画形成的属性，要改变的样式值，写成字典<ul><li><code>speed</code>：可选参数；动画持续的时间，单位毫秒</li><li><code>callback</code>：可选参数；动画完成后执行的函数名称</li></ul></li><li><strong>注意</strong>：当使用<code>animate()</code>时，必须使用<code>Camel</code>标记法书写所有的属性名；比如，必须使用<code>paddingLeft</code>而不是<code>padding-left</code>，使用 marginRight 而不是<code>margin-right</code>，等等、同时，色彩动画并不包含在核心<code>jQuery</code> 库中</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=<span class="string">"position: relative;"</span>&gt;这是一段文字&lt;/p&gt;</span><br><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $(<span class="string">"p"</span>).animate(</span><br><span class="line">            &#123;</span><br><span class="line">                left: <span class="string">"+=300px"</span>,</span><br><span class="line">                fontSize: <span class="string">"100px"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"slow"</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span><span class="params">(argument)</span> </span>&#123;</span><br><span class="line">                alert(<span class="string">"动画完成"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery获取表单数据"><a href="#jQuery获取表单数据" class="headerlink" title="jQuery获取表单数据"></a>jQuery获取表单数据</h3><ul><li>单选框：<code>radio</code></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">$(<span class="string">"input[type=radio]:checked"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span></span><br><span class="line"><span class="comment">// 当一个页面有两个radio时</span></span><br><span class="line"><span class="constructor">$(<span class="string">"input[name='gender']:checked"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span>; </span><br><span class="line"><span class="comment">// 通过name分类进行过滤 checked代表选中元素</span></span><br></pre></td></tr></table></figure><ul><li>多选框：<code>checkbox</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line"><span class="keyword">var</span> olike = $(<span class="string">"input:checkbox[name='like']:checked"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">res.push($(<span class="keyword">this</span>).val())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// each() 方法规定为每个匹配元素规定运行的函数</span></span><br></pre></td></tr></table></figure><ul><li>下拉菜单：<code>select</code></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">$(<span class="string">"select[name='city']"</span>)</span>.<span class="keyword">val</span><span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h3 id="jQuery正则"><a href="#jQuery正则" class="headerlink" title="jQuery正则"></a>jQuery正则</h3><h4 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- <span class="symbol">\d</span>：匹配一个数字</span><br><span class="line">- <span class="symbol">\D</span>：匹配一个非数字，即除了0-9</span><br><span class="line">- <span class="symbol">\w</span>：匹配字母、数字、下划线</span><br><span class="line">- <span class="symbol">\W</span>：匹配非单词字符，等价于<span class="symbol">\[</span>^A-Za-z0-9_<span class="symbol">\]</span></span><br><span class="line">- <span class="symbol">\s</span>：匹配一个空白符</span><br><span class="line">- <span class="symbol">\S</span>：匹配一个非空白符</span><br><span class="line">- <span class="symbol">\b</span>：匹配单词边界</span><br><span class="line">- <span class="symbol">\B</span>：匹配非单词边界</span><br><span class="line">- .：匹配任意字符</span><br></pre></td></tr></table></figure><h4 id="开头结尾"><a href="#开头结尾" class="headerlink" title="开头结尾"></a>开头结尾</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> ^：开头匹配 </span></span><br><span class="line"><span class="ruby">- $：结尾匹配</span></span><br></pre></td></tr></table></figure><h4 id="正则次数"><a href="#正则次数" class="headerlink" title="正则次数"></a>正则次数</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>?：出现零次或一次；最多出现一次</span><br><span class="line"><span class="bullet">- </span>+：出现一次或多次；至少出现一次</span><br><span class="line"><span class="bullet">- </span>*：出现零次或多次；任意次</span><br><span class="line"><span class="bullet">- </span>&#123;n,m&#125;：出现n-m次</span><br></pre></td></tr></table></figure><h4 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a>匹配范围</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">[a-z]</span>：匹配任意小写字母</span><br><span class="line">- <span class="string">[0-9]</span>：匹配任意数字</span><br></pre></td></tr></table></figure><h4 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h4><ul><li><code>var regex</code> = /规则/参数</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/\d+/</span> <span class="regexp">//</span> 匹配所有数字</span><br></pre></td></tr></table></figure><h4 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/[a-z]+$/</span> ; <span class="comment">// 任意小写字母结尾</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>()</span><br><span class="line">- g：全局的匹配(匹配多次；)</span><br><span class="line">- i：大小写不敏感匹配(忽略字符大小写)</span><br><span class="line">- m：多行(^和$能匹配行结束符)</span><br></pre></td></tr></table></figure><h4 id="捕获型-非捕获型"><a href="#捕获型-非捕获型" class="headerlink" title="捕获型|非捕获型"></a>捕获型|非捕获型</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(?:(\d+)</span>) <span class="comment">// 非捕获型分组 结果并不会复制所匹配的文本</span></span><br><span class="line"><span class="comment">(\d+)</span> <span class="comment">// 其中的\d+ 是捕获型分组，结果会放入最终的匹配结果中</span></span><br></pre></td></tr></table></figure><h4 id="正则判断方法"><a href="#正则判断方法" class="headerlink" title="正则判断方法"></a>正则判断方法</h4><ul><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">regex</span><span class="selector-class">.exec</span></span><br></pre></td></tr></table></figure><p>：将匹配到的文本保存到一个结果数组</p><ul><li>本身的表达式是一个包含分组匹配的，那么使用<code>exec</code>可以将每个分组保存到数组结果的依次位置中</li></ul></li><li><p><code>regex.test</code>：匹配成功返回<code>true</code>，否则返回假</p></li></ul><h4 id="常用正则规则"><a href="#常用正则规则" class="headerlink" title="常用正则规则"></a>常用正则规则</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">regAccount = /^\w&#123;<span class="number">6</span>,<span class="number">20</span>&#125;$/; <span class="comment">// 字母数字下划线，用户名验证6-20位</span></span><br><span class="line"></span><br><span class="line">regEmail = /^[a-zA-z1<span class="number">-9</span>]&#123;<span class="number">8</span>,<span class="number">20</span>&#125;@(<span class="number">163</span>|<span class="number">126</span>|qq)\.(com|cn)$/  <span class="comment">// 邮箱验证</span></span><br><span class="line"></span><br><span class="line">regPass = /^[\w!@#$%^&amp;*]&#123;<span class="number">6</span>,<span class="number">20</span>&#125;$/ <span class="comment">// 密码验证</span></span><br><span class="line"></span><br><span class="line">regPhone = /^<span class="number">1</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>]\d&#123;<span class="number">9</span>&#125;$/ <span class="comment">// 手机号验证</span></span><br><span class="line">sStr = <span class="string">"123456"</span></span><br><span class="line">regex = /\d+/</span><br><span class="line">alert(regex.test(sStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><ul><li><code>$.ajax([settings])</code>：执行<code>ajax</code>请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"/ajax/"</span>,<span class="comment">// 发送请求的地址</span></span><br><span class="line">            type: <span class="string">"POST"</span>, <span class="comment">// 请求方式 默认get</span></span><br><span class="line">            data: &#123; <span class="comment">// 要提交的数据</span></span><br><span class="line">                username:$(<span class="string">"#username"</span>).val(),</span><br><span class="line">                <span class="comment">// "csrfmiddlewaretoken":$("[name='csrfmiddlewaretoken']").val(), // django的csrf防跨站请求伪造令牌</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 发送请求前运行的函数</span></span><br><span class="line">                $(<span class="string">"button"</span>).attr(&#123; <span class="attr">disabled</span>: <span class="string">"disabled"</span> &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123; <span class="comment">// 请求成功后的回调函数</span></span><br><span class="line">                <span class="comment">// 服务器返回根据datatype设定的类型数据</span></span><br><span class="line">                $(<span class="string">"#result"</span>).text(result)</span><br><span class="line">                <span class="built_in">console</span>.log(result)</span><br><span class="line">            &#125;,</span><br><span class="line">            complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 请求完成时运行的函数 </span></span><br><span class="line">                <span class="comment">// 在请求成功或失败之后均调用，即在 success 和 error 函数之后</span></span><br><span class="line">                $(<span class="string">"button"</span>).removeAttr(<span class="string">"disabled"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>django</code>服务端的功能：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.is_ajax(): <span class="comment"># 判断是否是ajax请求</span></span><br><span class="line">print(request.POST)</span><br><span class="line">print(request.body)</span><br><span class="line">username = request.POST.get(<span class="string">"username"</span>) <span class="comment">#获取ajax传递来的数据中的 username对应的数据</span></span><br><span class="line"><span class="keyword">return</span>  HttpResponse(json.dumps(<span class="string">"这是我获取到的:%s"</span> % (username,)))</span><br><span class="line">response = render(request,<span class="string">"ajax.html"</span>)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><blockquote><p>关于<code>ajax</code>与<code>django</code>等服务端后台进行通信的示例还在后头儿，敬请期待</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2019/10/21/JavaScript/"/>
      <url>/2019/10/21/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><blockquote><p><code>JavaScript</code>是运行在浏览器端的脚本语言，<code>JavaScript</code>主要解决的是前端与用户交互的问题</p><p>是一种动态性、弱类型的语言；</p><p>他的解释器就在我们的浏览器中，是浏览器的一部分</p><p>这门语言对<strong>大小写敏感</strong>，并会忽略多余的空格，可以使用<code>\</code>进行代码换行，注释使用<code>//</code>或<code>/**/</code></p></blockquote><a id="more"></a><!-- # JavaScript 发表于 1970-01-03 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><ul><li>主要由三部分组成<ul><li><code>ECMAScript</code>：语言的语法和基本对象</li><li>文档对象模型<code>Dom(Document Object Model)</code>：处理网页内容的方法和接口</li><li>浏览器对象模型<code>Bom(BrowserObjectModel)</code>：与浏览器进行交互的方法和接口</li></ul></li><li>前端三大部<ul><li><code>HTML</code>：页面的内容、结构</li><li><code>CSS</code>：页面的表现形式、<strong>部分动画</strong></li><li><code>JavaScript</code>：页面的行为、交互、<strong>功能</strong></li></ul></li></ul><hr><h3 id="JavaScript引入"><a href="#JavaScript引入" class="headerlink" title="JavaScript引入"></a>JavaScript引入</h3><ul><li>行间事件：为某一个具体的元素标签赋予<code>js</code>内容</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"button"</span> <span class="attribute">value</span>=<span class="string">"按钮"</span> <span class="attribute">onclick</span>=<span class="string">"alert('点我');"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>嵌入引入：在文档页面通过<code>Script</code>标签嵌入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"ok!"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部引入：定义单独<code>js</code>文件，通过<code>script</code>标签进行引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>alert</code>函数用来展示一个提示框</p></blockquote><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul><li><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> y = <span class="string">"2"</span></span><br><span class="line"><span class="selector-tag">var</span> z = <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>定义变量需要使用关键字：<code>var</code></p><ul><li>同时定义多个变量可以使用 <strong>，</strong> 隔开</li></ul></li><li><p><strong>注意</strong>：<code>javascript</code>变量均为对象，每当声明一个变量，就相当于创建了一个对象</p></li><li><p>命名规则：</p><ol><li>区分大小写</li><li>首字符为<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong><code>_</code>、或<strong>美元符号</strong><code>$</code></li><li>其他字符可以为<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong>、<strong>美元符号</strong></li></ol></li><li><p>调试程序的方法：</p><ul><li><code>alert</code>：弹框</li><li><code>console.log()</code>：浏览器控制台</li><li><code>document.title()</code>：页面标题</li></ul></li></ul><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><code>Number</code>：<strong>数字类型</strong>，可以带小数点，也可以不带</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = 1;</span><br><span class="line"><span class="attribute">var b</span> = 1.5;</span><br></pre></td></tr></table></figure><ul><li><code>String</code>：<strong>字符串类型</strong>，可以使用<strong>单引号</strong>或<strong>双引号</strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = <span class="string">"abc"</span>;</span><br><span class="line"><span class="attribute">var b</span> = <span class="string">"aaaa"</span> + 1</span><br></pre></td></tr></table></figure><ul><li><code>Boolean</code>：<strong>布尔类型</strong>，只能是<code>true</code>|<code>false</code></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li><code>undefined</code>：<strong>未定义类型</strong></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code>：<strong>空对象类型</strong></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>查看变量数据类型</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abc"</span>;</span><br><span class="line">alert(<span class="built_in">typeof</span> <span class="symbol">x</span>)</span><br></pre></td></tr></table></figure><ul><li>匈牙利命名规则：<ul><li>对象 <code>o</code> (<code>Object</code>)：<code>oPerson</code></li><li>数组 <code>a</code> (<code>Array</code>)：<code>aUsers</code></li><li>字符串 <code>s</code> (<code>String</code>)：<code>sAccount</code></li><li>整数 <code>i</code> (<code>Integer</code>)：<code>iScore</code></li><li>布尔值 <code>b</code> (<code>Boolean</code>)：<code>bIsLogin</code></li><li>浮点数 <code>f</code> (<code>Float</code>)：<code>fPrice</code></li><li>函数 <code>f</code> (<code>Function</code>)：<code>fEats</code></li><li>正则 <code>re</code> (<code>RegExp</code>)：<code>reIDCard</code></li></ul></li></ul><hr><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>转换为字符串：<code>toString</code>，支持<code>Boolean</code>、<code>Number</code>、<code>String</code>三种主要类型</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">var y = <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line">var z = true<span class="comment">;</span></span><br><span class="line">alert(<span class="name">x</span>.toString()) // <span class="string">"1"</span></span><br><span class="line">alert(<span class="name">y</span>.toString()) // <span class="string">"abc"</span></span><br><span class="line">alert(<span class="name">z</span>.toString()) // <span class="string">"true"</span></span><br></pre></td></tr></table></figure><ul><li>转换为数字：<strong>parseInt</strong>、<strong>parseFloat</strong>，将只含有数字的字符串变为整形或浮点型，其他类型返回<code>NaN</code>()</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"123"</span></span><br><span class="line"><span class="selector-tag">var</span> y = <span class="string">"123.01"</span></span><br><span class="line"><span class="selector-tag">var</span> z = <span class="string">"123aa"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(x)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(x)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(y)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(y)</span></span>) <span class="comment">// 123.01</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(z)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(z)</span></span>) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<code>parseFloat</code>转换的包含浮点数的字符串应该是十进制</li></ul><blockquote><p>八进制或十六进制，该方法会忽略前导<code>0</code></p><p>八进制数字<code>020</code>会被解析为<code>20</code></p><p>十六进制数字<code>0xFF</code>，会返回<code>Nan</code>，因为x符号不是有效字符</p></blockquote><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><code>Boolean()</code>：当要转换的值是至少有一个字符的字符串</li></ul><blockquote><p>非<code>0</code>数字或对象时，<code>Boolean()</code>函数将返回<code>true</code></p><p>如果该值是空字符串、数字<code>0</code>、<code>undefined</code>或<code>null</code>，它将返回<code>false</code>。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="number">0</span>)</span></span>) <span class="comment">// false</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="number">1</span>)</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="string">"1"</span>)</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="string">"1a"</span>)</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>Number()</code>：换与<code>parseInt()</code>和<code>parseFloat()</code>方法的处理方式相似，只是它转换的是整个值，而不是部分值</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(false)</span></span>) <span class="comment">// 0</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(true)</span></span>) <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(undefined)</span></span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(null)</span></span>) <span class="comment">// 0</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"1.2"</span>)</span></span>) <span class="comment">// 1.2</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"12"</span>)</span></span>) <span class="comment">// 12</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"1.2.3"</span>)</span></span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(new object()</span></span>)) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="number">50</span>)</span></span>) <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><ul><li><code>String()</code>：可把任何值转换成字符串</li><li><strong>注意</strong>：强制转换成字符串和调用<code>toString()</code>方法的唯一不同之处在于，对<code>null</code>和<code>undefined</code>值强制类型转换可以生成字符串而不引发错误</li></ul><hr><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><ul><li><code>Array</code>：数组，索引从<code>0</code>开始</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>];</span><br><span class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> <span class="type">Array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>);</span><br><span class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> <span class="type">Array</span>();</span><br><span class="line">people[<span class="number">0</span>] = <span class="string">"张三"</span></span><br><span class="line">people[<span class="number">1</span>] = <span class="string">"李四"</span></span><br><span class="line">people[<span class="number">2</span>] = <span class="string">"王五"</span></span><br></pre></td></tr></table></figure><ul><li><code>Object</code>：对象，就像是字典，定义时<code>key</code>值不需要设置类型</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    <span class="type">name</span>: "张三",</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: "male",</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*对象有两种访问方式：*/</span></span><br><span class="line">person["name"]</span><br><span class="line">person.name</span><br><span class="line">var person = <span class="built_in">new</span> <span class="keyword">Object</span>();</span><br><span class="line">person.name = "张三";</span><br><span class="line">person.age = <span class="number">17</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数语法：包裹在<strong>花括号</strong>中的代码块，前面使用了关键词<code>function</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"func()"</span>&gt;点击这里&lt;/button&gt;</span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">(arg1,arg2,...)</span></span> &#123;</span><br><span class="line">    alert(<span class="string">"函数被执行"</span>)</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// return是可选的，并且可以不写返回值，单纯只做函数终止</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数名 func</span></span><br><span class="line"><span class="comment">// 参数 arg1,arg2,...</span></span><br><span class="line"><span class="comment">// 返回值 return 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="comment">// 函数执行</span></span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li><strong>局部变量</strong></li></ul><blockquote><p>在<code>JavaScript</code>函数内部声明的变量（使用<code>var</code>）是<strong>局部</strong>变量，</p><p>只能在函数内部访问它</p><p>该变量的作用域是局部的</p><p><strong>生命周期</strong>：局部变量会在函数运行以后被删除 (生命期从它们被声明的时间开始)</p></blockquote><ul><li><strong>全局变量</strong></li></ul><blockquote><p>在函数外声明的变量是<strong>全局</strong>变量</p><p>网页上的所有脚本和函数都能访问它</p><p><strong>生命周期</strong>：全局变量会在页面关闭后被删除 (生命期从它们被声明的时间开始)</p></blockquote><ul><li>局部变量如果希望变为全局变量、可以使用<code>windows.var =</code>的形式赋予给当前窗口</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">1</span>;</span><br><span class="line">window.<span class="symbol">x</span> = <span class="symbol">x</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">func</span><span class="params">(1,2)</span></span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><ul><li><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">JavaScript</span></span><br></pre></td></tr></table></figure><p>函数解析过程：</p><ol><li><strong>预编译</strong>：<code>function</code>函数提前，并将<code>var</code>定义的变量声明提前，先暂时赋值为<code>undefined</code></li><li><strong>执行</strong></li></ol></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span><span class="params">()</span></span> <span class="comment">// 弹出提示</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(iNum)</span></span> <span class="comment">// undefined</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(abc)</span></span> <span class="comment">// 出错</span></span><br><span class="line">function func() &#123;</span><br><span class="line">    alert(<span class="string">"这个是函数"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> iNum = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><ul><li>函数可以没有名字，比如直接为某些事件赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(sDate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="封闭函数"><a href="#封闭函数" class="headerlink" title="封闭函数"></a>封闭函数</h4><ul><li>封闭函数常用来创建一个开始就执行而不用命名的函数</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>()&#123;</span><br><span class="line">    alert(<span class="string">"你好"</span>)<span class="comment">;</span></span><br><span class="line">&#125;)()<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>也可以在函数定义前加上”<code>~</code>“和”<code>!</code>“等符号来定义匿名函数</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="string">"你好"</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><ul><li>封闭函数可以创建一个独立的空间，在封闭函数内定义的变量不会影响外部同名的函数和变量，可以避免命名冲突</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">1</span>;</span><br><span class="line">!function()&#123;</span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"这是同名变量"</span>;</span><br><span class="line">    alert(<span class="symbol">x</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="symbol">x</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当页面上引入多个<code>js</code>文件时，用这种办法比较安全</p></blockquote><hr><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left">加</td><td align="left"><code>x=y+2</code></td><td align="left"><code>x=7</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">减</td><td align="left"><code>x=y-2</code></td><td align="left"><code>x=3</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">乘</td><td align="left"><code>x=y*2</code></td><td align="left"><code>x=10</code></td></tr><tr><td align="left"><code>/</code></td><td align="left">除</td><td align="left"><code>x=y/2</code></td><td align="left"><code>x=2.5</code></td></tr><tr><td align="left"><code>%</code></td><td align="left">取余</td><td align="left"><code>x=y%2</code></td><td align="left"><code>x=1</code></td></tr><tr><td align="left"><code>++</code></td><td align="left">累加</td><td align="left"><code>x=++y</code></td><td align="left"><code>x=6</code></td></tr><tr><td align="left"><code>--</code></td><td align="left">递减</td><td align="left"><code>x=--y</code></td><td align="left"><code>x=4</code></td></tr></tbody></table><hr><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等价于</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left"><code>x=y</code></td><td align="left"></td><td align="left"><code>x=5</code></td></tr><tr><td align="left"><code>+=</code></td><td align="left"><code>x+=y</code></td><td align="left"><code>x=x+y</code></td><td align="left"><code>x=15</code></td></tr><tr><td align="left"><code>-=</code></td><td align="left"><code>x-=y</code></td><td align="left"><code>x=x-y</code></td><td align="left"><code>x=5</code></td></tr><tr><td align="left"><code>*=</code></td><td align="left"><code>x*=y</code></td><td align="left"><code>x=x*y</code></td><td align="left"><code>x=50</code></td></tr><tr><td align="left"><code>/=</code></td><td align="left"><code>x/=y</code></td><td align="left"><code>x=x/y</code></td><td align="left"><code>x=2</code></td></tr><tr><td align="left"><code>%=</code></td><td align="left"><code>x%=y</code></td><td align="left"><code>x=x%y</code></td><td align="left"><code>x=0</code></td></tr></tbody></table><ul><li><strong>注意</strong>：<strong>数字与字符串相加，结果将成为字符串</strong></li></ul><hr><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td align="left">等于</td><td align="left"><code>x==8</code>为<code>false</code></td></tr><tr><td align="left"><code>===</code></td><td align="left">全等（值和类型）</td><td align="left"><code>x===5</code>为<code>true</code>；<code>x===&quot;5&quot;</code>为<code>false</code></td></tr><tr><td align="left"><code>!=</code></td><td align="left">不等于</td><td align="left"><code>x!=8</code>为<code>true</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于</td><td align="left"><code>x&gt;8</code>为<code>false</code></td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">小于</td><td align="left"><code>x&lt;8</code>为<code>true</code></td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">大于或等于</td><td align="left"><code>x&gt;=8</code>为<code>false</code></td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">小于或等于</td><td align="left"><code>x&lt;=8</code>为<code>true</code></td></tr></tbody></table><ul><li>比较运算符常在条件语句中进行使用</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">name</span> = <span class="string">"张三"</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">name</span>==<span class="string">"张三"</span>) &#123;</span><br><span class="line"> document.<span class="built_in">write</span>(<span class="string">"这个人是张三"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>&amp;&amp;</code></td><td align="left"><code>and</code></td><td align="left"><code>(x &lt; 10 &amp;&amp; y &gt; 1)</code> 为 <code>true</code></td></tr><tr><td align="left">`</td><td align="left"></td><td align="left">`</td></tr><tr><td align="left"><code>!</code></td><td align="left"><code>not</code></td><td align="left"><code>!(x==y)</code> 为 <code>true</code></td></tr></tbody></table><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var NumCheck</span> = 0; </span><br><span class="line"><span class="attribute">var Dis</span> = (NumCheck==0) ? <span class="string">"是数字0"</span>:<span class="string">"不是数字0"</span>;</span><br></pre></td></tr></table></figure><ul><li>如果变量<code>NumCheck</code>是<code>0</code>，则<code>Dis</code>的值为：”是数字<code>0</code>“；反之为：”不是数字<code>0</code>“</li></ul><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li>条件语句</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var iNum = 0;</span><br><span class="line"><span class="keyword">if</span> (<span class="attribute">iNum</span>==0)&#123;</span><br><span class="line">    <span class="built_in">..</span>.;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="attribute">iNum</span>==1) &#123;</span><br><span class="line">   条件细分<span class="built_in">..</span>.;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">不满足以上条件均到这里;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>switch</code>语句</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day = <span class="keyword">new</span> <span class="type">Date</span>().getDay();</span><br><span class="line"><span class="comment">// 星期日:0  范围:0~6</span></span><br><span class="line"><span class="keyword">switch</span>(day)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="type"></span></span><br><span class="line"><span class="type">alert</span>(<span class="string">"今天是星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="type"></span></span><br><span class="line"><span class="type"></span>...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>工作原理</strong>：首先设置表达式<code>n</code>（通常是一个变量）；随后表达式的值会与结构中的每个<code>case</code>的值做比较。如果存在匹配，则与该<code>case</code>关联的代码块会被执行。请使用<em>break</em>来阻止代码自动地向下一个<code>case</code>运行</li></ul><hr><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><ul><li><strong>语法</strong></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(起点数据; 判断条件; 数据递增或递减)&#123;&#125;</span></span><br><span class="line">var i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( ;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果循环起始值已经被设置，可以在开头省略</span></span><br><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; ; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">5</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当没有第二个语句时，必须在循环内提供break，否则循环则无法停下来，可能令浏览器崩溃</span></span><br><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; <span class="number">10</span>; )&#123;</span><br><span class="line">   console.log(i);</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有提供第三个语句，可以在for循环中进行编写数值的变化</span></span><br></pre></td></tr></table></figure><ul><li><code>for/in</code>语句循环遍历对象的属性</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">for</span> (<span class="symbol">x</span> in object)&#123;</span><br><span class="line">    console.log(<span class="symbol">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字符串：x 取下标</span></span><br><span class="line"><span class="comment">// 数组：x 取下标</span></span><br><span class="line"><span class="comment">// 对象：x 取key</span></span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abcdef"</span>  <span class="comment">// 0,1,2,3,4,5</span></span><br><span class="line"><span class="keywords">var</span> <span class="symbol">y</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"5"</span>] <span class="comment">// 0,1,2,3,4</span></span><br><span class="line"><span class="keywords">var</span> z = &#123; <span class="comment">//  name,age,gender</span></span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">    gender:<span class="string">"male"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keywords">for</span> (obj in z)&#123;</span><br><span class="line">    console.log(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><ul><li>语法</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">while</span> (条件)&#123;</span><br><span class="line">    执行代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keywords">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keywords">while</span> (<span class="symbol">x</span>[i])&#123;</span><br><span class="line">    console.log(<span class="symbol">x</span>[i]);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下表超出范围时不会报错，返回undefined</span></span><br></pre></td></tr></table></figure><ul><li><code>do/while</code>循环：<code>do/while</code>循环是<code>while</code>循环的变体</li></ul><blockquote><p>该循环首先会执行一次循环代码块，然后检查循环条件是否为真</p><p>如果条件为真，就会重复这个循环</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环执行代码</span><br><span class="line">&#125;<span class="keyword">while</span> (条件);</span><br><span class="line">var i = 3;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    console.log(i)</span><br><span class="line">    i<span class="comment">--;</span></span><br><span class="line">&#125;<span class="keyword">while</span> (i &gt; <span class="number">5</span>);</span><br><span class="line">// <span class="keyword">do</span>/<span class="keyword">while</span>循环至少会执行一次</span><br></pre></td></tr></table></figure><hr><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><ul><li>通过页面元素<code>ID</code>值进行获取：<code>document.getElementById(&#39;&#39;)</code><ul><li>获取到的是一个<code>HTML</code>对象，可以赋值给一个变量</li></ul></li><li><strong>注意</strong>：获取对应元素时，首先要确定页面已经生成所需元素</li></ul><blockquote><p>通常我们将<code>javascript</code>代码写到页面最下面</p><p>或通过使用<code>windows.onload()</code>事件判断是否已经生成页面</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sP = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sP);</span></span><br><span class="line">&#125;</span><br><span class="line">func()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取到的内容: &lt;p id="p"&gt;这是一段待获取的文字&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sP = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sP);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取到的内容: &lt;p id="p"&gt;这是一段待获取的文字&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="操作页面元素"><a href="#操作页面元素" class="headerlink" title="操作页面元素"></a>操作页面元素</h3><ul><li>可以通过<code>id</code>方式获取到对应页面内的元素，就可以对元素的属性进行操作，包括对属性的读和写</li><li>读取元素属性：元素<code>.</code>属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.id);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.style);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.style.color);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改元素属性：元素.属性 =<code>xxx</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"blue_font()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">blue_font</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"color_button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    color_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以获取到对应按钮元素后在绑定函数到它</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"Button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oButton = <span class="built_in">document</span>.getElementById(<span class="string">'Button'</span>);</span></span><br><span class="line"><span class="actionscript">    oButton.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>读取或写入标签包裹的内容（读取或修改标签文本内容）：<code>innerHTML</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"urlChange()"</span>&gt;</span>变搜狗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">urlChange</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript">        oA.href = <span class="string">"https://www.sougou.com"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(oA.innerHTML); <span class="comment">// 获取标签文本内容</span></span></span><br><span class="line"><span class="actionscript">        oA.innerHTML = <span class="string">"搜狗"</span>; <span class="comment">//修改标签文本内容</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="JS事件及属性"><a href="#JS事件及属性" class="headerlink" title="JS事件及属性"></a>JS事件及属性</h3><ul><li>常见事件</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>用户点击鼠标</span><br><span class="line"><span class="bullet">- </span>网页已加载</span><br><span class="line"><span class="bullet">- </span>图像已加载</span><br><span class="line"><span class="bullet">- </span>鼠标移动某个元素上</span><br><span class="line"><span class="bullet">- </span>输入字段被改变时</span><br><span class="line"><span class="bullet">- </span>提交表单时</span><br><span class="line"><span class="bullet">- </span>用户触发某些按键时</span><br></pre></td></tr></table></figure><ul><li><code>onclick</code>事件：用户点击鼠标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"TextChange(this)"</span>&gt;</span>这是文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- this 代表当前所处的元素 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">TextChange</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        id.innerHTML = <span class="string">"文本修改"</span><span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">    oP.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.innerHTML = <span class="string">"文本修改"</span><span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>onmouseover</code>事件：鼠标移入</li><li><code>onmouseout</code>事件：鼠标移出</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span>请把鼠标移动过来<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"aaa"</span>);</span></span><br><span class="line"><span class="actionscript">    oP.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"green"</span>;<span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    oP.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"red"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h2><h3 id="字符串及操作方法"><a href="#字符串及操作方法" class="headerlink" title="字符串及操作方法"></a>字符串及操作方法</h3><ul><li>字符串合并：<code>+</code></li><li>数字字符串变整数：<code>parseInt()</code></li><li>数字字符串变浮点数：<code>parseFloat()</code></li><li>字符串按分隔符切分：<code>split(&quot;*&quot;)</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"a*b*c*d"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.split(<span class="string">"*"</span>)</span></span>) <span class="comment">// a,b,c,d</span></span><br><span class="line">console.log(x.split(<span class="string">"*"</span>)) <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure><ul><li>查找字符串是否含有某字符，找到返回索引，找不到返回-1：<code>String.indexOf()</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"abcdefag"</span></span><br><span class="line"><span class="selector-tag">var</span> res = x.indexOf(<span class="string">"z"</span>)</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><ul><li>截取字符串：<code>String.substring(start, end)</code>，不包含end索引位置数据</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"abcdefag"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring(<span class="number">2</span>)</span></span>) <span class="comment">// cdefag</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring(<span class="number">2</span>,<span class="number">4</span>)</span></span>) <span class="comment">// cd</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring()</span></span>) <span class="comment">// abcdefag</span></span><br></pre></td></tr></table></figure><ul><li>字符串反转：通过结合数组的<code>reverse()</code>函数</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> x = <span class="string">"abcd"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(x.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)) //dcba</span><br></pre></td></tr></table></figure><hr><h3 id="数组及操作方法"><a href="#数组及操作方法" class="headerlink" title="数组及操作方法"></a>数组及操作方法</h3><ul><li>定义数组的方法</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var aList = new Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">var aList = new Array();</span><br><span class="line">aList[<span class="number">0</span>] = <span class="string">"a"</span>;</span><br><span class="line">aList[<span class="number">1</span>] = <span class="string">"b"</span>;</span><br><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"a"</span>];</span><br></pre></td></tr></table></figure><ul><li>获取数组的长度：<code>Array.length()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aList.length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>将数组成员通过指定拼接符合并成一个字符串：<code>Array.join(&quot;*&quot;)</code></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">console.log(aList.join(<span class="string">"*"</span>)) <span class="comment">// 1*2*3*4*5</span></span><br></pre></td></tr></table></figure><ul><li>向数组的<strong>最后</strong>增加或删除成员：<code>Array.pop()</code>、<code>Array.push()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> opa = aList.pop() <span class="comment">// opa: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(opa) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(aList) <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">aList.push(<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aList) <span class="comment">// [1, 2, 3, 4, "a"]</span></span><br></pre></td></tr></table></figure><ul><li>将数组反转：<code>Array.reverse()</code></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">aList.reverse();</span><br><span class="line">console.log(aList); <span class="comment">//[5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ul><li>返回数组中元素第一次出现的索引值：<code>Array.indexOf(chr)</code></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">console.log(aList.indexOf(<span class="number">3</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>在数组中增加或删除成员，并返回被删除的：<code>Array.splice(index, howmany, items...)</code></li></ul><blockquote><p>从<code>index</code>位置开始，给定的<code>hwomany</code>个数的值，并用后面的<code>items</code>替换这些被<strong>删除</strong>的值</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"a"</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">aList.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br><span class="line">console.log(aList) <span class="comment">// [1, 2, "b", "c", 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><blockquote><p>数组的成员包含数组</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [1,2,3,["a","b"]]</span><br><span class="line">console.log(aList[<span class="string">-1</span>][<span class="symbol">0</span>]) // 出错 undefined</span><br><span class="line">console.log(aList[<span class="string">3</span>][<span class="symbol">0</span>]) // a</span><br></pre></td></tr></table></figure><hr><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li>作用：定时调用函数、制作动画</li></ul><hr><h4 id="反复执行定时器"><a href="#反复执行定时器" class="headerlink" title="反复执行定时器"></a>反复执行定时器</h4><ul><li><code>setInterval(code, millisec)</code>：反复执行的定时器</li><li><code>code</code>: 必须参数，要调用的函数或要执行的代码串<ul><li><code>millisec</code>: 必须参数，执行<code>code</code>任务所需要的事件间隔，以毫秒计</li></ul></li><li><code>clearInterval(setInterval_obj)</code>：<strong>关闭</strong>反复执行的定时器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--跑马灯效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>abcdefg<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start_button"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop_button"</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    start_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">// 开启定时事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> sT = setInterval(loop,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.sT = sT; <span class="comment">// 声明此sT定时事件为全局变量</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">    stop_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">// 关闭定时事件</span></span></span><br><span class="line">        clearInterval(sT)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Opstr = <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>);</span></span><br><span class="line">        Opstr.innerHTML = Opstr.innerHTML.substring(1) + Opstr.innerHTML[0]</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(Opstr.innerHTML)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="等待执行定时器"><a href="#等待执行定时器" class="headerlink" title="等待执行定时器"></a>等待执行定时器</h4><ul><li><p><code>setTimeout(code, millisec)</code>：定义只执行一次的等待定时器</p></li><li><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">code</span></span><br></pre></td></tr></table></figure><p>: 必须参数，要调用的函数或要执行的代码串</p><ul><li><code>millisec</code>: 必须参数，执行<code>code</code>任务所需要的事件间隔，以毫秒计</li></ul></li><li><p><code>clearTimeout(setTimeout_obj)</code>：关闭只执行一次的等待计时器</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>我是一个内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start_button"</span>&gt;</span>让上面的内容消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    start_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> st = setTimeout(clear,<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.st = st;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oH3 = <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>);</span></span><br><span class="line"><span class="actionscript">        oH3.innerHTML = <span class="string">""</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css</title>
      <link href="/2019/10/21/Css/"/>
      <url>/2019/10/21/Css/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote><p><code>CSS</code>值层叠样式表（<code>Cascading Style Sheets</code>），主要为了让我们的HTML页面具有花里胡哨的样式效果</p><p>样式定义如何显示<code>HTML</code>元素</p><p>样式通常存储在样式表中</p><p>外部样式表可以极大的提高工作效率</p><p>外部样式表通常存储后缀为<code>CSS</code>的文件中</p><p>多个样式定义可层叠为一</p></blockquote><a id="more"></a><!-- # Css 发表于 1970-01-02 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><ul><li>有了<code>CSS</code>，<code>html</code>中大部分表现样式的标签就可以不用了</li><li><code>html</code>只负责文档的结构和内容，表现形式完全交给<code>CSS</code>，<code>html</code>文档变得更加简洁</li></ul><h3 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h3><ul><li>内联式引入：直接赋予标签<code>style</code>属性进行样式编写</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="attribute">style</span>=<span class="string">"background: #00ff00"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>嵌入式：直接在文档页面通过<code>style</code>标签创建嵌入的样式表</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">   background: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部式：在文档中通过<code>link</code>标签，将外部样式文件引入到页面中：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"css/main.css"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>优先级：内联式 &gt; 嵌入式 &gt; 外部式 （就近原则）</li></ul><hr><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><ul><li>CSS语法规则由两部分构成：选择器 &amp; 一条或多条声明</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selector&#123;</span><br><span class="line">declaration1<span class="comment">;</span></span><br><span class="line">declaration2<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>selector</code>：选择器，一般是你需要改变的<code>HTML</code>标签<br><code>declaration1</code>：每条声明，由一个属性和一个值组成</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性（<code>property</code>）是您希望设置的样式属性（<code>style attribute</code>） 每个属性有一个值；属性和值被冒号分开</p></blockquote><ul><li>当属性中的值为若干单词时，加引号</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"sans serif"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>颜色的写法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#0F0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(255,0,0);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(100%,0%,0%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，当使用<code>RGB</code>百分比时，即使当值为<code>0</code>时也要写百分比符号<br>当尺寸为<code>0</code>像素时，<code>0</code>之后不需要使用<code>px</code>单位，因为<code>0</code>就是<code>0</code>，无论单位是什么</p></blockquote><hr><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><blockquote><p>影响范围大，常做通用设置，或用在层级选择器中</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;p&gt;</span>第一段文字<span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span>再来一段<span class="params">&lt;/p&gt;</span></span><br><span class="line">p&#123;</span><br><span class="line"><span class="symbol">color:</span> blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义所有p标签字体为蓝色*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><blockquote><p>通过类名来选择元素，一个类可以用于多个元素</p><p>一个元素也可以使用多个类，应用灵活，可复用</p><p>是<code>CSS</code>中使用最多的一种选择器</p></blockquote><ul><li><strong>注意</strong>：类名的第一个字符不能使用数字</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"big"</span>&gt;第一段文字&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"big red"</span>&gt;再来一段&lt;/p&gt;</span><br><span class="line">.big&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义big类字体大小为20像素*/</span></span><br><span class="line">.red&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义类为red的字体颜色为红色*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>类选择器</strong>还可基于所属标签进行派生选择：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"red"</span>&gt;再来一段&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"red"</span>&gt;</span><br><span class="line">    文字测试</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">div</span>.red&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在页面中只有div类为red的字体颜色会变为红色*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><blockquote><p>对指定属性的<code>HTML</code>元素进行设置，而不限于<code>class</code>和<code>id</code>属性</p></blockquote><ul><li>通过属性</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://www.baidu.com"</span>&gt;这是一个连接&lt;/a&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> href=<span class="string">"test"</span>&gt;测试&lt;/p&gt;</span><br><span class="line">[href]&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为所有具有href属性的元素设置字体颜色*/</span></span><br></pre></td></tr></table></figure><ul><li>通过属性的值（整个匹配）</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://www.baidu.com"</span>&gt;这是一个连接&lt;/a&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> href=<span class="string">"test"</span>&gt;测试&lt;/p&gt;</span><br><span class="line">[href=<span class="string">"test"</span>]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为属性为test的元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（属性的值中包含所匹配的单词）：<code>~=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test-xx"</span>&gt;测试&lt;/p&gt; x</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test_xx"</span>&gt;测试&lt;/p&gt; x</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr~=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为属性包含test的元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：不包含下划线和连字符的</li><li>属性的值（从开头整个匹配或带有连字符的属性值）：<code>|=</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> √</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test-xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> √</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test_xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> x</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> x</span><br><span class="line">[attr|=test]&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">/*为单词为test或开头为test-的元素设置字体大小*/</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：适用于由连字符分隔的属性值</li><li>属性的值（从属性值的开头进行匹配）：<code>^=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test-xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test_xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr^=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为开头包含test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（从属性值的结尾开始匹配）：<code>$=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx-test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx_test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr$=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为结尾是test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（只要含有则匹配）：<code>*=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx-test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx_test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr*=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为含有test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><hr><ul><li><p>几种属性选择的匹配方式</p><ul><li><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~=</span><br></pre></td></tr></table></figure><p>：用于选取属性值中包含指定</p><p>词汇</p><p>的元素；</p><ul><li>必须是单独的词汇，不能是带有连字符或下划线组成的单词。</li></ul></li><li><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|=</span></span><br></pre></td></tr></table></figure><p>：用于选取带有以指定值开头的属性值的元素，该值必须是整个单词；</p><ul><li>可以有连字符组成，<code>word</code>或者是<code>word-wild</code></li></ul></li><li><p><code>^=</code>：匹配属性值以指定值开头的每个元素</p></li><li><p><code>$=</code>：匹配属性值以指定值结尾的每个元素</p></li><li><p><code>*=</code>：匹配属性值中包含指定值的每个元素</p></li></ul></li></ul><hr><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><blockquote><p>主要应用在标签嵌套的结构中，通过层级，限制样式的作用范围</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"header"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"title"</span>&gt;标题<span class="number">1</span>&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=<span class="string">"author"</span>&gt;作者<span class="number">1</span>&lt;/span&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"content"</span>&gt;</span><br><span class="line">        主要内容</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"footer"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"title"</span>&gt;标题<span class="number">2</span>&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=<span class="string">"author"</span>&gt;作者<span class="number">2</span>&lt;/span&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"content"</span>&gt;</span><br><span class="line">        主要内容<span class="number">2</span></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.header</span> .title&#123;</span><br><span class="line"><span class="attribute">color</span>: gold;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类下的title类*/</span></span><br><span class="line"><span class="selector-class">.header</span> .author&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类下的author类*/</span></span><br><span class="line"><span class="selector-class">.header</span> p&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类中的p标签*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><blockquote><p>通过<code>ID</code>名进行元素选择，元素的<code>ID</code>名定义时在整个文档属于唯一</p><p>通过<code>ID</code>选择器只能对应页面元素中的一个</p><p><code>ID</code>名通常作为<code>JS</code>脚本定位使用，不推荐<code>ID</code>选择器</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">header</span>"&gt;</span><br><span class="line">    &lt;<span class="symbol">p</span> <span class="symbol">id</span>="<span class="symbol">title</span>"&gt;标题<span class="symbol">1</span>&lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">span</span> <span class="symbol">id</span>="<span class="symbol">author</span>"&gt;作者<span class="symbol">1</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">p</span> <span class="symbol">id</span>="<span class="symbol">content</span>"&gt;</span><br><span class="line">        主要内容</span><br><span class="line">    &lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">#<span class="symbol">title</span>&#123;</span><br><span class="line">font-size: <span class="number">25</span>px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">#author&#123;</span><br><span class="line">font-size: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">#content&#123;</span><br><span class="line">color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><blockquote><p><code>CSS</code>伪类选择器用于向某些选择器添加特殊的效果</p></blockquote><ul><li>伪类的语法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span><span class="selector-pseudo">:pseudo-class</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与<code>css</code>类搭配使用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span><span class="selector-class">.class</span><span class="selector-pseudo">:pseudo-class</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="锚伪类"><a href="#锚伪类" class="headerlink" title="锚伪类"></a>锚伪类</h5><blockquote><p>控制连接访问状态，常见状态有：<strong>活动状态</strong>、<strong>已访问状态</strong>、<strong>未被访问状态</strong>、<strong>鼠标悬停状态</strong></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> class=<span class="string">"baidu"</span> href=<span class="string">"https://www.baidu.com"</span>&gt;访问这里&lt;/a&gt;</span><br><span class="line"><span class="selector-class">.baidu</span>:link&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*未访问过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:visited&#123;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*访问过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:hover&#123;</span><br><span class="line"><span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标划过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:active&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*已选中的连接*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>、<strong>visited</strong>、<strong>hover</strong>、<strong>active</strong></li><li><strong>注意</strong><ul><li><code>hover</code>必须定义在<code>link</code>和<code>visited</code>之后，才是有效的</li><li><code>active</code>必须定义在<code>hover</code>之后，才是有效的</li></ul></li></ul><hr><h3 id="CSS选择器的权重"><a href="#CSS选择器的权重" class="headerlink" title="CSS选择器的权重"></a>CSS选择器的权重</h3><blockquote><p>当有多个同类样式作用于同一个元素时</p><p>权重高的样式对元素起作用</p><p>权重相同时后写的样式覆盖前面写的</p></blockquote><ul><li>使用<code>!important</code>将样式权重设置为<code>10000</code>，将<code>!important</code>写到样式属性值后</li><li>权重值：就近原则</li><li>内联式样式：<code>1000</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ID</code>选择器：<code>100</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><ul><li>类选择器：<code>10</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; <span class="attribute">background</span>: blue;&#125;</span><br></pre></td></tr></table></figure><ul><li>标签选择器：<code>1</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="attribute">id</span>=<span class="string">"test"</span> <span class="attribute">style</span>=<span class="string">"color: blue;"</span>&gt;测试&lt;/p&gt;</span><br><span class="line"><span class="comment">#test&#123;</span></span><br><span class="line">color: red !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CSS基本属性"><a href="#CSS基本属性" class="headerlink" title="CSS基本属性"></a>CSS基本属性</h3><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><ul><li><strong>width</strong>：设置元素（标签）的宽</li><li><strong>height</strong>：设置元素（标签）的高</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#button</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>background</strong>：设置背景色或背景图</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#00FF00</span> <span class="built_in">url</span>(<span class="string">"../img/1.jpg"</span>) no-repeat ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>background</code>属性可以分解为如下几个设置项：</li></ul><blockquote><p><code>background-color</code>：设置背景颜色</p><p><code>background-image</code>：设置背景图片地址</p><p><code>background-repeat</code>：设置图片如何重复平铺，可选参数有：<code>repeat</code>、<code>repeat-x</code>（水平方向重复）、<code>repeat-y</code>（垂直方向重复）、<code>no-repeat</code>（图片只显示一次）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; background-position`：设置图片的位置，可选参数有：`left`、`right`、`center</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>background-attachment</code>：设置图片是固定的还是会随页面滚动，可选参数有：<code>scroll</code>（背景图片会随着页面其余部分的滚动而移动）、<code>fixed</code>（页面的其余部分滚动时，背景图像不会移动）</p></blockquote><ul><li><strong>注意</strong>：在背景图片路径填写时，如果使用内联式写法则从当前页面路径开始查找相对路径，如写在外部<code>CSS</code>文件中，则以<code>CSS</code>文件为相对基础。</li><li><strong>border</strong>：设置元素周围的边框</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> double blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>依次设置：<code>border-width</code>、<code>border-style</code>、<code>border-color</code></p></blockquote><ul><li>也可以拆分成四个边的样式选项</li></ul><blockquote><p><code>border-top</code>：顶边框</p><p><code>border-buttom</code>：底边框</p><p><code>border-left</code>：左边框</p><p><code>border-right</code>：右边框</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attr]</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">5px</span> inset blue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">5px</span> inset green;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> outset red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">5px</span> outset red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置时提供的边框样式属性<ul><li><code>dotted</code>：点状</li><li><code>solid</code>：实线</li><li><code>double</code>：双线</li><li><code>dashed</code>：虚线</li><li><code>groove</code>：<code>3D</code>凹槽边框</li><li><code>ridge</code>：定义<code>3D</code>垄状边框</li><li><code>inset</code>：定义<code>3D</code> <code>inset</code> 边框</li><li><code>outset</code>：定义<code>3D</code> <code>outset</code>边框</li><li><code>inherit</code>：规定应该从父元素继承边框样式</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>aaaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span>bbbbbbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p3"</span>&gt;</span>ccccccc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p4"</span>&gt;</span>ddddddd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p5"</span>&gt;</span>ggggggg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p6"</span>&gt;</span>eeeeeee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p7"</span>&gt;</span>fffffff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table1"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年纪<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">.p1&#123;</span><br><span class="line">border: 1px dotted blue;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line">.p3&#123;</span><br><span class="line">border: 1px double blue;</span><br><span class="line">&#125;</span><br><span class="line">.p4&#123;</span><br><span class="line">border: 1px dashed blue;</span><br><span class="line">&#125;</span><br><span class="line">.p5&#123;</span><br><span class="line">border: 10px groove green;</span><br><span class="line">&#125;</span><br><span class="line">.p6&#123;</span><br><span class="line">border: 10px ridge blue;</span><br><span class="line">&#125;</span><br><span class="line">.p7&#123;</span><br><span class="line">border: 10px inset blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.table1&#123;</span><br><span class="line">border: 5px double red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>padding</strong>：设置元素包含的内容和元素边框的距离，也叫<strong>内边距</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个样式属性也可以拆分成以下单独四种，可以分别设置对应位置的内边距</p></li><li><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">padding-<span class="built_in">top</span></span><br></pre></td></tr></table></figure><p>：设置上内边距</p><ul><li><code>padding-bottom</code>：设置下内边距</li><li><code>padding-left</code>：设置左内边距</li><li><code>padding-right</code>：设置右内边距</li></ul></li><li><p><strong>margin</strong>：设置元素和外界的边距，也叫<strong>外边距</strong></p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*同时设置四个边距为10px*/</span></span><br></pre></td></tr></table></figure><ul><li>与<code>padding</code>类似，<code>margin</code>属性也可以拆分为四个方向的单独设置</li><li><code>margin-top</code>：设置上外边距<ul><li><code>margin-bottom</code>：设置下外边距</li><li><code>margin-left</code>：设置左外边距</li><li><code>margin-right</code>：设置右外边距</li></ul></li><li><strong>float</strong>：定义元素在当前父元素下向哪个方向浮动，这个属性常用于图像，使文本围绕在图像周围</li></ul><blockquote><p>如果浮动方向空间不足，元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"&gt;</span><br><span class="line"><span class="keyword">input</span>&#123;</span><br><span class="line">    <span class="type">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本常用属性"><a href="#文本常用属性" class="headerlink" title="文本常用属性"></a>文本常用属性</h4><ul><li><strong>color</strong>：设置元素中的文字<strong>颜色</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-size</strong>：设置元素中的文字<strong>大小</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-family</strong>：设置元素中的<strong>文字字体</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>&#125;</span><br><span class="line"><span class="comment">/*为了避免中文兼容问题，常用字体的英文标识*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-family</span>:<span class="string">"Microsoft Yahei"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-widght</strong>：设置元素中的文字是否<strong>加粗</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-widght</span>:bold;&#125;</span><br><span class="line"><span class="comment">/*设置加粗*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-widght</span>:normal;&#125;</span><br><span class="line"><span class="comment">/*设置不加粗*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>line-height</strong>：设置元素中的文字<strong>行高</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">line-height</span>:<span class="number">24px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>text-decoration</p><p>：设置元素中文字的</p><p>下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>none</code>：默认文本格式，无下划线</p><p><code>underline</code>：定义文本下的一条线</p><p><code>overline</code>：定义文本上的一条线</p><p><code>line-through</code>：定义穿过文本的一条线</p><p><code>blink</code>：定义闪烁的文本</p><p><code>inherit</code>：规定应该从父元素继承<code>text-decoration</code>属性的值</p></blockquote><hr><ul><li><strong>text-align</strong>：设置元素中文字对齐方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>text-indent</strong>：设置元素中文字的首行缩进</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-indent</span>:<span class="number">24px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>display</strong>：设置元素的类型及隐藏方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>none</code>： 元素不会显示</p><p><code>block</code>：元素将显示为块级元素，此元素前后会带有换行符</p><p><code>inline</code>：此元素被显示为内联元素，元素前后没有换行符</p><p><code>list-item</code>：元素作为列表显示</p><p><code>table</code>：元素作为块级表格来显示（类似</p><p>），表格前后带有换行符</p><p><code>inline-table</code>：元素作为内联表格来显示（类似</p><p>），表格前后没有换行符</p><p><code>table-cell</code>：此元素会作为一个表格单元格显示（类似 和 ）</p><p><code>table-caption</code>：此元素会作为一个表格标题显示（类似 ）</p></blockquote><h4 id="元素溢出"><a href="#元素溢出" class="headerlink" title="元素溢出"></a>元素溢出</h4><ul><li><strong>overflow</strong>：当子元素的大小超过所承载的父元素大小时，需要设置父元素对于溢出的子元素显示方式</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="number">123456789</span>&lt;/p&gt;</span><br><span class="line">p&#123;</span><br><span class="line">width:<span class="number">500</span>px; </span><br><span class="line">text-indent: <span class="number">498</span>px; </span><br><span class="line">border: <span class="number">1</span>px solid blue;</span><br><span class="line">overflow:<span class="built_in">auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>visible</code>：默认值;内容不会被修剪，会呈现在元素框之外</p><p><code>hidden</code>：内容会被修剪，并且其余内容是不可见的</p><p><code>scroll</code>：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容</p><p><code>auto</code>：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容</p></blockquote><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>使用浏览器F12查看元素</p></blockquote><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li><strong>文档流</strong>：文档流，是指盒子按照html标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。</li><li>CSS3主要有三种定位：<strong>普通流</strong>、<strong>浮动</strong>、<strong>绝对定位</strong></li><li><strong>static</strong>：元素框正常生成，块级元素生成一个矩形框、作为文档流的一部分、行内元素则会创建一个或多个行框，置于其父元素中</li><li><strong>relative</strong>：相对定位元素，元素还会保持定位前的形状，并且移动前的位置也会保留下来，不会脱离文档流<ul><li>一般是将父级设置相对定位（<code>relative</code>），子级设置绝对定位（<code>absolute</code>），子级就以父级作为参照来定位，否则子级相对于<code>body</code>来定位</li><li><strong>相对定位会按照元素的原始位置对该元素进行移动</strong></li></ul></li><li><strong>absolute</strong>：绝对定位元素，元素脱离文档流，移动前的位置在文档流中关闭，定位后生成一个新的块级框，不论他之前在原始文档流中生成何种类型的框</li><li>也可以理解为漂流在文档流的上方，相对于上一个设置了定位的父级元素来进行定位，如果找不到，则相对于<code>body</code>元素进行定位<ul><li><strong>通过绝对定位，元素可以放置到页面上的任何位置</strong></li></ul></li><li><strong>fixed</strong>：固定定位元素，元素脱离文档流，不占据文档流的位置，相对于浏览器窗口进行定位</li><li>元素偏移的设置：<ul><li><code>top</code>：定位元素的上外边距边界与其包含块上边界之间的偏移</li><li><code>bottom</code>：定位元素下外边距边界与其包含块下边界之间的偏移</li><li><code>right</code>：定位元素右外边距边界与其包含块下边界之间的偏移</li><li><code>left</code>：定位元素左外边距边界与其包含块下边界之间的偏移</li><li><code>z-index</code>：设置堆叠元素的层级，这里的层级不是从上到下，而是从里到外</li></ul></li></ul><blockquote><p>来一个小例子看看布局的效果</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">top</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">bottom</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"container"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"top"</span>&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;左&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;右&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"bottom"</span>&gt;底部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的例子可以将页面简单的分成四个部分</p></blockquote><p><a href="https://lienze.tech/blog/images/1561435572486.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1561435572486.png" alt="1561435572486"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/2019/10/21/Html/"/>
      <url>/2019/10/21/Html/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><blockquote><p>超文本标记语言(<code>HyperText Markup Language</code>)，标准通用标记语言下的一个应用； 是网页制作必备的编程语言</p><p><strong>超文本</strong>就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素</p><p><code>HTML</code>不是一种编程语言，而是一种标记语言</p></blockquote><a id="more"></a><!-- # Html 发表于 1970-01-01 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><h3 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>声明为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTML</span></span><br></pre></td></tr></table></figure><p>文档，</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTML</span></span><br></pre></td></tr></table></figure><p>文档也常称为网页，</p><ul><li>一个文档包含<code>HTML</code><strong>标签</strong>和<strong>文本</strong></li></ul></li><li><p><code>&lt;html&gt;</code>与<code>&lt;/html&gt;</code>之间的文本描述网页，同时<code>HTML</code>元素也是当前页面的<strong>根元素</strong></p></li><li><p><code>&lt;head&gt;</code>是包含了文档的元(<code>meta</code>)数据，如定义网页编码格式<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p></li><li><p><code>&lt;title&gt;</code>元素描述当前文档页面的<strong>标题</strong></p></li><li><p><code>&lt;body&gt;</code>与<code>&lt;body&gt;</code>之间的文本是<strong>可见</strong>的页面内容</p></li><li><p><code>&lt;h1&gt;</code>与<code>&lt;/h1&gt;</code>之间的文本被显示为标题</p></li><li><p><code>&lt;p&gt;</code>与<code>&lt;/p&gt;</code>之间的文本被显示为<strong>段落</strong></p></li></ul><h3 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个H5标题。<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 记得在此处添加信息 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><blockquote><p><code>HTML</code>标记标签通常被称为<code>HTML</code>标签 (<code>HTML tag</code>)</p></blockquote><ul><li><code>HTML</code>标签是由<strong>尖括号</strong>包围的关键词，比如<code>&lt;html&gt;</code></li><li><code>HTML</code>标签通常是<strong>成对出现</strong>的，比如 <code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li><li>多数情况下，<code>HTML</code>文档中的标签可以互相嵌套，实现更复杂的功能</li></ul><h4 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h4><ul><li>标题标签：<code>h1~h6</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    这是一个最大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>段落标签：<code>p</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    每一个段落标签中的内容都会换行输出</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>块级标签：<code>div</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: #FF0000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        div标签常用来组合一整块标签内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        以便通过CSS样式来对其中这些元素进行格式化控制</span><br><span class="line">        比如当前div标签下的所有文本均为红色</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>换行标签：br</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="number">222</span></span><br></pre></td></tr></table></figure><ul><li>图片标签：img</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">'xxx.img'</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>src</code>：用来指明当前图片路径</p><p><code>alt</code>：光标位于图片时所显示的内容，或是当图片加载失败时所显示的内容</p></blockquote><ul><li>链接标签：<code>a</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>href</code>：控制访问地址</p><p><code>a</code>：标签的文本元素为页面展示内容</p></blockquote><ul><li>无序列表：ul、li</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ul</code>:指明当前为无序列表</p><p><code>li</code>:具体列表项使用这个标签</p><p>单个列表项可不加<code>ul</code>标签</p></blockquote><ul><li>有序列表：<code>ol</code>、<code>li</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ol</code>：指明当前为有序列表</p><p><code>li</code>：具体列表项使用这个标签</p><p>单个列表项可不加<code>ul</code>标签</p></blockquote><h3 id="连接外部文件"><a href="#连接外部文件" class="headerlink" title="连接外部文件"></a>连接外部文件</h3><blockquote><p>像<code>img</code>等类似的标签需要我们去访问一个外部文件，常用的方式有如下几种</p></blockquote><ul><li>引入外部图片：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/1.jpg"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>引入另外一个网页：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">"other.html"</span>&gt;</span>其他页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引入CSS样式文件：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"css/main.css"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>rel</code>：<code>relationship</code>的英文缩写，用于定义链接的文件和<code>HTML</code>文档之间的关系</p><p><code>stylesheet</code>：样式表</p><p><code>type</code>：外链文档的类型</p><p><code>href</code>：外链文档的路径</p></blockquote><ul><li>引入<code>js</code>文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>与<code>href</code>：</li></ul><blockquote><p><code>src</code>用于引入资源，引入的资源为页面必不可少的一部分，类似换内裤</p><p><code>href</code>只是引用资源，表示超文本引用，类似穿外套</p></blockquote><ul><li>相对路径：使用当前文件为起点定位资源</li></ul><blockquote><p><code>./</code>：表示位于当前文件所在目录下</p><p><code>../</code>：表示位于当前文件所处的上一层目录下</p></blockquote><ul><li>绝对路径：使用当前磁盘目录为起点定位资源</li></ul><h3 id="表格标签：table"><a href="#表格标签：table" class="headerlink" title="表格标签：table"></a>表格标签：table</h3><blockquote><p>表格标签由<code>table</code>标签进行定义</p><p>表格中的每一行由<code>tr</code>标签定义<code>table row</code></p><p>每一行有几个单元格由<code>td</code>标签定义<code>table data</code></p><p>表格的表头由<code>th</code>标签定义<code>table header</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>用户表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>border</code>：定义表格边框，数字越大，边框越粗</p><p><code>caption</code> ：定义表格标题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"3"</span> <span class="attr">frame</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span> &gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>合并单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>cellpadding</code>：规定<strong>单元格边缘</strong>和内容的空白</p><p><code>cellspacing</code>：增加单元格之间的<strong>距离</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; align`：设置单元格内容靠齐，可选属性有`left`、`right`以及`center</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>frame</code>：控制围绕表格的边框<code>box</code>四面环山</p><blockquote><p><code>above</code>：上面</p><p><code>below</code>：下面</p><p><code>hsides</code>：上下两侧</p><p><code>vsides</code>：左右两侧</p></blockquote><p><code>colspan</code>：合并列</p><p><code>rowspan：</code>合并行</p></blockquote><h3 id="表单标签：form"><a href="#表单标签：form" class="headerlink" title="表单标签：form"></a>表单标签：form</h3><blockquote><p>表单用于收集不同类型的用户输入，表单由不同类型的标签组成</p></blockquote><ul><li>单行文本输入框</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">label</span>&gt;姓名：&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"张三"</span> /&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;密码：&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>text</code>：单行文本框</p><p><code>password</code>：密码输入框</p><p><code>value</code>：定义表单元素的值</p><p><code>name</code>：定义表单元素的名称，提交到后台时通过该值获取对应表单中的数据</p></blockquote><ul><li>单选框</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="gender" <span class="keyword">value</span>="0" /&gt; 男</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="gender" <span class="keyword">value</span>="1" /&gt; 女</span><br></pre></td></tr></table></figure><blockquote><p>在单选框中的<code>name</code>属性可以控制哪几个表单为一组</p></blockquote><ul><li>复选框</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="sing" /&gt; 唱歌</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="run" /&gt; 跑步</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="swiming" /&gt; 游泳</span><br></pre></td></tr></table></figure><ul><li>上传文件</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="picture"&gt;</span><br></pre></td></tr></table></figure><ul><li>多行文本输入框</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下拉表单元素：<code>select</code></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> <span class="type">name</span>="site"&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="0"&gt;北京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="1"&gt;上海&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="2"&gt;广州&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="3"&gt;深圳&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>option</code>：下拉框中的具体属性</p><p><code>value</code>：在表单提交时真正发送给服务器的值</p></blockquote><ul><li>提交按钮：<code>submit</code></li></ul><blockquote><p>点击时触发<code>form</code>标签中的<code>action</code>动作</p></blockquote><ul><li>重置按钮：<code>reset</code></li></ul><blockquote><p>重置所属表单中所有表单框的所填数据</p></blockquote><ul><li>普通按钮：<code>button</code></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="reset" <span class="keyword">value</span>="重置"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="button" <span class="keyword">value</span>="按钮"&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Views-视图层</title>
      <link href="/2019/10/21/Django-Views-%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
      <url>/2019/10/21/Django-Views-%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><blockquote><p>视图函数一般用来接收一个<code>Web</code>请求<code>HttpRequest</code>，之后返回一个Web响应<code>HttpResponse</code></p></blockquote><h3 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest"></a>HttpRequest</h3><blockquote><p>一个视图函数用来响应用户的<code>Request</code>请求，每个视图函数默认的第一个位置参数<code>request</code>用来接收用户发起请求的<code>HttpRequest</code>信息。</p><p>视图函数的返回值，为一个<code>HttpResponse</code>值，包括我们要返回给用户的<code>HTML</code>页面或者字符串等等，以及对应的头部字段信息</p></blockquote><a id="more"></a><!-- # Django-Views-视图层 发表于 1990-01-02 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'Hello world'</span>)</span><br></pre></td></tr></table></figure><h3 id="常见请求方式"><a href="#常见请求方式" class="headerlink" title="常见请求方式"></a>常见请求方式</h3><blockquote><p><code>POST</code>和<code>GET</code>是<code>HTTP</code>协议定义的与服务器交互的方法。</p><p><code>GET</code>一般用于获取/查询资源信息，而<code>POST</code>一般用于更新资源信息。另外，还有<code>PUT</code>和<code>DELETE</code>方法</p></blockquote><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><blockquote><p>常用来从指定地址请求数据；</p><p>如果需要在请求时提交某些数据，则以路由形式传递参数，查询<code>Query</code>字符串如下格式所示：</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//www.baidu.<span class="keyword">com</span>/?key=<span class="keyword">abc</span>&amp;pos=shanxi</span><br></pre></td></tr></table></figure><ul><li><code>get</code>请求可被浏览器缓存，保存在历史记录中</li><li><code>get</code>不应在使用敏感数据时使用，明文包路在请求地址中</li><li><code>get</code>有长度限制</li></ul><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><blockquote><p>向指定的资源提交要被处理的数据</p><p>使用<code>POST</code>，提交的数据保存在<code>HTTP</code>协议中的消息主体部分</p></blockquote><ul><li><code>post</code>请求不会被浏览器缓存</li><li><code>post</code>提交数据长度无限制</li><li><code>post</code>比<code>get</code>更加安全</li></ul><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><blockquote><p>如果说<code>urls.py</code>是<code>Django</code>中前端页面和后台程序桥梁，那么<code>request</code>就是桥上负责运输的小汽车，可以说后端接收到的来至前端的信息几乎全部来自于<code>requests</code>中</p></blockquote><h4 id="request-method"><a href="#request-method" class="headerlink" title="request.method"></a>request.method</h4><blockquote><p>获取当前用户请求方式，</p><p>请求方式字符串为纯大写：<code>&#39;GET&#39;</code>、<code>&#39;POST&#39;</code></p><p>如用户以<code>get</code>方式发起请求，对应代码中获取到的结果以及在判断时像是这样</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">'GET'</span><span class="symbol">:</span></span><br><span class="line">…</span><br></pre></td></tr></table></figure><h4 id="request-GET"><a href="#request-GET" class="headerlink" title="request.GET"></a>request.GET</h4><blockquote><p>当用户通过<code>get</code>方式请求站点，并在路由中提供了查询参数，可以通过该属性获取到对应提交的值</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">index</span>(request):</span><br><span class="line">    print(request.<span class="keyword">GET</span>) </span><br><span class="line">    # &lt;QueryDict: &#123;<span class="string">'name'</span>: [<span class="string">'jack'</span>], <span class="string">'id'</span>: [<span class="string">'1'</span>]&#125;&gt;</span><br><span class="line">    print(<span class="keyword">type</span>(request.<span class="keyword">GET</span>)) </span><br><span class="line">    # &lt;<span class="keyword">class</span> <span class="string">'django.http.request.QueryDict'</span>&gt;</span><br><span class="line">    name_ = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">'name'</span>)</span><br><span class="line">    id_ = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">'id'</span>)</span><br><span class="line">    content = <span class="string">'%s:%s'</span> % (name_,id_)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; request.GET`是一个类似字典的数据类型：`QueryDict</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>其中也支持类似对字典的<code>get</code>或直接<code>dict.[key]</code>键值访问方式，当然使用<code>get</code>方式进行对应<code>key</code>获取会更好，因为<code>get</code>在访问不到时不会报错</p></blockquote><ul><li>如果定义了如上所示的视图函数，那么在访问连接时，我们可以通过路由传参：</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1:8000/?name=jack&amp;id=1</span></span><br></pre></td></tr></table></figure><ul><li>这里对应页面会显示的结果：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jack:<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：使用<code>GET</code>方法在连接中进行参数提交，后台接收到的数据类型均是字符串</p></blockquote><hr><h4 id="request-POST"><a href="#request-POST" class="headerlink" title="request.POST"></a>request.POST</h4><blockquote><p>获取用户以<code>post</code>形式提交的数据并保存在后台，为类字典数据，这里和<code>request.GET</code>是一个东西；</p><p>在网页中，一般我们通过<code>html</code>的表单进行数据的提交，<code>POST</code>方式可以提交空数据</p></blockquote><ul><li>因为涉及到了表单页面，所以我们先来弄一个<code>HTML</code>页面</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个关于POST的测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在模板页面中，一旦涉及到了表单提交，那么一定要注意在表单区域添加<code>csrf_token</code>标签进行防跨站伪造令牌的加载，否则表单数据的将被认为是无效的。</p></blockquote><blockquote><p>在接下来的视图函数中会使用到<code>input</code>标签中的<code>name</code>属性；</p><p><code>name</code>值属性维护了<code>post</code>的数据传入到后台时的标示，会与表单的数据组合成类字典格式</p><p>如<code>name</code>属性为<code>account</code>的输入框中输入了<code>test</code>，那么后台数据接收到的值类似：<code>{&#39;account&#39;:&#39;test&#39;}</code></p></blockquote><ul><li>写一个视图函数用来捕获当前表单使用POST形式提交的数据：</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">index</span>(request):</span><br><span class="line">    <span class="keyword">if</span> request.method=<span class="string">"POST"</span>:</span><br><span class="line">        <span class="keyword">print</span>(request.<span class="keyword">POST</span>)</span><br><span class="line">        <span class="keyword">print</span>(<span class="keyword">type</span>(request.<span class="keyword">POST</span>))</span><br><span class="line">        account = request.<span class="keyword">POST</span>.<span class="built_in">get</span>(<span class="string">"account"</span>)</span><br><span class="line">        passwd = request.<span class="keyword">POST</span>.<span class="built_in">get</span>(<span class="string">"passwd"</span>)</span><br><span class="line">        content = <span class="string">"%s:%s"</span> % (account,passwd)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(content)</span><br><span class="line">   <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>) #在使用get形式请求时，返回表单页面</span><br></pre></td></tr></table></figure><ul><li>如果在表单页面中账号填写为test，密码为123456；在视图函数中捕捉到的结果为：</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="symbol">QueryDict</span>: &#123;<span class="string">'csrfmiddlewaretoken'</span>: [<span class="string">'EmyGwsVcrXI2LDkYLS9qflkUH4N7bM1nfTQxr3fsOsZlI4vJFwci7TargtYRAGl2'</span>], <span class="string">'account'</span>: [<span class="string">'test'</span>], <span class="string">'passwd'</span>: [<span class="string">'123456'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure><h5 id="表单多值提交"><a href="#表单多值提交" class="headerlink" title="表单多值提交"></a>表单多值提交</h5><blockquote><p>在<code>request.POST</code>中需要注意，某些情况下，使用POST提交数据的表单数据可能是多个值，类似复选框<code>CheckBox</code>，直接使用<code>request.POST.get()</code>进行获取是有一些问题的，比如修改模板页面如下所示</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="/" <span class="keyword">method</span>="POST"&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="taste" <span class="keyword">value</span>="eat"&gt;吃</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="taste" <span class="keyword">value</span>="sleep"&gt;睡</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="taste" <span class="keyword">value</span>="play"&gt;耍</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这是一个<code>name</code>值为<code>taste</code>的兴趣爱好采集的多选框，<code>value</code>值将会作为选中时，提交到后台的值，比如现在我们全选这些表单数据，那么后台接收到的值是这样的</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="symbol">QueryDict</span>: &#123;<span class="string">'csrfmiddlewaretoken'</span>: [<span class="string">'nuaLzxc2E0artYKUZiefMPv5iHTX5gLFY1sCu8wi1vrKqpVFTWh7EnlCR64Hua5k'</span>], <span class="string">'taste'</span>: [<span class="string">'eat'</span>, <span class="string">'sleep'</span>, <span class="string">'play'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是问题接踵而至，我们发现使用<code>get</code>函数获取不到对应全选的整个结果，而是只拿到了选中的最后一项</p></blockquote><ul><li><p><code>request.POST.get(key, default=None)</code></p><blockquote><p>返回对应<code>key</code>值的数据中的<strong>最后一个</strong>数据单独返回；<code>key</code>值不存在，取<code>default</code></p></blockquote></li></ul><blockquote><p>要想真正拿出所有的结果，应该使用<code>getlist</code>函数</p></blockquote><ul><li><p><code>request.POST.getlist(key, default=None)</code></p><blockquote><p>将对应<code>key</code>值的所有数据以<strong>一个列表</strong>形式返回；<code>key</code>值不存在，取<code>default</code></p></blockquote></li></ul><h4 id="request-META"><a href="#request-META" class="headerlink" title="request.META"></a>request.META</h4><blockquote><p><code>request.MAT</code>E获取的是一个标准的<code>python</code>字典。它包含了所有的<code>HTTP</code>请求信息</p><p>比如用户IP地址和用户<code>Agent</code>（通常是浏览器的名称和版本号）。</p><p>注意，<code>Header</code>信息的完整列表取决于用户所发送的<code>Header</code>信息和服务器端设置的<code>Header</code>信息</p></blockquote><ul><li><code>CONTENT_LENGTH</code>：请求的正文的长度，字符串类型</li><li><code>CONTENT_TYPE</code>：请求的正文的<code>MIME</code> 类型</li><li><code>HTTP_ACCEPT</code>：响应可接收的<code>Content-Type</code></li><li><code>HTTP_ACCEPT_ENCODING</code>：响应可接收的编码</li><li><code>HTTP_ACCEPT_LANGUAGE</code>：响应可接收的语言</li><li><code>HTTP_HOST</code>：客服端发送的<code>HTTP Host</code>头部</li><li><code>HTTP_REFERER</code>：请求前的连接地址</li><li><code>HTTP_USER_AGENT</code>：客户端的<code>user-agent</code>字符串</li><li><code>QUERY_STRING</code>：单个字符串形式的查询字符串（未解析过的形式）</li><li><code>REMOTE_ADDR</code>：客户端的IP 地址</li><li><code>REMOTE_HOST</code>：客户端的主机名</li><li><code>REMOTE_USER</code>：服务器认证后的用户</li><li><code>REQUEST_METHOD</code>：一个字符串，例如<code>GET</code> 或<code>POST</code></li><li><code>SERVER_NAME</code>：服务器的主机名</li><li><code>SE0RVER_PORT</code>：服务器的端口，字符串类型</li></ul><h4 id="request-FILES"><a href="#request-FILES" class="headerlink" title="request.FILES"></a>request.FILES</h4><blockquote><p>接收用户上传文件及相关信息。同样类似于<code>request.POST</code>，提取到的数据为一个类字典的数据类型，包含所有文件上传的信息</p></blockquote><ul><li><p><code>f = request.FILES.get(&#39;upload_file&#39;)</code></p><blockquote><p><code>file_data = f.read()</code>：读取整个上传文件的内容，适合小文件上传</p><p><code>yiled = f.chunks()</code>：返回一个类似生成器<code>（&lt;class &#39;generator&#39;&gt;）</code>的数据，每一次读取按块返回文件，可以通过<code>for</code>迭代访问其中数据；适合上传大文件到服务器。</p><p><code>f.multiple_chunks()</code>：返回文件大小，当文件大小大于<code>2.5M</code>时，返回<code>True</code>，反之返回<code>False</code>，可以通过该函数来选择是否使用<code>chunks</code>方法或<code>read</code>直接存储。</p><p>如果想要修改这个文件判定的默认值，可以通过：<code>FILE_UPLOAD_MAX_MEMORY_SIZE</code>在<code>settings</code>文件下进行设置</p><p><code>f.content_type</code>：上传文件时头部中的<code>Content-Type</code>字段值，参考MIME类型</p><p><code>f.name</code>：上传文件名字</p><p><code>f.charset</code>：上传文件编码</p><p><code>f.size</code>： 上传文件大小，字节为单位：<code>byte</code></p></blockquote></li></ul><blockquote><p>创建好静态资源目录，并在下面创建一个<code>img</code>文件夹，保存我们即将上传的图片；</p><p>完成上传文件的<code>HTML</code>表单页面</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload_file"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'img/1.jpg' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">"这是一张图片"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 这里使用的是即将要上传的文件名字，只做文件是否上传成功的简单测试 --&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：上传文件的页面表单，一定要记得设置属性<code>enctype=&quot;multipart/form-data&quot;</code></p></blockquote><ul><li>视图函数如下编写，接收上传图片，并保存在静态目录下刚才创建好的img目录中</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        f = request.FILES.<span class="built_in">get</span>(<span class="string">"upload_files"</span>)</span><br><span class="line">        path = os.path.join(settings.STATICFILES_DIRS[<span class="number">0</span>],<span class="string">'img/'</span>+f.name)</span><br><span class="line">  <span class="comment"># 上传文件本地保存路径</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">if</span> f.multiple_chunks: <span class="comment">#判断到上传文件为大于2.5MB的大文件</span></span><br><span class="line">                <span class="keyword">for</span> buf <span class="keyword">in</span> f.chunks(): <span class="comment">#迭代写入文件</span></span><br><span class="line">                    fp.<span class="built_in">write</span>(buf)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fp.<span class="built_in">write</span>(f.<span class="built_in">read</span>())</span><br><span class="line">            <span class="literal">return</span> HttpResponse(<span class="string">"Success!"</span>)</span><br><span class="line">  <span class="literal">return</span> render(request, <span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>测试上传一个名为<code>1.jpg</code>的图片，如果成功上传，那么后台<code>static</code>目录下会出现该图片，并且模板页面也可以展示对应图片效果</p></blockquote><h3 id="HTTPResponse"><a href="#HTTPResponse" class="headerlink" title="HTTPResponse"></a>HTTPResponse</h3><blockquote><p>一个视图的返回值经常是为了向用户返回一个<code>HttpResponse</code>响应，</p><p>有如下常用的可以返回<code>HttpResponse</code>的函数</p></blockquote><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><ul><li><p><code>HttpResponse(content=b&#39;&#39;)</code></p><blockquote><p>返回一个字符串内容</p><p><em>from</em> django.http <em>import</em> HttpResponse</p></blockquote></li><li><p><code>render(request,template_name,context=None,content_type=None,status=None)</code></p><blockquote><p>返回一个可渲染HTML页面，状态码为<code>200</code></p><p><em>from</em> django.shortcuts <em>import</em> render</p></blockquote><blockquote><p><code>request</code>：固定参数，响应的<code>request</code>请求，来自于参数部分接收的<code>HttpRequest</code></p><p><code>template_name</code>：返回的模板页面路径</p><p><code>context</code>：模板页面渲染所需的数据，默认为字典格式</p><p><code>content_type</code>：生成之后的结果使用的<code>MIME</code>类型</p><p><code>status</code>：响应的状态码，默认为<code>200</code></p></blockquote></li><li><p><code>redirect(to, permanent=False)</code></p><blockquote><p>一个重定向，浏览器通过该状态码自动跳转到一个新的路由地址，默认返回响应状态码<code>302</code></p><p><em>from</em> django.shortcuts <em>import</em> redirect</p></blockquote><blockquote><p><code>to</code>：可以是一个<code>django</code>项目中视图函数的路由映射，也可以是一个<code>reverse</code>的反向路由解析</p><p><code>permanent</code>：如果设置为<code>True</code>，将返回<code>301</code>状态码，代表永久重定向</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">302</span>：临时重定向，旧地址资源临时不能用了，搜索引擎只会暂时抓取新地址的内容而保存旧的地址。</span><br><span class="line"><span class="number">301</span>：永久重定向，旧地址资源已经不复存在，搜索引擎不光会抓取新地址的内容，还会替换旧地址为新地址</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图错误处理"><a href="#视图错误处理" class="headerlink" title="视图错误处理"></a>视图错误处理</h3><blockquote><p>为了方便我们开发，<code>django</code>提供了一个异常叫做<code>Http404</code>异常，我们可以在视图函数的代码中按照需求进行抛出，抛出之后<code>django</code>项目会自动捕获该异常，并会展示默认的<code>404</code>页面</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line">def <span class="keyword">index</span>(request):</span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">GET</span>.<span class="keyword">get</span>("id") == "1":</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br></pre></td></tr></table></figure><blockquote><p>在<code>settings</code>中的<code>debug</code>配置项为<code>false</code>时，访问<code>http://127.0.0.1:8000/?id=1</code>，可以看到<code>django</code>为我们提供的错误页面；</p><p>除了<code>django</code>默认提供的，我们还可以可以在模板目录下定义全局<code>404.html</code>进行错误页面的定制</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    抱歉，找不到你要的东西</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义错误处理视图"><a href="#自定义错误处理视图" class="headerlink" title="自定义错误处理视图"></a>自定义错误处理视图</h4><blockquote><p>除去<code>404</code>错误的自定义，<code>django</code>还提供了覆盖默认错误行为处理的办法；</p><p>有些时候，<code>django</code>自动的错误处理可能不能满足我们的需求，那么我们可以重新定义一些新的视图函数，</p><p>来覆盖掉<code>django</code>所提供的错误处理视图函数，最后在<code>urls.py</code>路由配置文件下通过定义全局变量来重新设置默认的错误处理视图函数</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">handler404：覆盖page_not_found()视图。</span><br><span class="line">handler500：覆盖server_error()视图。</span><br><span class="line">handler403：覆盖permission_denied()视图。</span><br><span class="line">handler400：覆盖bad_request()视图</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span>,<span class="keyword">include</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, <span class="keyword">admin</span>.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, <span class="keyword">include</span>("viewapp.urls")),</span><br><span class="line">]</span><br><span class="line">handler404 = "viewapp.views.error_404"</span><br><span class="line"># APP.模块.视图函数</span><br><span class="line">handler500 = "viewapp.views.error_500"</span><br></pre></td></tr></table></figure><blockquote><p>相关定义好的错误处理视图函数</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"这是404错误"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_403</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"这是403错误"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_500</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"这是500错误"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Models-模型层</title>
      <link href="/2019/10/21/Django-Models-%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2019/10/21/Django-Models-%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><blockquote><p>该层开发的首要任务就是定义模型类以及属性</p><p>每个模型都可以被映射为数据库中的一个数据表，而类属性被映射为为数据字段</p></blockquote><h3 id="配置Mysql数据库"><a href="#配置Mysql数据库" class="headerlink" title="配置Mysql数据库"></a>配置Mysql数据库</h3><blockquote><p>在确保<code>mysql</code>数据库可以连接使用的情况下；</p><p>首先在数据库中创建专为<code>django</code>使用的库<code>django_data</code></p></blockquote><a id="more"></a><!-- # Django-Models-模型层 发表于 1990-01-05 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> django_data;</span><br></pre></td></tr></table></figure><blockquote><p>配置django的settings.py文件中的DATABASES属性如下</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    'default': &#123;</span><br><span class="line">        'ENGINE': 'django.db.backends.mysql', <span class="meta"># 数据库引擎</span></span><br><span class="line">        'NAME': <span class="string">"django_data"</span>, <span class="meta"># 使用的库名</span></span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"root"</span>, <span class="meta"># 用户名</span></span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="string">"123456"</span>, <span class="meta"># 数据库密码</span></span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"localhost"</span>, <span class="meta"># 数据库主机地址</span></span><br><span class="line">        <span class="string">"PORT"</span>: <span class="string">"3306"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于使用<code>django</code>的<code>Python</code>版本为3+；</p><p>此时对于<code>mysql</code>的支持已经变为<code>pymysql</code>，而对于<code>django</code>加载数据库引擎时还需要使用2版本的<code>mysqldb</code>名称</p><p>现在先需要我们安装<code>pymysql</code>之后在项目中重申mysql引擎</p></blockquote><ol><li><p>首先安装pymysql</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql -<span class="selector-tag">i</span> https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure></li><li><p>项目主目录下的<code>__init__</code>文件中添加如下内容</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="title">pymysql</span>.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li><li><p>现在整个项目的数据库使用已经切换到了<code>mysql</code></p></li></ol><h3 id="模型层字段"><a href="#模型层字段" class="headerlink" title="模型层字段"></a>模型层字段</h3><blockquote><p>在模型层类中的字段即是数据库中表的字段，表的字段设计非常重要</p><p>每一个字段都是<code>Field</code>基类的一个实例（<code>Field</code>类用来建立字段与数据库之间的映射）</p><p>模型字段定义不能以下划线结尾</p></blockquote><ul><li>django会根据在模型类中定义的字段属性来确定以下几点工作<ul><li>数据库中使用的数据类型</li><li>模型类对应的表单类渲染时使用的表单类型及<code>HTML</code>部件</li><li>必填字段等最低限度的验证要求检查，包括<code>admin</code>界面下自动生成的表单</li></ul></li></ul><h4 id="BooleanField"><a href="#BooleanField" class="headerlink" title="BooleanField"></a>BooleanField</h4><blockquote><p><code>BooleanField(**options)</code>：True/False字段，默认值为None</p></blockquote><blockquote><p>表单类型：<strong>CheckboxInput</strong>，<code>&lt;input type=&#39;checkbox&#39; ...&gt;</code></p></blockquote><h4 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a>CharField</h4><blockquote><p><code>CharField(max_length=None)</code>：字符串字段</p></blockquote><blockquote><p>含有一个必须参数：<code>max_length</code>设置最大的<strong>字符数</strong>长度限制；</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote><h4 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a>DateField</h4><blockquote><p><code>DateField(auto_now=False, auto_now_add=False,**options)</code>：以 <code>datetime.date</code>实例表示的日期</p></blockquote><blockquote><p>含有两个可选参数：<code>auto_now</code>、<code>auto_now_add</code></p><p><code>auto_now</code>：该值为True时，每次在保存数据对象时，自动设置该字段为当前时间，也可以理解为自动更新最后一次修改时间</p><p><code>auto_now_add</code>：该值为<code>True</code>时，该字段设置在第一次数据对象创建时，可以记录当前字段创建的时间值</p></blockquote><blockquote><p><strong>注意</strong>：避免矛盾，<code>auto_now</code>，<code>auto_now_add</code>，<code>default</code>不能同时出现，一个字段属性只能有其中一条设置，当设置了<code>auto_now</code>，或<code>auto_now_add</code>时，也会让该字段默认具有<code>blank=True</code>（字段可以为空）属性</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote><h4 id="DatetimeField"><a href="#DatetimeField" class="headerlink" title="DatetimeField"></a>DatetimeField</h4><blockquote><p><code>DatetimeField(auto_now=False, auto_now_add=False,**options)</code>：以<code>datetime.datetime</code>实例表示的日期和时间</p><p>和<code>DateField</code>具有相同的字段属性</p></blockquote><h4 id="DecimalField"><a href="#DecimalField" class="headerlink" title="DecimalField"></a>DecimalField</h4><blockquote><p><code>DecimalField(max_digits=None,decimal_places=None, **options)</code>：以Decimal实例标示的十进制浮点数类型</p></blockquote><blockquote><p>含有两个可选参数：<code>max_digits</code>、<code>decimal_places</code></p><p><code>max_digits</code>：位数总数，包括小数点后的位数，必须大于<code>decimal_places</code>参数</p><p><code>decimal_places</code>：小数点后的数字数量，精度</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote><h4 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField"></a>EmailField</h4><blockquote><p><code>EmailField(max_length=254, **option)</code>：<code>CharField</code>子类，表示<code>Email</code>字段，并会检查是否为合法邮箱地址</p></blockquote><blockquote><p>默认参数：<code>max_length</code>，表示邮箱地址长度，默认为254</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote><h4 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField"></a>FloatField</h4><blockquote><p><code>FloatField(**options)</code>：使用<code>float</code>实例来表示的浮点数</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote><h4 id="IntegerField"><a href="#IntegerField" class="headerlink" title="IntegerField"></a>IntegerField</h4><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; IntegerField(**options)`：一个整数，范围由`-<span class="number">2147483648</span>`到`2147483647</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="GenericIPAddressField"><a href="#GenericIPAddressField" class="headerlink" title="GenericIPAddressField"></a>GenericIPAddressField</h4><blockquote><p><code>GenericIPAddressField(protocol=both, unpack_ipv4=False, **options)</code>：一个IPV4或IPV6地址的字符串</p></blockquote><blockquote><p>默认参数：<code>protocol</code>、<code>unpack_ipv4</code></p><p><code>protocol</code>：IP协议，ipv4或ipv6，默认<code>both</code>为全选</p><p><code>unpack_ipv4</code>：解析IP地址，只有当协议为<code>both</code>时才可以使用</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot;...&gt;</code></p></blockquote><h4 id="SlugField"><a href="#SlugField" class="headerlink" title="SlugField"></a>SlugField</h4><blockquote><p><code>SlugField(max_length=50, **option)</code>：只包含字母、数字、下划线的字符串，常用来表示连接中的<code>path</code>部分或者一些其他短标题类型数据</p></blockquote><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><blockquote><p><code>TextField(**options)</code>：大文本字段</p></blockquote><blockquote><p>表单类型：<strong>Textarea</strong>，<code>&lt;textarea&gt;...&lt;/textarea&gt;</code></p></blockquote><h4 id="URLField"><a href="#URLField" class="headerlink" title="URLField"></a>URLField</h4><blockquote><p><code>URLField(max_length=200, **options)</code>：<code>CharField</code>的子类，存储URL的字段</p></blockquote><blockquote><p>表单类型：<strong>TextInput</strong>，<code>&lt;input type=&quot;text&quot;...&gt;</code></p></blockquote><h3 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h3><blockquote><p>以上所介绍的字段，均支持以下属性</p></blockquote><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><blockquote><p>如果该值为<code>True</code>，Django将在数据库中将控制存储为<code>NULL</code></p><p>字符串字段<code>CharField</code>与<code>TextField</code>要避免使用<code>null</code>，因为空值字符串将存储空字符串（””）,而不是<code>null</code>值。</p><p>对于字符串类型的数据字段，大多数情况下，<code>django</code>使用空字符串代表空值</p></blockquote><h4 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h4><blockquote><p>如果该值为<code>True</code>，则在验证时该字段值可以为空；</p><p><code>null</code>为数据库存储层面可以为空，而<code>blank</code>为表单验证层面可以填写空值</p></blockquote><h4 id="choices"><a href="#choices" class="headerlink" title="choices"></a>choices</h4><blockquote><p>一个二元组的列表或元组；</p><p>元组中第一个值为真正在数据库中存储的值，第二个值为该选项的描述</p><p>该值一旦被设定，表单样式会显示选择框，而不是标准的文本框，选择框内的选项为<code>choices</code>中的元组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTable</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">CHAR_CHOICE = [</span><br><span class="line">        (<span class="string">'H'</span>,<span class="string">"非常苦难"</span>),</span><br><span class="line">        (<span class="string">'M'</span>,<span class="string">"中等难度"</span>),</span><br><span class="line">        (<span class="string">'S'</span>,<span class="string">"非常简单"</span>),</span><br><span class="line">]</span><br><span class="line">choicechar = modesl.CharField(max_length=<span class="number">1</span>,choices=CHAR_CHOICE)</span><br></pre></td></tr></table></figure><ul><li><code>choices</code>字段也支持分类的写法</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CHAR_CHOICE</span> = [</span><br><span class="line">(<span class="string">'A'</span>,</span><br><span class="line">(</span><br><span class="line">(<span class="string">'H'</span>,<span class="string">"Hard"</span>),</span><br><span class="line">)</span><br><span class="line">),</span><br><span class="line">(<span class="string">'B'</span>,</span><br><span class="line">(</span><br><span class="line">(<span class="string">'M'</span>,<span class="string">"Medium"</span>),</span><br><span class="line">)</span><br><span class="line">),</span><br><span class="line">…</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>分类的名称作为元组中的第一个值，</p><p>元组的第二个值为该分类下的一个新的二元组序列数据</p></blockquote><h4 id="db-column"><a href="#db-column" class="headerlink" title="db_column"></a>db_column</h4><blockquote><p>数据库中用来表示该字段的名称，如果未指定，那么Django将会使用<code>Field</code>名作为字段名</p></blockquote><h4 id="db-index"><a href="#db-index" class="headerlink" title="db_index"></a>db_index</h4><blockquote><p>当该值为<code>True</code>时，为该字段创建索引</p></blockquote><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><blockquote><p>该字段默认值，可以是一个值或是一个回调函数</p><p>当是一个函数对象时，在创建新对象时，函数调用</p></blockquote><h4 id="editable"><a href="#editable" class="headerlink" title="editable"></a>editable</h4><blockquote><p>如果设置该值为False，那么这个字段将不允许被编辑</p><p>不会出现在admin后台界面下，以及其他ModelForm表单中，同时也会跳过模型验证</p></blockquote><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h4><blockquote><p>设置该值为<code>True</code>时，该字段成为模型的主键字段，<strong>一个模型类同时只能有一个主键</strong></p><p>如果一个表中不存在任意一个设置好的主键字段，<strong>django会自动设置一个自增</strong>的<code>AutoField</code>字段来充当主键，该值可以用<code>pk</code>，<code>id</code>方式获取。主键的设置还意味着，<code>null=False</code>，<code>unique=True</code></p></blockquote><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><blockquote><p>如果该值为True，代表这个数据在当前的表中有唯一值</p><p>这个字段还会在模型层验证存储的数据是否唯一</p><p>unique的设置也意味着当前字段具备索引的创建</p><p><code>ManyToManyField</code>、<code>OneToOneField</code>与<code>FileField</code>字段不可以使用该属性</p></blockquote><h4 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose_name"></a>verbose_name</h4><blockquote><p>对于字段的一个可读性更高的名称</p><p>如果没有设置该值，django将字段名中的下换线转换成空格，作为当前字段的数据库中名称</p></blockquote><h3 id="模型元属性"><a href="#模型元属性" class="headerlink" title="模型元属性"></a>模型元属性</h3><blockquote><p>在模型类的<code>Meta</code>类中，可以提供一系列的元选项，可以方便对该模型类进行属性设置或约束等</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTable</span></span>(models.Model):</span><br><span class="line">…</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:<span class="type"></span></span></span><br><span class="line">ordering = [Fields]</span><br><span class="line">…</span><br></pre></td></tr></table></figure><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><blockquote><p>代表当前模型类为抽象基类，不会创建真正的数据表，只是为了其他模型类继承使用</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abstract</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="app-label"><a href="#app-label" class="headerlink" title="app_label"></a>app_label</h4><blockquote><p>当模型类被定义在了其他app下，这个属性用来描述当前表属于哪个app应用</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app_label</span> = <span class="string">"MyApp"</span></span><br></pre></td></tr></table></figure><h4 id="db-table"><a href="#db-table" class="headerlink" title="db_table"></a>db_table</h4><blockquote><p>当前模型类所对应的表名，未设置时，django默认将表名与app名由下划线组成，作为表名</p><p>需要注意这个表名为真实在数据库中所使用的，所以该元选项的使用应在数据表创建之前</p><p>如果在表已经存在的情况下去修改，会导致数据库内表与模型类表名不一致而查找不到报错</p></blockquote><h4 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h4><blockquote><p>当前表中的数据存储时的排序规则，这是一个字段名的字符串，可以是一个列表或元组；</p><p>每一个字符串前可以使用”<code>-</code>“来倒序排序，使用”<code>?</code>“随机排序</p><p>ordering排序规则的添加，也会增加数据库的开销</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ordering</span> = [<span class="string">'-birthday'</span>, <span class="string">'age'</span>]</span><br><span class="line"><span class="comment">#先按照birthday倒序排序，再按照age字段进行排序。</span></span><br></pre></td></tr></table></figure><h4 id="unique-together"><a href="#unique-together" class="headerlink" title="unique_together"></a>unique_together</h4><blockquote><p>用来设置表中的不重复字段组合</p><p>格式为一个元组，元组中的每个数据都是一个元组，用来描述不重复的组合字段</p><p>如果只处理单一字段组合，可以是一个一维的元组</p><p>联合约束</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unique_together</span> = ((<span class="string">'name'</span>,<span class="string">'phone'</span>),)</span><br></pre></td></tr></table></figure><h4 id="verbose-name-1"><a href="#verbose-name-1" class="headerlink" title="verbose_name"></a>verbose_name</h4><blockquote><p>一般设置该表展示时所用的名称，名称被自动处理为复数，字符串后加一个”s”</p></blockquote><h4 id="verbose-name-plural"><a href="#verbose-name-plural" class="headerlink" title="verbose_name_plural"></a>verbose_name_plural</h4><blockquote><p>与<code>verbose_name</code>功能相同，但是不会自动在字符串后加”<code>s</code>“以表复数</p><p>设置表的复数名称</p></blockquote><h3 id="模型操作"><a href="#模型操作" class="headerlink" title="模型操作"></a>模型操作</h3><blockquote><p>在进行模型操作的学习之前，可以先创建一个测试的数据库模型类，如下所示</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Person(<span class="params">models</span>.Model)</span>:</span><br><span class="line">name = models.<span class="constructor">CharField(<span class="params">max_length</span>=10,<span class="params">verbose_name</span>=<span class="string">"姓名"</span>)</span></span><br><span class="line">age = models.<span class="constructor">IntegerField(<span class="params">verbose_name</span>=<span class="string">"年龄"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><blockquote><p>django自带了一个数据库测试的shell工具</p><p>这是一个非常方便可以让我们对django代码进行测试的环境</p><p>可以直接通过<code>python manage.py shell</code>命令行管理工具来打开</p></blockquote><h5 id="实例save创建数据"><a href="#实例save创建数据" class="headerlink" title="实例save创建数据"></a>实例save创建数据</h5><blockquote><p><strong>通过模型类的关键词参数实例化一个对象来进行数据的创建</strong></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from app.models import Person</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p1 = Person(name=<span class="string">'张三'</span>,age=<span class="number">15</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p1.save()</span><br></pre></td></tr></table></figure><blockquote><p>以上的代码，在为字段赋予值之后，通过实例的save函数进行该数据的保存</p><p>在数据库底层执行了<code>SQL</code>语句中的<code>insert</code>操作，并且，在我们显示调用<code>save</code>之前，<code>django</code>不会访问数据库，实例数据只存在于内存中</p></blockquote><blockquote><p><strong>注意</strong>：<code>save</code>函数没有返回值</p></blockquote><h5 id="create方法创建数据"><a href="#create方法创建数据" class="headerlink" title="create方法创建数据"></a>create方法创建数据</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; P1 = Person<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'李四'</span>,age=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这条语句创建一条数据，并且返回一个数据在内存中的实例P1</p><p>之后可以通过这个实例字段P1对数据库中该条数据进行修改或删除操作</p><p><code>create</code> 方法一步到位，<code>save</code>方式可以慢悠悠的赋予字段值，最后赋予结束再save</p></blockquote><h4 id="查找对象"><a href="#查找对象" class="headerlink" title="查找对象"></a>查找对象</h4><blockquote><p>接下来，我们将通过模型类中的管理器进行数据的查询；</p><p>管理器<code>（Manager）</code>是每一个模型类所具有的，默认名为<code>objects</code></p><p>模型类通过模型类调用<code>orm</code>数据接口，其实就是在对数据表进行操作。</p><p><strong>注意</strong>，具体的某一条数据无法访问这个管理器</p></blockquote><h5 id="all"><a href="#all" class="headerlink" title="all()"></a><code>all()</code></h5><blockquote><p>获取一个表中的所有数据，返回<code>QuerySet</code>数据对象</p></blockquote><ul><li><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_person = Person<span class="selector-class">.objects</span><span class="selector-class">.all</span>()</span><br></pre></td></tr></table></figure></li></ul><h5 id="filter-kwargs"><a href="#filter-kwargs" class="headerlink" title="filter(**kwargs)"></a><code>filter(**kwargs)</code></h5><blockquote><p>返回一个包含数据对象的集合，满足参数中所给的条件</p></blockquote><ul><li><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = Person<span class="selector-class">.objects</span><span class="selector-class">.all</span>().<span class="attribute">filter</span>(age__lt=<span class="number">16</span>)</span><br><span class="line">res = Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(age__lt=<span class="number">16</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>我们在查询过程中，除了直接使用字段属性进行验证</p><p>还可以在字段名之后使用双下化线来标明更加详细的字段筛选条件（在下一节会有详细的字段筛选条件介绍），也叫做链式过滤</p><p>这也是为什么表单类字段不可以以下换线结尾的原因</p></blockquote><h5 id="exclude-kwargs"><a href="#exclude-kwargs" class="headerlink" title="exclude(**kwargs)"></a><code>exclude(**kwargs)</code></h5><blockquote><p>返回一个包含数据对象的集合，数据为不满足参数中所给的条件</p></blockquote><blockquote><p>filter()查询会始终返回一个结果集，哪怕只有一个数据。</p><p>但是有些时候，我们对于一些在数据表中的唯一数据进行查询时，可以使用更加合适的<code>get</code>方法</p></blockquote><hr><blockquote><p><strong>注意</strong>：创建结果集的过程不涉及任何数据库的操作，查询工作是惰性的，在上面的查询方式中，查询代码不会实际访问数据库，只有查询集在真正使用时，django才会访问数据库</p></blockquote><h5 id="get-kwargs"><a href="#get-kwargs" class="headerlink" title="get(**kwargs)"></a><code>get(**kwargs)</code></h5><blockquote><p>获取唯一单条数据</p></blockquote><blockquote><p>get获取数据只会返回一条匹配的结果，获取的数据只能在数据库中有一条</p><p>如果返回多个结果，会引发<code>MultipleObjectsReturned</code>异常</p><p>如果没有任何匹配到的结果也会引发<code>DoesNotExist</code>异常</p></blockquote><ul><li><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.objects.<span class="builtin-name">get</span>(<span class="attribute">pk</span>=1)</span><br></pre></td></tr></table></figure></li></ul><h5 id="order-by-field"><a href="#order-by-field" class="headerlink" title="order_by(*field)"></a><code>order_by(*field)</code></h5><blockquote><p>默认情况下，数据表使用模型类中的Meta中指定的ordering选项进行排序</p><p>现在也可以通过使用order_by函数进行查询结果的排序</p></blockquote><ul><li><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>objects.order<span class="constructor">_by('<span class="params">age</span>')</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>objects.all<span class="literal">()</span>.order<span class="constructor">_by('-<span class="params">age</span>')</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="count"><a href="#count" class="headerlink" title="count()"></a><code>count()</code></h5><blockquote><p>返回数据库中对应字段的个数，并且该函数永远不会引发异常</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">models<span class="selector-class">.Person</span><span class="selector-class">.objects</span><span class="selector-class">.filter</span>(age=<span class="number">20</span>).count()</span><br><span class="line">Person<span class="selector-class">.objects</span><span class="selector-class">.count</span>()</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>count</code>函数时，还需要对数据表进行迭代访问</p><p>所以有时使用已生产好的结果集，通过len函数获取长度，这种方式效率会更高</p><p><code>count</code>方法的调用会导致额外的数据库查询</p></blockquote><h5 id="values-fields"><a href="#values-fields" class="headerlink" title="values(*fields)"></a><code>values(*fields)</code></h5><blockquote><p>返回一个查询集结果，但是迭代访问时返回的是字典，而不是数据实例对象</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">models<span class="selector-class">.Person</span><span class="selector-class">.objects</span><span class="selector-class">.all</span>().values()</span><br><span class="line">models<span class="selector-class">.Person</span><span class="selector-class">.objects</span><span class="selector-class">.values</span>()</span><br></pre></td></tr></table></figure><h4 id="链式过滤条件"><a href="#链式过滤条件" class="headerlink" title="链式过滤条件"></a>链式过滤条件</h4><ul><li><p><code>exact</code></p><blockquote><p>如果在查询过程中，没有提供查询类型（没有<code>双下划线</code>），那么查询类型就会被默认指定为<code>exact</code>，这是一种严格查找的方式，用来在数据库中查找和查询时的关键词参数完全一致的内容</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(account=<span class="string">'root'</span>)</span><br><span class="line">&gt;&gt;&gt; Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(account__exact=<span class="string">'root'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>iexact</code></p><blockquote><p>忽略大小写的匹配</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; Person.objects.filter(account__iexact=<span class="string">'root'</span>)</span><br><span class="line"><span class="comment">#匹配到的结果可能是Root，ROot，ROOt，ROOT</span></span><br></pre></td></tr></table></figure></li><li><p><code>startswith、endswith</code></p><blockquote><p>分别匹配开头和结尾，区分大小写</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; Person.objects.filter(passwd__startswith=<span class="string">'admin'</span>)</span><br><span class="line"><span class="comment">#匹配以admin开头的数据</span></span><br></pre></td></tr></table></figure></li><li><p><code>istartswith、iendswith</code></p><blockquote><p>分别匹配开头和结尾，忽略大小写</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(passwd__istartswith=<span class="string">'admin'</span>)</span><br><span class="line">匹配以不区分大小写的字符串admin为开头的数据</span><br></pre></td></tr></table></figure></li><li><p><code>gte</code></p><blockquote><p>大于或等于</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(reg_data__gte=datetime<span class="selector-class">.date</span><span class="selector-class">.today</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>lte</code></p><blockquote><p>小于或等于</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Person<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(reg_data__lte=datetime<span class="selector-class">.date</span><span class="selector-class">.today</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改对象"><a href="#修改对象" class="headerlink" title="修改对象"></a>修改对象</h4><blockquote><p>获取到对应的数据实例之后，通过<code>.</code>的方式访问数据实例中的属性，进行数据的字段修改</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> = models<span class="selector-class">.Person</span><span class="selector-class">.objects</span><span class="selector-class">.get</span>(pk=<span class="number">1</span>)</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.age</span> = <span class="number">21</span></span><br><span class="line"><span class="selector-tag">p</span>.save()</span><br></pre></td></tr></table></figure><blockquote><p>对过滤出的结果链式调用<code>update()</code>函数，这样的修改，类似批量修改，<code>update</code>函数会返回成功修改的个数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">models.Person.objects.filter(age__gt=<span class="number">100</span>).update(age=<span class="number">25</span>)</span><br><span class="line"># 将所有年纪小于<span class="number">100</span>的人的年纪改为<span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h4><blockquote><p>对于普通的单表数据删除，获取到数据实例对象后调用内置的<code>delete()</code>函数即可</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.Person.objects.<span class="builtin-name">get</span>(<span class="attribute">pk</span>=1).delete()</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，删除一条数据之后，默认占有的主键ID值并不会被下一个新插入的值所占用</p><p>比如 1，2，3，4；删除掉3之后，剩下：1，2，4；下一个值存储时，id是5，3不会被复用</p></blockquote><h3 id="字段关系"><a href="#字段关系" class="headerlink" title="字段关系"></a>字段关系</h3><ul><li>字段关系是<code>django</code>维护表关系的方式；其中主要有一对一，多对一以及多对多，</li><li>现在的一对一及多对一关系中需要设置<code>on_delete</code>属性用来描述当关联数据被删除时的操作，有如下一些</li></ul><blockquote><p><strong>models.CASCADE</strong>：删除关联数据,与之关联也删除</p><p>models.PROTECT：删除关联数据,引发错误<code>ProtectedError</code></p><p><strong>models.SET_NULL</strong>：与之关联的值设置为<code>null</code>（前提<code>FK</code>字段需要设置为可空）</p><p>models.SET_DEFAULT： 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值）</p><p>models.DO_NOTHING：删除关联数据,什么也不做</p></blockquote><h4 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h4><blockquote><p>模型类使用<code>OneToOneField</code>用来定义一对一关系；</p><p>比如当你拥有一个老师表时，紧接着你还需要一个教授表，那么教授表可能拥有老师表的一系列属性，那么你还不想把老师表中的字段直接复制到教授表那么可以通过<code>OnToOneField</code>来实现教授表继承老师表。</p><p>其实，在使用模型类继承时，也隐含有一个一对一关系</p></blockquote><ul><li><code>OneToOneField(to, on_delete, parent_link=False, options)</code></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Teacher(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=50)</span></span><br><span class="line">    age = models.<span class="constructor">CharField(<span class="params">max_length</span>=50)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Professor(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    teacher = models.<span class="constructor">OneToOneField(Teacher,<span class="params">primary_key</span>=True,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE)</span></span><br><span class="line">    big_project = models.<span class="constructor">CharField(<span class="params">max_length</span>=50)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.teacher.name</span><br></pre></td></tr></table></figure><blockquote><p>在<code>manage.py shell</code>下进行数据库操作</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t1 = Teacher<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Jack'</span>,age=<span class="string">'22'</span>)</span><br><span class="line">&gt;&gt;&gt; t2 = Teacher<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Bob'</span>,age=<span class="string">'17'</span>)</span><br><span class="line">&gt;&gt;&gt; p1 = Professor<span class="selector-class">.objects</span><span class="selector-class">.create</span>(teacher=t1,big_project=<span class="string">'雾霾净化术'</span>)</span><br><span class="line">&gt;&gt;&gt; p1.teacher</span><br><span class="line">&lt;Teacher: Jack&gt;</span><br><span class="line">&gt;&gt;&gt; p1<span class="selector-class">.teacher</span> = t2</span><br><span class="line">&gt;&gt;&gt; p1.save()</span><br><span class="line">&gt;&gt;&gt; p1.teacher</span><br><span class="line">&lt;Teacher: Bob&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的测试中，看似已经将<code>p1</code>对应的教授变成了<code>Bob</code>；</p><p>但是在数据库中之前<code>t1</code>老师所对应的教授信息还存在，此时的赋值操作并不会覆盖掉教授他之前的教授数据，只是重新创建了一条。</p><p>正确的做法应该是将某一条数据的一对一关系通过<code>delete</code>关系先删除之后再重新赋予</p></blockquote><h4 id="多对一关系"><a href="#多对一关系" class="headerlink" title="多对一关系"></a>多对一关系</h4><blockquote><p><code>Django</code>使用<code>django.db.models.ForeignKey</code>定义多对一关系。</p><p><code>ForeignKey</code>需要一个位置参数：与该模型关联的类</p></blockquote><blockquote><p>生活中的多对一关系：班主任，班级关系。一个班主任可以带很多班级，但是每个班级只能有一个班主任</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Headmaster</span>(<span class="title">models</span>.<span class="title">Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span>(<span class="title">models</span>.<span class="title">Model</span>):</span></span><br><span class="line">    class_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    teacher = models.ForeignKey(Headmaster,null=True,on_delete=models.SET_NULL)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.class_name</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H1 = Headmaster(name=<span class="string">'渔夫'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H1.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H1</span><br><span class="line">&lt;<span class="symbol">Headmaster:</span> 渔夫&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H2 = Headmaster(name=<span class="string">'农夫'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H2.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Headmaster.objects.all()</span><br><span class="line">[&lt;<span class="symbol">Headmaster:</span> 渔夫&gt;, &lt;<span class="symbol">Headmaster:</span> 农夫&gt;]</span><br></pre></td></tr></table></figure><blockquote><p>以上创建了两条老师数据</p><p>由于我们设置外键关联可以为空<code>null=True</code>,所以此时在班级表创建时，可以直接保存，不需要提供老师数据</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1 = Class(class_name=<span class="string">'一班'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C2 = Class(class_name=<span class="string">'二班'</span>)</span><br><span class="line"><span class="comment">#如果外键设置不为空时，保存会引发以下错误</span></span><br><span class="line"><span class="comment"># IntegrityError: NOT NULL constraint failed: bbs_class.teacher_id</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.teacher = H1</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C2.teacher = H2</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C2.save()</span><br></pre></td></tr></table></figure><blockquote><p>将老师分配个班级之后，由于班级表关联了老师字段，我们可以通过班级找到对应老师</p><p>虽然老师表中没有关联班级字段，但是也可以通过老师找到他所带的班级，这种查询方式也叫作关联查询</p><p>通过模型类名称后追加一个’_set’，来实现反向查询</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; H1.class_set.all()</span><br><span class="line">&lt;QuerySet <span class="meta">[&lt;Class: 一班&gt;]</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>由于我们这是一个多对一的关系，也就说明我们的老师可以对应多个班级</p><p>我们可以继续给H1老师分配新的班级</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; C3 = Class(class_name='三班')</span><br><span class="line">&gt;&gt;&gt; C3.teacher = H1</span><br><span class="line">&gt;&gt;&gt; C3.save()</span><br><span class="line">&gt;&gt;&gt; H1.class_set.all()</span><br><span class="line"><span class="meta">[&lt;Class: 一班&gt;, &lt;Class: 三班&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>一个班级只能对应一个老师，外键是唯一的，那么你在继续给C1班级分配一个新的老师时，会覆盖之前的老师信息，并不会保存一个新的老师</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; H3 = Headmaster(name=<span class="string">'伙夫'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; H3.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.teacher</span><br><span class="line">&lt;<span class="symbol">Headmaster:</span> 渔夫&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.teacher=H3</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; C1.teacher</span><br><span class="line">&lt;<span class="symbol">Headmaster:</span> 伙夫&gt;</span><br></pre></td></tr></table></figure><blockquote><p>把这个班级的老师删除，由于设置了外键字段可以为<code>null</code>，此时班级的老师选项为<code>null</code></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; t1 = Headmaster.objects.all().first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t1</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1 = Class.objects.all().first()</span><br><span class="line">&lt;<span class="symbol">Headmaster:</span> 渔夫&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1</span><br><span class="line">&lt;<span class="symbol">Class:</span> 一班&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1.teacher</span><br><span class="line">&lt;<span class="symbol">Headmaster:</span> 渔夫&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t1.delete()</span><br><span class="line">(<span class="number">1</span>, &#123;<span class="string">'modelsapp.Headmaster'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1 = Class.objects.all().first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1</span><br><span class="line">&lt;<span class="symbol">Class:</span> 一班&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c1.teacher</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment">#这里什么都没有，因为此时C1的老师已经是个None了</span></span><br></pre></td></tr></table></figure><blockquote><p>要记得删除之后要重新获取一次数据，否则查看到的结果中还是之前获取到的有老师的班级数据</p></blockquote><h4 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h4><blockquote><p>多对多关系在模型中使用<code>ManyToManyField</code>字段定义</p><p>多对多关系可以是具有关联，也可以是没有关联，所以不需要明确指定<code>on_delete</code>属性</p></blockquote><blockquote><p>生活中，多对多关系：一个音乐家可以隶属于多个乐队，一个乐队可以有多个音乐家</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span>(<span class="title">models</span>.<span class="title">Model</span>):</span></span><br><span class="line">    artist_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.artist_name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span>(<span class="title">models</span>.<span class="title">Model</span>):</span></span><br><span class="line">    band_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    artist = models.ManyToManyField(Artist)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.band_name</span><br></pre></td></tr></table></figure><blockquote><p>创建音乐家以及乐队</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from bbs<span class="selector-class">.models</span> import Artist,Band</span><br><span class="line">&gt;&gt;&gt; A1 = Artist<span class="selector-class">.objects</span><span class="selector-class">.create</span>(artist_name=<span class="string">'Jack'</span>)</span><br><span class="line">&gt;&gt;&gt; A2 = Artist<span class="selector-class">.objects</span><span class="selector-class">.create</span>(artist_name=<span class="string">'Bob'</span>)</span><br><span class="line">&gt;&gt;&gt; B1 = Band<span class="selector-class">.objects</span><span class="selector-class">.create</span>(band_name=<span class="string">'FiveMonthDay'</span>)</span><br><span class="line">&gt;&gt;&gt; B2 = Band<span class="selector-class">.objects</span><span class="selector-class">.create</span>(band_name=<span class="string">'SHE'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>创建出两个乐队之后对其进行音乐家的添加</p><p>多对多字段添加时，可以使用<code>add</code>函数进行多值增加</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; B1<span class="selector-class">.artist</span><span class="selector-class">.add</span>(A1,A2)</span><br><span class="line">&gt;&gt;&gt; B2<span class="selector-class">.artist</span><span class="selector-class">.add</span>(A2)</span><br></pre></td></tr></table></figure><blockquote><p><code>B1</code>乐队含有<code>A1</code>,<code>A2</code>两名成员</p><p><code>B2</code>乐队含有<code>A1</code>成员</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; B1.artist.all()</span><br><span class="line"><span class="meta">[&lt;Artist: Bob&gt;, &lt;Artist: Jack&gt;]</span></span><br><span class="line">&gt;&gt;&gt; B2.artist.all()</span><br><span class="line"><span class="meta">[&lt;Artist: Jack&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在音乐家表中查找某个乐家属于哪些乐队</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Band.objects.filter(artist=A1) # 这里使用的是我们模型类来进行查找。</span><br><span class="line"><span class="meta">[&lt;Band: SHE&gt;, &lt;Band: FiveMonthDay&gt;]</span> # A1乐家属于，SHE以及FiveMonthDay</span><br><span class="line">&gt;&gt;&gt; Band.objects.filter(artist=A2)</span><br><span class="line"><span class="meta">[&lt;Band: SHE&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以查找这音乐家在哪个乐队</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; A1.band_set.all() # 直接通过具体数据对象进行查找</span><br><span class="line"><span class="meta">[&lt;Band: SHE&gt;, &lt;Band: FiveMonthDay&gt;]</span></span><br><span class="line">&gt;&gt;&gt; A2.band_set.all()</span><br><span class="line"><span class="meta">[&lt;Band: SHE&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>多对多关联字段的删除，要使用<code>remove</code>来进行关系的断开</p><p>而不是直接使用<code>delete</code>，<code>remove</code>只会断开数据之间的联系，但是不会将数据删除</p><p>现在在B1乐队中删除A1乐家</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; B1.artist.remove(A1)</span><br><span class="line">&gt;&gt;&gt; B1.artist.all()</span><br><span class="line">&lt;QuerySet <span class="meta">[&lt;Artist: Bob&gt;]</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="关联表的查询"><a href="#关联表的查询" class="headerlink" title="关联表的查询"></a>关联表的查询</h3><blockquote><p>如果想要查询的字段在关联表，则使用<code>表名小写__字段</code>来进行跨表查询操作</p></blockquote><blockquote><p>创建一个多对一关系的父子表，一个父亲可能有多个儿子</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Father(<span class="params">models</span>.Model)</span>:</span><br><span class="line">name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">age = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Son(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    father = models.<span class="constructor">ForeignKey(Father,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE)</span></span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure><blockquote><p>创建数据</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1 = Father<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Jack'</span>,age=<span class="string">'30'</span>)</span><br><span class="line">&gt;&gt;&gt; s1 = Son<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Json'</span>,father=f1)</span><br><span class="line">&gt;&gt;&gt; s2 = Son<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Json2'</span>,father=f1)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; f2 = Father<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Bob'</span>,age=<span class="string">'40'</span>)</span><br><span class="line">&gt;&gt;&gt; s3 = Son<span class="selector-class">.objects</span><span class="selector-class">.create</span>(name=<span class="string">'Json3'</span>,father=f2)</span><br></pre></td></tr></table></figure><blockquote><p>查询所有父亲名字是<code>jack</code>的孩子</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Son.objects.filter(father__name__exact='Jack')</span><br><span class="line"><span class="meta">[&lt;Son: Json&gt;, &lt;Son: Json2&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>查询所有儿子名开头为<code>J</code>的父亲</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Father.objects.filter(son__name__startswith=<span class="symbol">'J</span>')</span><br><span class="line"><span class="meta">[&lt;Father: Jack&gt;, &lt;Father: Jack&gt;, &lt;Father: Bob&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>获取到某一个父亲的所有孩子，通过某一条数据的<code>小写表名_set</code>反向查询</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1.son_set.all()</span><br><span class="line">&gt;&gt;&gt; <span class="meta">[&lt;Son: Json&gt;, &lt;Son: Json2&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="数据的反向查询"><a href="#数据的反向查询" class="headerlink" title="数据的反向查询"></a>数据的反向查询</h3><blockquote><p>默认的，当有某一条数据获取到之后，我们可以通过模型类名称加上一个 <code>_set</code>，来实现反向查询</p><p>现在设计两个表为军队和士兵表，并且士兵多对一关联军队</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Aramy(<span class="params">models</span>.Model)</span>:</span><br><span class="line">name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Soldier(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    aramy = models.<span class="constructor">ForeignKey(Aramy,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE)</span></span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">return self.name</span><br></pre></td></tr></table></figure><blockquote><p>创建一些数据</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a1 = Aramy(name=<span class="string">'一军'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a1.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s1 = Soldier(name=<span class="string">'张三'</span>,aramy=a1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s1.save()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s2 = Soldier(name=<span class="string">'李四'</span>,aramy=a1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s2.save()</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>soldier_set</code>我们就可以关联到对应的士兵表</p><p>并且对应返回结果可以执行我们常用的<code>filter</code>，<code>exclude</code>等查询操作</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a1.soldier_set.all()</span><br><span class="line"><span class="meta">[&lt;Soldier: 张三&gt;, &lt;Soldier: 李四&gt;]</span></span><br><span class="line">&gt;&gt;&gt; a1.soldier_set.filter(name='张三')</span><br><span class="line"><span class="meta">[&lt;Soldier: 张三&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过定义关联字段中的<code>related_name</code>值，来实现自定义的反向查询名字</p><p>且<code>related_name</code>的值必须唯一</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Aramy(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Soldier(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    aramy = models.<span class="constructor">ForeignKey(Aramy,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE,<span class="params">related_name</span>='<span class="params">soldier</span>')</span></span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=30)</span></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure><blockquote><p>接下来通过某条数据反向查询</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a1 = Aramy.objects.all()[<span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt; s1 = Soldier.objects.get(name='张三')</span><br><span class="line">&gt;&gt;&gt; a1.soldier.all()</span><br><span class="line"><span class="meta">[&lt;Soldier: 张三&gt;, &lt;Soldier: 李四&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>related_name</code>一定是一个唯一的值，否则反向查找时会出现二异性错误</p><p>也可以将<code>related_name</code>初始化为<code>+</code>，来取消反向查询</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/2019/10/21/Cookie%E5%92%8CSession/"/>
      <url>/2019/10/21/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><blockquote><p><code>Cookie</code>及<code>Session</code>一直以来都是Web开发中非常关键的一环，因为<code>HTTP</code>协议本身为无状态，每一次请求之间没有任何状态信息保持，往往我们的Web服务无法在客户端访问过程中得知用户的一些状态信息，比如是否登录等等；那么这里通过引入<code>Cookie</code>或者<code>Seesion</code>来解决这个问题。</p></blockquote><a id="more"></a><!-- # Cookie和Session 发表于 1990-01-06 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><blockquote><p>当客户端访问时，服务端会为客户端生成一个<code>Cookie</code>键值对数据，通过<code>Response</code>响应给到客户端。当下一次客户端继续访问相同的服务端时，浏览器客户端就会将这个<code>Cookie</code>值连带发送到服务端。</p></blockquote><blockquote><p><code>Cookie</code>值存储在浏览器下，一般在你的浏览器安装目录的<code>Cookie</code>目录下，我们也可以通过F12或者各种浏览器的开发者工具来获取到</p></blockquote><blockquote><p>因为<code>cookie</code>是保存在浏览器中的一个纯明文字符串，所以一般来说服务端在生成<code>cookie</code>值时不建议存储敏感信息比如密码</p></blockquote><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>在<code>django</code>的代码中，我们可以使用一些提供<code>Response</code>响应的类，如：<code>HttpResponse</code>，<code>redirect</code>等实例的内置<code>set_cookie</code>函数来进行<code>django</code>项目中的<code>Cookie</code>设置</p></blockquote><ul><li><p><code>set_cookie(key, value=&#39;&#39;, max_age=None, expires=None, path=&#39;/&#39;,domain=None, secure=False, httponly=False)</code></p><blockquote><p><code>key</code>：<code>Cookie</code>的<code>key</code>值，未来通过该<code>key</code>值获取到对应设置好的<code>Cookie</code>。</p><p><code>value=&#39;&#39;</code>：对应<code>Cookie</code>的<code>key</code>值的<code>value</code>，比如：<code>set_cookie(key=&#39;value&#39;,value=&#39;shuai&#39;)</code></p><p><code>max_age=None</code>：<code>Cookie</code>生效的时间，单位为秒，如果<code>Cookie</code>值只持续在客户端浏览器的会话时长，那么这个值应该为<code>None</code>。存在该值时，<code>expires</code>会被计算得到。</p><p><code>expires=None</code>：<code>Cookie</code>具体过期日期，是一个<code>datetime.datetime</code>对象，如果该值存在，那么<code>max_age</code>也会被计算得到</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> datetime</span><br><span class="line"><span class="attr">current_time</span> = datetime.datetime.now() <span class="comment"># 当前时间</span></span><br><span class="line"><span class="attr">expires_time</span> = current_time + datetime.timedelta(<span class="attr">seconds=10)</span> <span class="comment"># 向后推延十秒</span></span><br><span class="line">set_cookie('key','value',<span class="attr">expires=expires_time)</span> <span class="comment">#设置Cookie及对应超时时间</span></span><br></pre></td></tr></table></figure><blockquote><p><code>path=&#39;/&#39;</code>：指定哪些<code>url</code>可以访问到<code>Cookie</code>，默认<code>/</code>为所有。</p><p><code>domain=None</code>：当我们需要设置的为一个跨域的Cookie值，那么可以使用该参数，比如：<code>domain=&#39;.test.com&#39;</code>，那么这个<code>Cookie</code>值可以被<code>www.test.com</code>、<code>bbs.test.com</code>等主域名相同的域所读取，否则<code>Cookie</code>只被设置的它的域所读取。为<code>None</code>时，代表当前域名下全局生效。</p><p><code>secure=False</code>：<code>https</code>加密传输设置，当使用<code>https</code>协议时，需要设置该值，同样的，如果设置该值为<code>True</code>，如果不是<code>https</code>连接情况下，不会发送该<code>Cookie</code>值。</p><p><code>httponly=False</code>：<code>HTTPOnly</code>是包含在<code>HTTP</code>响应头部中<code>Set-Cookie</code>中的一个标记。为一个<code>bool</code>值，当设置为<code>True</code>时，代表阻止客户端的<code>Javascript</code>访问<code>Cookie</code>。这是一种降低客户端脚本访问受保护的<code>Cookie</code>数据风险的有效的办法</p></blockquote></li></ul><h4 id="设置COOKIE"><a href="#设置COOKIE" class="headerlink" title="设置COOKIE"></a>设置COOKIE</h4><blockquote><p>简单的实现一下<code>COOKIE</code>的设置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 在HTTPResponse部分设置COOKIE值</span></span><br><span class="line">    cookie_reponse = HttpResponse(<span class="string">'这是一个关于cookie的测试'</span>)</span><br><span class="line">    cookie_reponse.set_cookie(<span class="string">'test'</span>,<span class="string">'hello cookie'</span>)</span><br><span class="line">    <span class="keyword">return</span> cookie_reponse</span><br></pre></td></tr></table></figure><blockquote><p>以上视图函数返回一个<code>HttpResponse</code>对象，并在该对象中集成<code>COOKIE</code>值的设定，设置<code>key</code>值为<code>test</code>，<code>value</code>值为<code>hello cookie</code></p></blockquote><h4 id="获取COOKIE"><a href="#获取COOKIE" class="headerlink" title="获取COOKIE"></a>获取COOKIE</h4><blockquote><p>再来简单的实现一下<code>COOKIE</code>的获取</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 获取cookie值，从request属性中的COOKIE属性中</span></span><br><span class="line">    cookie_data = request.COOKIES.get(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Cookie值为:%s'</span> % cookie_data)</span><br></pre></td></tr></table></figure><blockquote><p><code>Cookie</code>值存储在，<code>request</code>中的<code>COOKIES</code>属性中</p><p>并且该属性获取到的结果与字典类似，直接通过内置函数<code>get</code>获取即可</p></blockquote><h4 id="删除COOKIE"><a href="#删除COOKIE" class="headerlink" title="删除COOKIE"></a>删除COOKIE</h4><blockquote><p>这里通过该视图函数路由进行COOKIE的删除</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookie</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    response = HttpResponseRedirect(<span class="string">'/check_cookie/'</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li><p><code>delete_cookie(key, path=&#39;/&#39;, domain=None)</code></p><blockquote><p>在<code>Cookie</code>中删除指定的<code>key</code>及对应的<code>value</code>，如果<code>key</code>值不存在，也不会引发任何异常。</p><p>由于<code>Cookie</code>的工作方式，<code>path</code>和<code>domain</code>应该与<code>set_cookie</code>时使用的值相同，否则<code>Cookie</code>值将不会被删除</p></blockquote></li></ul><blockquote><p>通过<code>response</code>相应类的<code>delete_cookie</code>方法，本来应该在会话结束之后才消失的<code>Cookie</code>值，现在已经被直接删除掉。后台中通过<code>Request</code>中的<code>Cookie</code>字典获取到值也为<code>None</code></p><p>不要忘记字典的get，获取不到结果时，返回<code>None</code></p></blockquote><blockquote><p>但是，现在还有一个问题，我们在用户浏览器存储的Cookei值为明文，具有极大的安全隐患，django也提供了加密的Cookie值存储及获取方式</p></blockquote><h4 id="防止篡改COOKIE"><a href="#防止篡改COOKIE" class="headerlink" title="防止篡改COOKIE"></a>防止篡改COOKIE</h4><blockquote><p>通过<code>set_signed_cookie</code>函数进行持有签名的<code>COOKIE</code>值设置，避免用户在客户端进行修改</p><p>要记得，这个函数并不是对<code>COOKIE</code>值进行加密</p></blockquote><ul><li><p><code>HttpResonse.set_signed_cookie(key, value, salt=&#39;&#39;, max_age=None, expires=None, path=&#39;/&#39;, domain=None, secure=None, httponly=True)</code></p><blockquote><p>为<code>cookie</code>值添加签名，其余参数与<code>set_cookie</code>相同</p></blockquote></li><li><p><code>Request.get_signed_cookie(key, salt=&#39;&#39;, max_age=None)</code></p><blockquote><p>从用户请求中获取通过salt盐值加了签名的<code>Cookie</code>值。</p><p>这里的<code>salt</code>要与之前存储时使用的<code>salt</code>值相同才可以解析出正确结果。</p><p>还要注意的是，如果对应的key值不存在，则会引发<code>KeyError</code>异常，所以要记得异常捕获来确定是否含有<code>Cookie</code>值</p></blockquote></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def check<span class="constructor">_salt_cookie(<span class="params">request</span>)</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        salt_cookie = request.get<span class="constructor">_signed_cookie(<span class="params">key</span>='<span class="params">salt_cookie</span>',<span class="params">salt</span>='<span class="params">nice</span>')</span></span><br><span class="line">    except KeyError: #获取不到该key值的Cookie</span><br><span class="line">        response = <span class="constructor">HttpResponse('正在设置一个<span class="params">salt</span> Cookie值')</span></span><br><span class="line">        response.set<span class="constructor">_signed_cookie(<span class="params">key</span>='<span class="params">salt_cookie</span>',<span class="params">salt</span>='<span class="params">nice</span>',<span class="params">value</span>='<span class="params">salt_cookie</span>')</span></span><br><span class="line">        return response</span><br><span class="line">    <span class="keyword">else</span>: #获取到了对应key值，展示到新的HttpResonse中</span><br><span class="line">        return <span class="constructor">HttpResponse('获取到的<span class="params">salt</span> Cookie值:%<span class="params">s</span>' % <span class="params">salt_cookie</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>第一次访问的时候，还没有加<code>Cookie</code>值，所以我们在获取的时候会抛出<code>KeyError</code>异常</p><p>此时捕获异常，并且设置<code>Cookie</code>即可；</p><p>再次刷新的时候，因为这里已经给出了<code>Cookie</code>值，则不会引发异常，会在页面中展示获取到的加盐<code>Cookie</code></p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><blockquote><p>虽然说有了<code>Cookie</code>之后，我们把一些信息保存在客户端浏览器中，可以保持用户在访问站点时的状态，但是也存在一定的安全隐患，<code>Cookie</code>值被曝露，<code>Cookie</code>值被他人篡改，等等。我们将换一种更健全的方式，也就是接下来要说的<code>Session</code>。</p><p><code>Session</code>在网络中，又称会话控制，简称会话。用以存储用户访问站点时所需的信息及配置属性。当用户在我们的<code>Web</code>服务中跳转时，存储在<code>Session</code>中的数据不会丢失，可以一直在整个会话过程中存活。</p><p>在<code>django</code>中，默认的<code>Session</code>存储在数据库中<code>session</code>表里。默认有效期为<strong>两个星期</strong>。</p></blockquote><h4 id="session创建流程"><a href="#session创建流程" class="headerlink" title="session创建流程"></a><strong>session创建流程</strong></h4><ol><li>客户端访问服务端，服务端为每一个客户端返回一个唯一的<code>sessionid</code>，比如<code>xxx</code>。</li><li>客户端需要保持某些状态，比如维持登陆。那么服务端会构造一个<code>{sessionid: xxx }</code>类似这样的字典数据加到<code>Cookie</code>中发送给用户。注意此时，只是一个随机字符串，返回给客户端的内容并不会像之前一样包含实际数据。</li><li>服务端在后台把返回给客户端的<code>xxx</code>字符串作为<code>key</code>值，对应需要保存的服务端数据为一个新的字典，存储在服务器上，例如：<code>{xxx : {id:1}}</code></li></ol><blockquote><p>之后的一些客户端数据获取，都是通过获取客户端向服务端发起的<code>HttpRequest</code>请求中里<code>Cookie</code>中的<code>sessionid</code>之后，再用该<code>sessionid</code>从服务端的<code>Session</code>数据中调取该客户端存储的<code>Session</code>数据</p></blockquote><blockquote><p><strong>注意</strong>：补充说明，默认存储在数据库的<code>Session</code>数据，是通过<code>base64</code> 编码的，我们可以通过<code>Python</code>的<code>base64</code>模块下的<code>b64decode()</code>解码得到原始数据</p></blockquote><blockquote><p>整个过程结束之后：客户端浏览器存储的其实也只是一个<strong>识别会话</strong>的随机字符串<code>（xxx）</code></p><p>而服务器中是通过这个随机的字符串<code>（xxx:value）</code>进行真正的存储</p></blockquote><blockquote><p><code>Session</code>的使用必须在<code>Settings</code>配置下</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line"><span class="params">...</span></span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="params">...</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line"><span class="params">...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>当<code>settings.py</code>中<code>SessionMiddleware</code>激活后</p><p>在视图函数的参数<code>request</code>接收到的客户端发来的<code>HttpResquest</code>请求对象中都会含有一个<code>session</code>属性</p><p>这个属性和之前所讨论的<code>Cookie</code>类似，是一个类字典对象，首先支持如下常用字典内置属性</p></blockquote><h4 id="获取Session"><a href="#获取Session" class="headerlink" title="获取Session"></a>获取Session</h4><ul><li><p><code>session_data = request.session.get(Key)</code></p></li><li><p><code>session_data = request.session[Key]</code></p><blockquote><p>在<code>Session</code>中获取对应值，<code>get</code>方法获取时，如不存在该<code>Key</code>值，不会引发异常，返回<code>None</code></p><p>而第二种直接通过字典获取，如<code>Key</code>值不存在，引发<code>KeyErro</code></p></blockquote></li></ul><h4 id="删除Session"><a href="#删除Session" class="headerlink" title="删除Session"></a>删除Session</h4><ul><li><code>del request.seesion[Key]</code></li></ul><blockquote><p>删除对应session，<code>Key</code>值不存在时，引发<code>KeyError</code></p></blockquote><ul><li><code>request.session.clear()</code></li></ul><blockquote><p>清空<code>Session</code>中的所有数据。这里客户端还会保留<code>sessionid</code></p><p>只不过在服务端<code>sessionid</code>对应的数据没有了。</p></blockquote><ul><li><code>request.session.flush()</code></li></ul><blockquote><p>直接删除当前客户端的的<code>Seesion</code>数据。这里不光服务端<code>sessionid</code>对应的数据没有了，客户端的<code>sessionid</code>也会被删除</p></blockquote><h4 id="设置有效期"><a href="#设置有效期" class="headerlink" title="设置有效期"></a>设置有效期</h4><ul><li><p><code>request.session.set_expiry(value)</code>：</p><blockquote><p>设置<code>Session</code>的有效时间。</p></blockquote><blockquote><p><code>value</code>：有效时间。</p><p><strong>为整数时</strong>：将在<code>value</code>为秒单位之后过期</p><p><strong>为0时</strong>：将在用户关闭浏览器之后过期。</p><p><strong>为None时</strong>：使用全局过期的设置，默认为两个星期，<code>14</code>天。</p><p><strong>为datetime时</strong>：在这个指定时间后过期。</p></blockquote></li><li><p><code>request.session.get_expiry_age()</code></p><blockquote><p>返回距离过期还剩下的秒数。</p></blockquote></li><li><p><code>request.session.clear_expired()</code></p><blockquote><p>清除过期的<code>Session</code>会话。</p></blockquote></li></ul><blockquote><p>编写一个简单的视图函数来玩耍<code>Session</code>吧</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">'test_id'</span>):</span><br><span class="line">        session_data = request.session.get(<span class="string">'test_id'</span>)<span class="comment"># 用户拿到的的session随机字符串</span></span><br><span class="line">        session_key = request.session.session_key <span class="comment"># 获取客户端浏览器中的SessionID值</span></span><br><span class="line">        session_expire = request.session.get_expiry_age()</span><br><span class="line">        now = datetime.datetime.now()</span><br><span class="line">        expire_time = now + datetime.timedelta(seconds=session_expire)</span><br><span class="line">        response = <span class="string">'&lt;div&gt;SessionID : %s&lt;/div&gt;'</span> % session_key + \</span><br><span class="line">                   <span class="string">'&lt;div&gt;Session : %s&lt;/div&gt;'</span> % session_data + \</span><br><span class="line">                   <span class="string">'&lt;div&gt;ExpireTime : %s&lt;/div&gt;'</span> % expire_time</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(response)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.session[<span class="string">'test_id'</span>] = <span class="string">'TEST'</span></span><br><span class="line">        request.session.set_expiry(<span class="literal">None</span>)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'已设置好Session'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>用户在第一次访问时，会走<code>else</code>分支，此时还没有任何服务端的<code>Session</code>及客户端的<code>Cookie</code>值设定</p><p>那么我们会通过<code>request.session[Key]</code>的方式来设置一个<code>Session</code>值，值为<code>TEST</code></p><p>当用户第二次访问时将展示出所设置好的Session值及在客户端浏览器中存储的sessionid</p></blockquote><blockquote><p>在编写一个删除<code>Session</code>的视图函数吧</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_session</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">'test_id'</span>):</span><br><span class="line">        <span class="keyword">del</span> request.session[<span class="string">'test_id'</span>]</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'Session被删了'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'目前没有任何需要删除的session'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里温柔的使用<code>del request.session[Key]</code>的方式来进行<code>Session</code>的删除</p><p>如果存在对应<code>test_id</code>的<code>Session</code>值则删除，反之返回一个字符串</p></blockquote><h4 id="Session删除总结"><a href="#Session删除总结" class="headerlink" title="Session删除总结"></a>Session删除总结</h4><blockquote><p>使用的是<code>del</code>的针对性删除方式，这样不会将整个客户端的<code>session</code>删除掉</p><p>使用<code>request.session.clear()</code>，只是清空了服务端<code>Session</code>中的数据，但是客户端的<code>Cookie</code>中还会保存<code>sessionid</code>，只不过这个值对应的字符串所对应的用户数据是一个空</p><p>使用<code>request.session.flush()</code>，那么客户端<code>Cookie</code>中保存的<code>sessionid</code>首先会被删除，其次服务端通过<code>sessionid</code>值保存的用户数据也会被全部删除。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的消息框架(message)与Django分页组件(paginator)</title>
      <link href="/2019/10/21/Django%E7%9A%84%E6%B6%88%E6%81%AF%E6%A1%86%E6%9E%B6(message)%E4%B8%8EDjango%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6(paginator)/"/>
      <url>/2019/10/21/Django%E7%9A%84%E6%B6%88%E6%81%AF%E6%A1%86%E6%9E%B6(message)%E4%B8%8EDjango%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6(paginator)/</url>
      
        <content type="html"><![CDATA[<h2 id="Messages消息框架"><a href="#Messages消息框架" class="headerlink" title="Messages消息框架"></a>Messages消息框架</h2><blockquote><p>在网页应用中，你经常需要在处理完表单或其它类型的用户输入后。显示一个通知消息（也叫做<code>flash message</code>给用户</p><p>对于这个功能，<code>Django</code>提供基于<code>Cookie</code> 和会话的消息，无论是匿名用户还是认证的用户。</p><p>其消息框架允许你临时将消息存储在请求中，并在接下来的请求（通常就是下一个请求）中提取它们并显示。每个消息都带有一个特定<code>level</code> 标签，表示其优先级（例如<code>info</code>、<code>warning</code> 或<code>error</code>）</p></blockquote><a id="more"></a><!-- # Django的消息框架(message)与Django分页组件(paginator) 发表于 1990-01-07 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><blockquote><p><code>django-admin startproject</code> 创建的默认<code>settings.py</code> 已经包含启用消息框架功能需要的所有的设置</p></blockquote><blockquote><ul><li><code>INSTALLED_APPS</code> 中的<code>&#39;django.contrib.messages&#39;</code>。</li><li><code>MIDDLEWARE_CLASSES</code> 中的<code>&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</code> 和<code>&#39;django.contrib.messages.middleware.MessageMiddleware&#39;</code></li></ul><p>默认的后端存储 依赖<code>[sessions]</code></p><p>所以<code>MIDDLEWARE_CLASSES</code> 中必须启用<code>SessionMiddleware</code> 并出现在<code>MessageMiddleware</code> 之前</p><ul><li><code>TEMPLATES</code> 设置中定义的<code>DjangoTemplates</code> 的<code>&#39;context_processors&#39;</code> 选项包含<code>&#39;django.contrib.messages.context_processors.messages&#39;</code></li></ul></blockquote><h3 id="消息级别"><a href="#消息级别" class="headerlink" title="消息级别"></a>消息级别</h3><blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>messages.debug</code></li><li><code>messages.info</code></li><li><code>messages.success</code></li><li><code>messages.warning</code></li><li><code>messages.error</code></li></ul><h3 id="使用消息框架"><a href="#使用消息框架" class="headerlink" title="使用消息框架"></a>使用消息框架</h3><blockquote><p>视图函数只需要创建<code>messages</code>消息对象即可</p></blockquote><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">messages.<span class="keyword">warning</span>(request,<span class="string">'登陆失败，用户名或密码无效'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">render</span>(request,<span class="string">'login.html'</span>,locals())</span><br></pre></td></tr></table></figure><blockquote><p>前端模板中判断是否含有<code>messages</code>消息，遍历取出即可</p><p>也可以结合<code>bootstrap</code>框架让提示消息变得更加美丽</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> messages %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> message <span class="keyword">in</span> messages %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-</span></span></span><span class="template-variable">&#123;&#123; message.tags &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> fade in"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>messages</code>对象是一个数据集，并不是单独的一条消息，需要我们在使用时，必须通过<code>for</code>循环进行访问</p></blockquote><h2 id="Paginator分页组件"><a href="#Paginator分页组件" class="headerlink" title="Paginator分页组件"></a>Paginator分页组件</h2><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; from django<span class="selector-class">.core</span><span class="selector-class">.paginator</span> import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Paginator</span></span><br></pre></td></tr></table></figure><p>：创建分页对象</p><h3 id="分页对象内置属性"><a href="#分页对象内置属性" class="headerlink" title="分页对象内置属性"></a>分页对象内置属性</h3></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">all_ = models.objects.all()</span><br><span class="line">p = Paginator(all_, 10)</span><br><span class="line"><span class="comment"># 分页all_数据，每页显示10条数据</span></span><br><span class="line">p.count <span class="comment"># 总数据量</span></span><br><span class="line">p.num_pages() <span class="comment"># 分页数</span></span><br><span class="line">p.page_range() <span class="comment"># 列表形式返回当前可有的页数 [1,2,3]</span></span><br><span class="line">page_1 = p.page(1) <span class="comment"># 选择第一页，返回第一页数据对象</span></span><br><span class="line">page_1.object_list <span class="comment"># 返回第一页所有数据</span></span><br><span class="line">for var in page_1:</span><br><span class="line">    print(var)</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="某一页内置属性"><a href="#某一页内置属性" class="headerlink" title="某一页内置属性"></a>某一页内置属性</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">page_1.<span class="built_in">number</span> <span class="comment"># 当前页的页码</span></span><br><span class="line">page_1.has_next() <span class="comment"># 是否有下一页</span></span><br><span class="line">page_1.has_previous() <span class="comment"># 是否有上一页</span></span><br><span class="line">page_1.has_other_pages() <span class="comment"># 是否含有其他页</span></span><br><span class="line">page_1.next_page_number() <span class="comment"># 下一页的页码</span></span><br><span class="line">page_1.previous_page_number() <span class="comment"># 上一页的页码</span></span><br><span class="line">page_1.start_index() <span class="comment"># 该页第一个数据的索引</span></span><br><span class="line">page_1.end_index() <span class="comment"># 该页最后一个数据的索引</span></span><br></pre></td></tr></table></figure><ul><li><p><code>EmptyPage</code>：取不到页面数据，抛出该异常</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">all_ = models.objects.all()</span><br><span class="line">p = Paginator(all_, 10)</span><br><span class="line"><span class="section">try:</span></span><br><span class="line">    list_ = p.page(page_num)</span><br><span class="line">except EmptyPage:</span><br><span class="line"><span class="comment">#没有第page_num页</span></span><br><span class="line">    list_ = paginator.page(1) <span class="comment"># 取不到该也数据，直接返回第一页数据</span></span><br></pre></td></tr></table></figure></li><li><p><code>PageNotAnInteger</code>：当页数是一个非整数类型时，抛出该异常</p></li></ul><h3 id="模板页面基本使用方式"><a href="#模板页面基本使用方式" class="headerlink" title="模板页面基本使用方式"></a>模板页面基本使用方式</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> topic_list.has_previous %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 当前页是否含有上一页 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page=</span></span></span><span class="template-variable">&#123;&#123; list_.previous_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 连接传参形式传递上一页的页码ID --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> topic_list.has_next %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 当前页是否含有下一页 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page=</span></span></span><span class="template-variable">&#123;&#123; list_.next_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 连接传参形式传递下一页的页码ID --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Forms-表单层</title>
      <link href="/2019/10/21/Django-Forms-%E8%A1%A8%E5%8D%95%E5%B1%82/"/>
      <url>/2019/10/21/Django-Forms-%E8%A1%A8%E5%8D%95%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><blockquote><p><code>django</code>提供了一整套健全的机制来帮助我们自动创建对应<code>HTML</code>中的表单，类似序列化器</p></blockquote><blockquote><p>开发者可以方便的使用已经设定好的一系列字段进行表单的设计</p><p>可以在某个<code>app</code>下面新建一个<code>forms.py</code>文件，在这个文件编写<code>django</code>自带表单类的编写</p><p>比如像下面这样</p></blockquote><a id="more"></a><!-- # Django-Forms-表单层 发表于 1990-01-08 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">TestForm</span>(<span class="title">forms</span>.<span class="type">Form</span>):</span></span><br><span class="line"><span class="class">name = forms.<span class="type">CharField</span>(<span class="title">label</span>='名字:',<span class="title">max_length</span>=100)</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个表单类中，设置了一个<code>CharField</code>字段，并且具有<code>label</code>标签值为<code>name</code></p><p>此外在<code>&lt;input&gt;</code>标签处还会设置<code>maxlength=100</code>的属性</p><p><code>django</code>在接收到这样表单内的数据时，还将验证数据的长度</p><p>实例化该类，然后打印出来查看效果</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;&lt;th&gt;&lt;label <span class="keyword">for</span>=<span class="string">"id_name"</span>&gt;名字<span class="symbol">:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input</span> type=<span class="string">"text"</span> name=<span class="string">"name"</span> maxlength=<span class="string">"100"</span> required id=<span class="string">"id_name"</span> /&gt;&lt;<span class="regexp">/td&gt;&lt;/tr</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在渲染后的结果中不包含提交的按钮，以及外层的form标签，还需要我们自己手动在模板页面中进行添加</p></blockquote><blockquote><p><code>form</code>表单实例的使用也非常简单，直接在模板页面处将表单实例以模板变量形式传递赋值即可</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># views.py</span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">    form = forms.TestForm()</span></span><br><span class="line"><span class="xml">    return render(request,'index.html',locals())</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- index.html --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; form &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="is-valid"><a href="#is-valid" class="headerlink" title="is_valid"></a>is_valid</h3><blockquote><p>每一个<code>form</code>类的实例都具有一个<code>is_valid()</code>方法，验证表单内的字段是否合法，并将表单中合法的的数据将放到表单中的<code>cleaned_data</code>属性中</p><p>如果全部数据都没有问题，那么该函数将会返回<code>True</code>，返回的合法数据。结果是一个字典的数据类型</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">form</span> = TestFrom()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">form</span>.is_valid():</span><br><span class="line">data = <span class="keyword">form</span>.cleaned_data</span><br><span class="line">def post_test(request):</span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line"><span class="keyword">form</span> = TestForm(request.<span class="keyword">POST</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">form</span>.is_valid():</span><br><span class="line">            name = <span class="keyword">form</span>.cleaned_data.<span class="built_in">get</span>('name')</span><br><span class="line"><span class="keyword">return</span> HttpResponse('OK')</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">form</span> = TestForm()</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">"xxx.html"</span>,&#123;<span class="string">"form"</span>:<span class="keyword">form</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在视图函数中，当用户以post形式提交数据，此时将post数据与表单类进行关联</p><p>使用<code>post</code>数据做为类实例化的参数，这种操作也叫作<strong>绑定数据到表单</strong></p><p>如果用户在表单中填写张三并提交，那么绑定数据之后的表单实例像是这样</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="attribute">for</span>=<span class="string">"id_name"</span>&gt;名字:&lt;/label&gt;</span><br><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"id_name"</span> <span class="attribute">maxlength</span>=<span class="string">"100"</span> <span class="attribute">name</span>=<span class="string">"name"</span> <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">value</span>=<span class="string">"张三"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>input</code>标签中的<code>value</code>值为用户<code>post</code>所提交的数据</p><p>如果绑定数据的表单实例经过<code>is_valid</code>函数校验并通过，那么正确的数据将存储在<code>cleaned_data</code>中，<code>cleaned_data</code>中的数据同时也是处理好的<code>Python</code>数据类型，比如这里为一个字典数据类型</p><p>接下来在视图函数中可以直接通过字典的操作方式来获取到用户在对应表单标签中所填写的数据</p></blockquote><h3 id="表单字段类型"><a href="#表单字段类型" class="headerlink" title="表单字段类型"></a>表单字段类型</h3><blockquote><p>所有表单字段<code>Field</code>的子类均带有默认参数<code>require</code></p></blockquote><h4 id="BooleanField"><a href="#BooleanField" class="headerlink" title="BooleanField"></a>BooleanField</h4><blockquote><p>控件：<code>CheckboxInput</code></p><p>复选框：<code>&lt;input type=&#39;checkbox&#39; ...&gt;</code></p></blockquote><blockquote><p>空值：<code>False</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Python`：`True\<span class="literal">False</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>错误键</strong>：<code>required</code></p></blockquote><h4 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a>CharField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：空字符串</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Python`：`str</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>错误键</strong>：<code>max_length</code>、<code>min_length</code>、<code>required</code></p></blockquote><h4 id="ChoiceField"><a href="#ChoiceField" class="headerlink" title="ChoiceField"></a>ChoiceField</h4><blockquote><p>控件：<code>Select</code></p><p>选择框：<code>&lt;select&gt;&lt;option ...&gt;...&lt;/select&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode str</code></p><p>必选参数：<code>choices</code>，该参数为一个二元组组成的可迭代对象，二元组中的第一个值为获取到的数据，第二个值为表单中展示的内容。</p><p><strong>错误键</strong>：<code>required</code>、<code>invalid_choice</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    choices = (</span><br><span class="line">        (<span class="string">'0'</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="string">'1'</span>,<span class="string">'女'</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = forms.ChoiceField(choices=choices)</span><br></pre></td></tr></table></figure><h4 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a>DateField</h4><blockquote><p>控件：<code>DateInput</code></p><p>日期以普通的文本框输入：<code>&lt;input type=&#39;text&#39; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>datetime.date</code></p><p>验证是否为一个指定日期格式的字符串</p><p><strong>错误键</strong>：<code>required</code>、<code>invalid</code></p><p>可选参数：<code>input_formats</code>，一个时间格式化字符串，用来将表单中的数据转换为<code>datetime.date</code>对象</p><p>可选参数格式参考如下：</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'%Y-%m-%d'</span>,<span class="attr"># '2006</span><span class="number">-10</span><span class="number">-25</span><span class="string">'</span></span><br><span class="line"><span class="string">'</span><span class="meta">%</span>m/<span class="meta">%</span>d/<span class="meta">%</span>Y<span class="string">', # '</span><span class="number">10</span>/<span class="number">25</span>/<span class="number">2006</span><span class="string">'</span></span><br><span class="line"><span class="string">'</span><span class="meta">%</span>m/<span class="meta">%</span>d/<span class="meta">%</span>y<span class="string">' # '</span><span class="number">10</span>/<span class="number">25</span>/<span class="number">06</span><span class="string">'</span></span><br></pre></td></tr></table></figure><h4 id="DateTimeField"><a href="#DateTimeField" class="headerlink" title="DateTimeField"></a>DateTimeField</h4><blockquote><p>控件：<code>DateTimeInput</code></p><p>日期/时间以普通的文本框输入：&lt;input type=’text’ …&gt;</p><p>空值：None</p><p>Python：<code>datetime.datetime</code></p><p>验证是否为一个指定日期格式的字符串</p><p>可选参数：<code>input_formats</code>，一个时间格式化字符串，用来将表单中的数据转换为<code>datetime.datetime</code>对象</p><p><strong>错误键</strong>：<code>required</code>、<code>invalid</code></p></blockquote><h4 id="DecimalField"><a href="#DecimalField" class="headerlink" title="DecimalField"></a>DecimalField</h4><blockquote><p>控件：当<code>Field.localize</code> 是<code>False</code> 时为<code>NumberInput</code>，否则为<code>TextInput</code></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; NumberInput<span class="string">`文本输入：`</span>&lt;input <span class="keyword">type</span>=<span class="string">"number"</span> <span class="params">...</span>&gt;</span><br><span class="line">&gt; TextInput<span class="string">`文本输入：`</span>&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> <span class="params">...</span>&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>空值：<code>None</code></p><p>Python：<code>decimal</code></p><p>验证给定值是否为一个十进制数字</p><p>可选参数：<code>max_value</code>、<code>min_value</code>控制大小值范围</p><p> <code>max_digits</code>：值允许的最大位数（小数点之前和之后的数字总共的位数，前导的零将被删除）</p><p> <code>decimal_places</code>：允许的最大小数位</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code>， <code>max_value</code>， <code>min_value</code>， <code>max_digits</code>， <code>max_decimal_places</code> max_whole_digits</p></blockquote><h4 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField"></a>EmailField</h4><blockquote><p>控件：文本输入：<code>&lt;input type=&quot;email&quot; ...&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode str</code></p><p>使用正则验证给定的值是否为一个合法的邮件地址</p><p>可选参数：<code>max_length</code>与<code>min_length</code>，限定邮件地址字符串大小长度。</p><p><strong>错误键</strong>：<code>required</code>、<code>invalid</code></p></blockquote><h4 id="FileField"><a href="#FileField" class="headerlink" title="FileField"></a>FileField</h4><blockquote><p>控件：<code>ClearableFileInput</code></p><p>文件上传输入：<code>&lt;input type=&#39;file&#39; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>UploadedFile</code></p><p>验证非空的文件数据绑定到表单</p><p>使用该字段时，在使用表单实例获取上传文件数据时，表单标签中需要具备<code>enctype=&quot;multipart/form-data&quot;</code>属性，此外还需要绑定文件数据在表单上</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> = TestForm(request<span class="selector-class">.POST</span>,request.FILES)</span><br></pre></td></tr></table></figure><h4 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField"></a>FloatField</h4><blockquote><p>控件：当<code>Field.localize</code>是<code>False</code> 时为<code>NumberInput</code>，否则为<code>TextInput</code></p><p> <code>NumberInput</code>文本输入：<code>&lt;input type=&quot;number&quot; ...&gt;</code></p><p> <code>TextInput</code>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>Float</code></p><p>验证给出的值是一个浮点数，对比<code>float</code>函数</p><p>可选参数：<code>max_value</code>、<code>min_value</code>限定大小值范围</p><p><strong>错误键</strong>：<code>required</code>， <code>invalid</code>， <code>max_value</code>，<code>min_value</code></p></blockquote><h4 id="ImageField"><a href="#ImageField" class="headerlink" title="ImageField"></a>ImageField</h4><blockquote><p>控件：<code>ClearableFileInput</code></p><p>文件上传输入：<code>&lt;input type=&#39;file&#39; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>UploadedFile</code></p><p>验证文件数据并且检验是否是一个可以被pillow所解释的图像</p><p>使用该字段，需要安装<code>pillow</code>模块。</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code>，<code>missing</code>，<code>empty</code>，<code>invalid_image</code></p></blockquote><h4 id="IntergerField"><a href="#IntergerField" class="headerlink" title="IntergerField"></a>IntergerField</h4><blockquote><p>控件：当<code>Field.localize</code> 是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code></p><p> <code>NumberInput</code>文本输入：<code>&lt;input type=&quot;number&quot; ...&gt;</code></p><p> <code>TextInput</code>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>int</code></p><p>验证给定的值是否是一个整数</p><p>可选参数：<code>max_value</code>、<code>min_value</code>限定大小值范围</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code>，<code>max_value</code>，<code>min_value</code></p></blockquote><h4 id="GenericIPAddressField"><a href="#GenericIPAddressField" class="headerlink" title="GenericIPAddressField"></a>GenericIPAddressField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode str</code></p><p>可选参数</p><p> <code>protocol</code>：默认值为<code>both</code>，可选<code>IPv4</code>或<code>IPv6</code>。</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code></p></blockquote><h4 id="MultipleChoiceField"><a href="#MultipleChoiceField" class="headerlink" title="MultipleChoiceField"></a>MultipleChoiceField</h4><blockquote><p>控件：<code>SelectMultiple</code></p><p> <code>&lt;select multiple=&#39;multiple&#39;&gt;...&lt;/select&gt;</code></p><p>空值：一个空列表</p><p>Python：<code>list</code></p><p>验证表单中的值是否存在于选择列表中，对比<code>ChoiceField</code>，该字段支持多选</p><p>必选参数：<code>choices</code>，与<code>ChoiceField</code>类似，接收一个二元组可迭代对象</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid_choice</code>，<code>invalid_list</code></p></blockquote><h4 id="RegexField"><a href="#RegexField" class="headerlink" title="RegexField"></a>RegexField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode str</code></p><p>验证表单中值与某个正则表达式匹配</p><p>必选参数：<code>regex</code>，字符串或编译的正则表达式</p><p>可选参数：<code>max_length</code>、<code>min_length</code></p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code></p></blockquote><h4 id="SlugField"><a href="#SlugField" class="headerlink" title="SlugField"></a>SlugField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode</code>对象</p><p>验证给定的值为<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong>及<strong>连字符</strong>组成</p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code></p></blockquote><h4 id="URLField"><a href="#URLField" class="headerlink" title="URLField"></a>URLField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：空字符串</p><p>Python：<code>Unicode</code>对象</p><p>验证给定值是一个有效的<code>URL</code></p><p>可选参数：<code>max_length</code>、<code>min_length</code></p><p><strong>错误键</strong>：<code>required</code>，<code>invalid</code></p></blockquote><h4 id="TimeField"><a href="#TimeField" class="headerlink" title="TimeField"></a>TimeField</h4><blockquote><p>控件：<code>TextInput</code></p><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p><p>空值：<code>None</code></p><p>Python：<code>datetime.time</code></p><p>验证给定值是否为一个给定格式的时间字符串</p><p>可选参数：<code>input_formats</code>，控制表单输入的格式</p></blockquote><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul><li><p><code>required</code>：</p><blockquote><p>表单字段为必填值，当传递数据为一个空值，不管是空字符串还是<code>None</code></p><p>在表单验证时，将引发<code>ValidationError</code>异常，这个异常将会在表单上展示错误信息</p></blockquote></li><li><p><code>label</code></p><blockquote><p>指定当前字段的<code>label</code>标签值，字段默认<code>Label</code>为字段名所有下换线转换为空格</p><p>且一个字母大写生成</p></blockquote></li><li><p><code>label_suffix</code></p><blockquote><p>修改label提示字符串的追加符号，默认表单类实例化过程会自动在<code>label</code>属性后加<code>:</code></p></blockquote></li><li><p><code>initial</code></p><blockquote><p>字段的初始值。不能将初始值直接作为参数传入，会造成直接验证表单数据而报错。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span> = forms.TestForm(<span class="attribute">initial</span>=&#123;<span class="string">'name'</span>:<span class="string">'Bob'</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>widget</code></p><blockquote><p>表单字段渲染时使用的<code>Widget</code>类，如果不想使用默认的表单类型，通过该参数指明所需表单控件</p><p>可以使用类似的表单类型，在下面会有详细的介绍。</p></blockquote></li><li><p><code>help_text</code></p><blockquote><p>指定字段的描述文本，该文本一般会紧挨着字段显示</p></blockquote></li></ul><h3 id="表单控件：widget"><a href="#表单控件：widget" class="headerlink" title="表单控件：widget"></a>表单控件：widget</h3><blockquote><p>默认<code>django</code>会为每一个表单字段设置默认的<code>HTML</code>控件</p><p>控件用来渲染<code>HTML</code>中输入元素与提取提交的原始数据</p><p>如果你希望使用一个不同的控件<code>Widget</code>，可以为字段设置<code>widget</code>参数</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">CommentForm</span>(<span class="title">forms</span>.<span class="type">Form</span>):</span></span><br><span class="line"><span class="class">comment = forms.<span class="type">CharField</span>(<span class="title">widget</span>=<span class="title">forms</span>.<span class="type">Textarea</span>)</span></span><br><span class="line"><span class="class">#修改<span class="type">CharField</span>默认控件<span class="type">TextInput</span>为<span class="type">Textarea</span></span></span><br></pre></td></tr></table></figure><blockquote><p>此外，我们还可以为字段的<code>Widget</code>设置额外的属性</p><p>比如一些之后在<code>HTML</code>渲染时候将会使用到的标签<code>class</code>值等等</p><p>只需要在<code>widget</code>参数部分使用<code>attrs</code>形参指定即可，该参数设置这个字段控件的对应<code>HTML</code>属性</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">name</span> = forms.CharField(</span><br><span class="line">    max_length=5,</span><br><span class="line">    widget=forms.TextInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'green'</span>&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>还可以使用日期控件覆盖默认日期控件</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">YEARS = ('<span class="number">2016</span>', '<span class="number">2017</span>', '<span class="number">2018</span>')</span><br><span class="line">MONTHS = &#123;</span><br><span class="line"><span class="number">1</span>:'一月', <span class="number">2</span>:'二月', <span class="number">3</span>:'三月', <span class="number">4</span>:'四月',</span><br><span class="line"><span class="number">5</span>:'五月', <span class="number">6</span>:'六月', <span class="number">7</span>:'七月', <span class="number">8</span>:'八月',</span><br><span class="line"><span class="number">9</span>:'九月', <span class="number">10</span>:'十月', <span class="number">11</span>:'十一月', <span class="number">12</span>:'十二月'</span><br><span class="line">&#125;</span><br><span class="line">birth_year = forms.DateField(widget=froms.SelectDateWidget(years=YEARS,months=MONTHS))</span><br></pre></td></tr></table></figure><h4 id="文本输入控件"><a href="#文本输入控件" class="headerlink" title="文本输入控件"></a>文本输入控件</h4><ul><li><p><code>TextInput</code></p><blockquote><p>文本输入：<code>&lt;input type=&quot;text&quot; ...&gt;</code></p></blockquote></li><li><p><code>NumberInput</code></p><blockquote><p>文本输入：<code>&lt;input type=&quot;number&quot; ...&gt;</code></p></blockquote></li><li><p><code>EmailInput</code></p><blockquote><p>文本输入：<code>&lt;input type=&quot;email&quot; ...&gt;</code></p></blockquote></li><li><p><code>URLInput</code></p><blockquote><p>文本输入：<code>&lt;input type=&quot;url&quot; ...&gt;</code></p></blockquote></li><li><p><code>PasswordInput</code></p><blockquote><p>密码输入：<code>&lt;input type=&#39;password&#39; ...&gt;</code></p></blockquote></li><li><p><code>HiddenInput</code></p><blockquote><p>隐藏输入：<code>&lt;input type=&#39;hidden&#39; ...&gt;</code></p></blockquote></li><li><p><code>DateInput</code></p><blockquote><p>日期以普通的文本框输入：<code>&lt;input type=&#39;text&#39; ...&gt;</code></p><p>可选参数：<code>format</code>，时间的字符串格式</p></blockquote></li><li><p><code>DateTimeInput</code></p><blockquote><p>日期/时间以普通的文本框输入：<code>&lt;input type=&#39;text&#39; ...&gt;</code></p><p>可选参数：<code>format</code>，时间的字符串格式</p></blockquote></li><li><p><code>TimeInput</code></p><blockquote><p>时间以普通的文本框输入：<code>&lt;input type=&#39;text&#39; ...&gt;</code></p><p>可选参数：<code>format</code>，时间的字符串格式</p></blockquote></li><li><p><code>Textarea</code></p><blockquote><p>文本区域：<code>&lt;textarea&gt;...&lt;/textarea&gt;</code></p></blockquote></li></ul><h4 id="选择和复选框"><a href="#选择和复选框" class="headerlink" title="选择和复选框"></a>选择和复选框</h4><ul><li><p><code>CheckboxInput</code></p><blockquote><p>复选框：<code>&lt;input type=&#39;checkbox&#39; ...&gt;</code></p><p>可选参数：<code>check_test</code></p><p>这个参数接收一个<strong>函数对象</strong>，函数对象的参数为当前<code>CheckboxInput</code>的值，函数对象如果返回<code>True</code>，该控件在字段渲染时自动勾上。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comment = forms.<span class="constructor">CharField(<span class="params">widget</span>=<span class="params">forms</span>.CheckboxInput(<span class="params">check_test</span>=<span class="params">lambda</span> <span class="operator">*</span><span class="params">arg</span>: True)</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>Select</code></p><blockquote><p>单选框：<code>&lt;select&gt;&lt;option ...&gt;...&lt;/select&gt;</code></p><p>可选参数：<code>choices</code>，与字段设置相同，但是会被字段设置所覆盖。</p></blockquote></li><li><p><code>NullBooleanSelect</code></p><blockquote><p>单选框：选项为<code>Unknown</code>、<code>Yes</code>和<code>No</code>，<code>Unknown</code>也代表<code>False</code>。</p></blockquote></li><li><p><code>SelectMultiple</code></p><blockquote><p>多选框：<code>&lt;select multiple=&#39;multiple&#39;&gt;...&lt;/select&gt;</code></p></blockquote></li><li><p><code>RadioSelect</code></p><blockquote><p>单选框，与<code>select</code>类似，但是会将选择渲染为一个<strong>单选按钮列表</strong></p></blockquote></li><li><p><code>CheckboxSelectMultiple</code></p><blockquote><p>多选框：与<code>SelectMultiple</code>类似，但是会渲染为一个<strong>复选框列表</strong>/</p></blockquote></li></ul><h4 id="复合控件"><a href="#复合控件" class="headerlink" title="复合控件"></a>复合控件</h4><ul><li><p><code>SelectDateWidget</code></p><blockquote><p>封装了三个<code>Widget</code>，分别用于年、月、日</p><p>可选参数：可以来指定日期表单的选择</p><p> <code>years</code>：一个列表或元组的序列数据类型，用来确定年的选择。</p><p> <code>months</code>：一个字典数据类型，字典的key值为月份数字，从1开始，value值为在表单中渲染展示的字符串，比如</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">MONTHS</span> = &#123;</span><br><span class="line">1:<span class="string">'一月'</span>, 2:<span class="string">'二月'</span>, 3:<span class="string">'三月'</span>, 4:<span class="string">'四月'</span>,</span><br><span class="line">5:<span class="string">'五月'</span>, 6:<span class="string">'六月'</span>, 7:<span class="string">'七月'</span>, 8:<span class="string">'八月'</span>,</span><br><span class="line">9:<span class="string">'九月'</span>, 10:<span class="string">'十月'</span>, 11:<span class="string">'十一月'</span>, 12:<span class="string">'十二月'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="表单API"><a href="#表单API" class="headerlink" title="表单API"></a>表单API</h3><blockquote><p>表单类的实例，只有两种，一种是绑定了数据的，一种是未绑定的。都可以渲染成为<code>html</code></p></blockquote><ul><li><p><code>Form.is_valid()</code></p><blockquote><p>对于绑定了数据的表单，进行验证并返回一个数据是否合法的布尔值</p><p>并在<strong>所有数据</strong>有效时将数据放入<code>cleaned_data</code>中</p></blockquote></li><li><p><code>Form.is_bound()</code></p><blockquote><p>区分绑定表单和未绑定表单，当表单类绑定数据时，返回<code>True</code></p></blockquote></li><li><p><code>Form.errors</code></p><blockquote><p>当验证发生错误时的错误信息的字典，字典<code>key</code>值为字段名称，<code>value</code>为报错信息列表，可能有多个报错</p><p>表单的数据将会在调用<code>is_valid</code>时或访问<code>errors</code>属性时验证</p><p>并且验证过程只会调用一次，不论访问<code>errors</code>和调用<code>is_valid</code>多少次</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestForm</span>(<span class="title">forms</span>.<span class="title">Form</span>):</span></span><br><span class="line">name = forms.CharField(max_length=<span class="number">5</span>,)</span><br><span class="line">email = forms.EmailField(required=True)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">cleaned_data = <span class="keyword">super</span>(TestForm,<span class="keyword">self</span>).clean()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.cleaned_data.get(<span class="string">'name'</span>) == <span class="string">'小红'</span><span class="symbol">:</span></span><br><span class="line">            raise forms.ValidationError(<span class="string">"不允许小红"</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = forms.TestForm(&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'小红'</span></span>,<span class="string">'emali'</span><span class="symbol">:<span class="string">'123'</span></span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; a.errors</span><br><span class="line">&#123;<span class="string">'name'</span>: [<span class="string">'不允许小红'</span>], <span class="string">'email'</span>: [<span class="string">'This field is required.'</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Form.errors.as_data</code></p><blockquote><p>返回报错信息的字典，映射字段报错信息到一个ValidationError实例</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f.errors.as_data()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'name'</span>: [<span class="symbol">ValidationError</span>([<span class="string">'不允许小红'</span>])], </span><br><span class="line"><span class="string">'email'</span>: [<span class="symbol">ValidationError</span>([<span class="string">'This field is required.'</span>])]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Form.errors.as_json(escape_html=False)</code></p><blockquote><p>以<code>json</code>格式返回错误信息</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.<span class="built_in">errors</span>.as_json()</span><br><span class="line">'&#123;</span><br><span class="line"><span class="string">"name"</span>: [&#123;<span class="string">"message"</span>: <span class="string">"\\u4e0d\\u5141\\u8bb8\\u5c0f\\u7ea2"</span>, <span class="string">"code"</span>: <span class="string">""</span>&#125;],</span><br><span class="line"><span class="string">"email"</span>: [&#123;<span class="string">"message"</span>: <span class="string">"This field is required."</span>, <span class="string">"code"</span>: <span class="string">"required"</span>&#125;]</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure></li><li><p><code>Form.initial</code></p><blockquote><p>声明当前表单类的默认数据，参数为一个字典数据类型</p><p><code>key</code>对应需要填充默认数据的表单字段，<code>value</code>值为实际数据</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">TestForm(<span class="params">forms</span>.Form)</span>:</span><br><span class="line">name = forms.<span class="constructor">CharField(<span class="params">max_length</span>=5,<span class="params">initial</span>='Jack',)</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">f</span> = TestForm(initial=&#123;<span class="string">'name'</span>:<span class="string">'Bob'</span>&#125;)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="keyword">f</span>)</span><br><span class="line"><span class="symbol">&lt;tr&gt;</span><span class="symbol">&lt;th&gt;</span></span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"id_name"</span>&gt;Name:&lt;/label&gt;&lt;/<span class="keyword">th</span>&gt;<span class="symbol">&lt;td&gt;</span></span><br><span class="line">&lt;<span class="built_in">input</span> id=<span class="string">"id_name"</span> maxlength=<span class="string">"5"</span> </span><br><span class="line">name=<span class="string">"name"</span> <span class="built_in">type</span>=<span class="string">"text"</span> value=<span class="string">"Bob"</span> /&gt;&lt;/td&gt;&lt;/<span class="keyword">tr</span>&gt;</span><br><span class="line"><span class="symbol">&lt;tr&gt;</span><span class="symbol">&lt;th&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Form.has_changed()</code></p><blockquote><p>检查表单当前的数据是否与默认值不同</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = TestForm(data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Jack'</span></span>&#125;,initial=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Bob'</span></span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.has_changed()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p><code>Form.cleaned_data</code></p><blockquote><p>在对绑定数据的表单实例进行<code>is_valid</code>验证之后，如果数据无误</p><p>那么返回的数据将保存在<code>cleaned_data</code>中</p><p>如果有部分数据没有经过验证，那么<code>cleaned_data</code>中也会保留合法的字段</p><p>并且，<code>在cleaned_data</code>属性中获取到的数据，只包含表单类中含有的字段</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">TestForm(<span class="params">forms</span>.Form)</span>:</span><br><span class="line">name = forms.<span class="constructor">CharField(<span class="params">max_length</span>=5,)</span></span><br><span class="line">email = forms.<span class="constructor">EmailField(<span class="params">required</span>=True)</span></span><br><span class="line">active = forms.<span class="constructor">BooleanField()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'name'</span>:<span class="string">'Jack'</span>,  </span><br><span class="line"><span class="meta">... </span>    <span class="string">'email'</span>:<span class="string">'111'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'active'</span>:<span class="literal">True</span>,</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = TestForm(data=data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.cleaned_data</span><br><span class="line">&#123; <span class="string">'name'</span>:<span class="string">'Jack'</span>, <span class="string">'active'</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Form.as_p()</code></p><blockquote><p>将表单渲染为一系列的<code>&lt;p&gt;</code>标签，每个标签内含一个字段</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">TestFrom(<span class="params">forms</span>.Form)</span>:</span><br><span class="line">name = forms.<span class="constructor">CharField(<span class="params">max_length</span>=5)</span></span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = TestForm()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(f.as_p())</span><br><span class="line">&lt;p&gt;&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"id_name"</span>&gt;Name:&lt;/<span class="keyword">label</span>&gt; &lt;<span class="keyword">input</span> id=<span class="string">"id_name"</span> maxlength=<span class="string">"5"</span> name=<span class="string">"name"</span> <span class="keyword">type</span>=<span class="string">"text"</span> /&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>Form.as_ul()</code></p><blockquote><p>渲染表单为一系列的<code>&lt;li&gt;</code>标签，并且不包含<code>&lt;ul&gt;</code>标签，可以自行指定<code>&lt;ul&gt;</code>的<code>HTML</code>属性</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(f.as_ul())</span><br><span class="line">&lt;<span class="keyword">li</span>&gt;&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"id_name"</span>&gt;Name:&lt;/<span class="keyword">label</span>&gt; &lt;<span class="keyword">input</span> id=<span class="string">"id_name"</span> maxlength=<span class="string">"5"</span> name=<span class="string">"name"</span> <span class="keyword">type</span>=<span class="string">"text"</span> /&gt;&lt;/<span class="keyword">li</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>Form.as_table()</code></p><blockquote><p>渲染表单为<code>&lt;tr&gt;&lt;th&gt;</code>标签</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(f.as_table())</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id_name"</span> <span class="attr">maxlength</span>=<span class="string">"5"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>配置表单元素的<code>HTML id</code>值与默认自带的<code>label</code>标签</p><p>通过表单类进行渲染时，默认会包含以下属性</p></blockquote><ul><li>表单元素的<code>HTML id</code>属性</li><li>辅助的<code>label</code>标签</li></ul><blockquote><p>有些时候，想要设置自定义HTML id值或者取消label标签，可以使用如下内置函数</p></blockquote><ul><li><p><code>Form.auto_id=True</code></p><blockquote><p>修改对应渲染表单属性</p><p>当<code>auto_id</code>值为<code>False</code>时，表单类的渲染将不会包含<code>&lt;label&gt;</code>以及<code>id</code>属性</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">f</span> = TestForm(auto_id=False)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="keyword">f</span>)</span><br><span class="line"><span class="symbol">&lt;tr&gt;</span><span class="symbol">&lt;th&gt;</span>Name:&lt;/<span class="keyword">th</span>&gt;<span class="symbol">&lt;td&gt;</span>&lt;<span class="built_in">input</span> maxlength=<span class="string">"5"</span> name=<span class="string">"name"</span> <span class="built_in">type</span>=<span class="string">"text"</span> /&gt;&lt;/td&gt;&lt;/<span class="keyword">tr</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="模板中表单实例属性"><a href="#模板中表单实例属性" class="headerlink" title="模板中表单实例属性"></a>模板中表单实例属性</h3><blockquote><p>模板页面接收到的<code>form</code>表单实例支持循环遍历访问</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; field &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><blockquote><p>其中<code>for</code>迭代访问之后的每一个表单字段又支持如下操作</p></blockquote><ul><li><p>``：字段的label，例如Email address。</p></li><li><p>``：包含在HTML 标签中的字段值。</p></li><li><p>``：这个字段的ID值。</p></li><li><p>``：字段的值</p></li><li><p>``：该字段的标签中name属性使用的值。</p></li><li><p>``：该字段的帮助文档。</p></li><li><p>``：字段的验证错误信息，字段标签会在</p></li></ul><ul><li><p>``：如果该字段为隐藏字段，返回True。反之返回False。</p></li><li><p>``：获取当前字段实例，可以用该属性来访问字段实例的属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; field<span class="selector-class">.field</span><span class="selector-class">.max_length</span> &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="与模型类关联的表单"><a href="#与模型类关联的表单" class="headerlink" title="与模型类关联的表单"></a>与模型类关联的表单</h3><blockquote><p>除了以上我们自定义表单类来进行表单的初始化</p><p><code>django</code>还提供了另外一种表单类的创建方法，可以通过与模型关联来构建表单</p><p>这种办法可以更加省时省力，直接使用模型类中已经定义好的字段来进行表单字段的生成</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTable</span><span class="params">(modes.Model)</span>:</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTableForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = TestTable</span><br><span class="line">fields = [<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>生成的表单实例将具备模型类中的字段，表单生成的字段顺序也与模型类中的定义顺序相同</p><p><code>fields</code>属性用来显示的设置所有需要在表单中处理的字段</p><p>也可以直接为该字段设置<code>fields = &#39;__all__&#39;</code>来使用所有模型类中的字段作为未来的表单字段</p></blockquote><ul><li><p>注意</p><p>：</p><ul><li>如果模型类中字段定义了<code>blank=True</code>，那么对应关联的表单类中字段会默认具有<code>require=False</code>的属性</li><li>模型类中字段的<code>verbose_name</code>属性对应关联表单类字段的Label属性</li><li>如果模型类字段中设置了<code>choices</code>值，那么对应关联表单字段的<code>widget</code>将会设置为<code>select</code></li></ul></li></ul><blockquote><p>当然，除了根据关联模型类来创建表单类，还可以在关联表单类中选择性的覆盖某些字段的设置</p><p>比如使用表单类<code>Meta</code>元类中的<code>widgets</code>属性可以以字典形式设置对应字段的控件</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTableForm</span>(<span class="title">forms</span>.<span class="title">ModelForm</span>):</span></span><br><span class="line">name = forms.URLField()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = TestTable</span><br><span class="line">fields = [<span class="string">'name'</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">'name'</span><span class="symbol">:forms</span>.Textarea(attrs=&#123;<span class="string">'class'</span><span class="symbol">:<span class="string">'green'</span></span>&#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>除此之外，还可以指定<code>labels</code>、<code>help_texts</code>和<code>error_messages</code>等信息</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTableForm</span></span>(forms.ModelForm):</span><br><span class="line">name = forms.URLField()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:<span class="type"></span></span></span><br><span class="line">model = TestTable</span><br><span class="line">fields = [<span class="string">'name'</span>]</span><br><span class="line">        labels = &#123;</span><br><span class="line">            <span class="string">'name'</span>:<span class="string">'您的名字'</span></span><br><span class="line">        &#125;</span><br><span class="line">        help_texts = &#123;</span><br><span class="line">            <span class="string">'name'</span>:<span class="string">'请输入您的名字'</span></span><br><span class="line">        &#125;</span><br><span class="line">        error_messages = &#123;</span><br><span class="line">            <span class="string">'name'</span>:&#123;</span><br><span class="line">                <span class="string">'required'</span>:<span class="string">'你必须填写这个名字'</span>,</span><br><span class="line">                <span class="string">'max_length'</span>:<span class="string">'你的名字太长了'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="与模型关联的表单验证"><a href="#与模型关联的表单验证" class="headerlink" title="与模型关联的表单验证"></a>与模型关联的表单验证</h3><blockquote><p>表单的验证在我们调用<code>is_valid</code>函数时执行，也可以通过访问<code>errors</code>属性或调用<code>full_clean</code>函数</p><p>验证的出错会引发<code>ValidationError</code>异常，该异常会向表单传达一个错误信息</p></blockquote><blockquote><p>验证的步骤主要分为两步，表单验证，如果关联了模型，则还会进行模型验证</p></blockquote><ul><li><p><strong>表单字段的验证</strong>分为以下过程</p><ol><li><p>字段<code>to_python</code>，这个方法将字段的值根据字段的类型转换为Python中的数据类型，如果不能转换则引发<code>ValidationError</code>异常</p></li><li><p>字段的<code>clean</code>函数，该函数用来运行对应的验证器，根据顺序执行<code>to_python</code>，<code>validate</code>特异性验证，以及<code>run_validators</code>（用于将错误信息汇总）验证，如果有任何验证过程引发了<code>ValidationError</code>异常，验证都将停止。其余通过验证的字段数据插入到表单的cleaned_data字典中</p></li><li><p>表单中的字段<code>clean</code>函数，这个验证用于完成特定属性，与表单字段类型无关；比如我们经常需要验证用户输入的字段值不能为小红，那么可以编写字段的<code>clean</code>函数，函数命名为<code>clean_&lt;fields_name&gt;</code>，<code>fileds_name</code>为字段名</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTableForm</span>(<span class="title">forms</span>.<span class="title">ModelForm</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">name = <span class="keyword">self</span>.cleaned_data.get(<span class="string">'name'</span>) </span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'小红'</span><span class="symbol">:</span></span><br><span class="line">        raise forms.ValidationError(<span class="string">'不允许小红'</span>)</span><br><span class="line">    <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure></li><li><p>表单的<code>clean</code>函数，这个方法进行表单中多个字段值的联合验证，验证之后的数据返回为<code>cleaned_data</code>，可以通过重写该函数来提供的额外验证方法，并且为了维持<code>clean</code>方法的验证行为，在代码中，表单类需要调用父类的<code>clean</code>方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">cleaned_data = <span class="keyword">super</span>(TestTableForm,<span class="keyword">self</span>).clean()</span><br><span class="line">    name = cleaned_data.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'1'</span> <span class="keyword">in</span> <span class="symbol">name:</span></span><br><span class="line">    cleaned_data[<span class="string">'name'</span>] = name.replace(<span class="string">'1'</span>,<span class="string">'一'</span>)</span><br><span class="line">    <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>最后总结的来说：</p><p> 一个表单在验证时，首先验证每一个字段，接着调用字段的<code>clean_fields</code>函数，最后使用表单类的<code>clean</code>函数进行验证</p></blockquote><blockquote><p>如果表单与模型关联，那么现在还有第二步验证，模型的验证</p></blockquote><ul><li><p><strong>模型的验证</strong>为如下过程</p><ol><li><p>验证关联模型的字段及相关属性：<code>Model.clean_fields(exclud=None)</code>，该方法将验证模型的所有字段属性，如果有字段验证错误，引发<code>ValidationError</code>异常</p></li><li><p>验证模型的完整性：<code>Model.clean(exclude=None)</code>，可以对模型做整体的检验，如果想要自己验证模型中通过属性校验的数据，可以在模型类中重新定义这个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTable</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>,verbose_name=<span class="string">'名字'</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'$'</span> <span class="keyword">in</span> self.name:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'无法使用$符号'</span>)</span><br></pre></td></tr></table></figure></li><li><p>验证模型的唯一性：<code>Model.validate_unique(exclude=None)</code>，如果模型中所有唯一约束性，比如使用类似<code>unique</code>属性，会校验表单中的值是否唯一</p></li></ol></li></ul><blockquote><p>并且，除了通过绑定模型的表单实例<code>is_valid</code>函数可以来进行以上的验证过程，如果想自己控制验证</p><p>可以直接使用模型的<code>full_clean(exclude=None,validate_unique=True)</code>方法进行以上三个步骤的验证</p></blockquote><h3 id="与模型关联的表单保存"><a href="#与模型关联的表单保存" class="headerlink" title="与模型关联的表单保存"></a>与模型关联的表单保存</h3><blockquote><p>与模型关联的表单，在校验成功之后，表单实例可以直接通过<code>save</code>函数来进行表单数据的保存数据库</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def form<span class="constructor">_test(<span class="params">request</span>)</span>:</span><br><span class="line"><span class="keyword">if</span> request.<span class="keyword">method</span><span class="operator"> == </span><span class="string">"POST"</span>:</span><br><span class="line">form = <span class="constructor">TestTableForm(<span class="params">request</span>.POST,<span class="params">request</span>.FILES)</span></span><br><span class="line"><span class="keyword">if</span> form.is<span class="constructor">_valid()</span>:</span><br><span class="line">form.save<span class="literal">()</span></span><br><span class="line">return <span class="constructor">HttpResponse('OK:%<span class="params">s</span>' % <span class="params">value</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>该函数也支持在模型类中进行重写，但是要切记使用父类的save方法，确保数据可以正确存储到数据库中</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(<span class="keyword">self</span>, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.name == <span class="string">'abc'</span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span> False<span class="comment">#不做存储</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">super</span>(TestTable,<span class="keyword">self</span>).save(*args, **kwargs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的CBV类视图</title>
      <link href="/2019/10/21/Django%E7%9A%84CBV%E7%B1%BB%E8%A7%86%E5%9B%BE/"/>
      <url>/2019/10/21/Django%E7%9A%84CBV%E7%B1%BB%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h2><blockquote><p><strong>CBV（class base views）</strong> 就是在视图里使用类处理请求</p><p>之前的代码中，我们的视图函数都是通过函数来进行<code>request</code>的响应以及<code>response</code>的返回，并且通常我们需要判断的请求方式<code>get</code>或是<code>post</code>都需要我们在代码中通过<code>if</code>进行条件判断，这样的视图功能编写就叫做<code>FBV</code></p></blockquote><a id="more"></a><!-- # Django的CBV类视图 发表于 1990-01-09 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><blockquote><p>但现在在<code>django</code>中还提供了一种方式叫做<code>CBV</code>，在类中编写视图功能， 并且将传统的<code>get</code>、<code>post</code>判断设置为了类中函数，这样当用户发起不同的请求，会自动进入到对应的类中函数上，像是下面这样</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">            id_ = request.POST.get(<span class="string">'id_'</span>)</span><br><span class="line">            result = models.Article.objects.get(id=id_).content</span><br><span class="line">            data = result.replace(<span class="string">'\r\n'</span>,<span class="string">'&lt;br&gt;'</span>) </span><br><span class="line">            <span class="keyword">return</span> HttpResponse(json.dumps(data,ensure_ascii=<span class="literal">False</span>) )</span><br><span class="line">       <span class="keyword">raise</span> Http404</span><br></pre></td></tr></table></figure><blockquote><p>通过将请求类型定义为函数，可以更加方便进行请求方式判断</p><p>用户访问时，会经由<code>View</code>基类中的<code>as_view -&gt; dispatch</code>进行判断，通过请求类型分发到不同对应请求的函数名下；也就是通过<code>get</code>方式访问，那么对应会调用到名为<code>get</code>的函数</p><p>此外，类中函数必须为小写，</p></blockquote><ul><li>对应路由此时设置为，需要使用试图类的<code>as_view</code>函数进行实例化</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#url</span>.py</span><br><span class="line"><span class="function"><span class="title">path</span><span class="params">(<span class="string">'article/'</span>,ajaxviews.ArticleView.as_view()</span></span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过类视图可以方便我们进行请求条件的判断</p><p>并且可以在进行接口开发时，实现同一资源路由在使用不同请求访问时的功能解耦和</p><p>意思就是不用再把所有的功能都堆到一个视图函数里啦。多方便！</p><p>并且，在<code>Django-Restframework</code>框架中，也将频繁使用<code>CBV</code>形式进行视图编写</p></blockquote><h4 id="类视图装饰器"><a href="#类视图装饰器" class="headerlink" title="类视图装饰器"></a>类视图装饰器</h4><blockquote><p>在类视图中使用为函数视图准备的装饰器时，不能直接添加装饰器</p><p>需要使用method_decorator将其转换为适用于类视图方法的装饰器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; from django<span class="selector-class">.utils</span><span class="selector-class">.decorators</span> import method_decorator</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>全部装饰</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">(request)</span>:</span> <span class="comment"># dispatch函数有参数request</span></span><br><span class="line">        print(<span class="string">'这是装饰器在调用'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(request)</span><br><span class="line">    <span class="keyword">return</span> nei</span><br><span class="line"><span class="meta">@method_decorator(my_decorator, name='dispatch')</span></span><br><span class="line"><span class="comment"># 为全部请求方法添加装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><ul><li>为部分装饰，只需要通过<code>method_decorator</code>方法的<code>name</code>参数选择装饰的函数名即可</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@method_decorator(my_decorator, name=<span class="string">'post'</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">DemoView</span>(<span class="symbol">View</span>):</span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">get</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">print</span>('<span class="symbol">get</span>方法')</span><br><span class="line">        <span class="symbol">return</span> <span class="symbol">HttpResponse</span>('<span class="symbol">ok</span>')</span><br><span class="line"></span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">post</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">print</span>('<span class="symbol">post</span>方法')</span><br><span class="line">        <span class="symbol">return</span> <span class="symbol">HttpResponse</span>('<span class="symbol">ok</span>')</span><br></pre></td></tr></table></figure><ul><li>为特定的多个类视图函数进行装饰，只需要在每个函数上使用<code>method_decorator</code>装饰器即可</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">DemoView</span>(<span class="symbol">View</span>):</span><br><span class="line">    @<span class="symbol">method_decorator</span>(<span class="symbol">my_decorator</span>) # 为<span class="symbol">get</span>方法添加了装饰器</span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">get</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">return</span> <span class="symbol">HttpResponse</span>('<span class="symbol">ok</span>')</span><br><span class="line">@<span class="symbol">method_decorator</span>(<span class="symbol">my_decorator</span>) # 为<span class="symbol">post</span>方法添加了装饰器</span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">post</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">return</span> <span class="symbol">HttpResponse</span>('<span class="symbol">ok</span>')</span><br></pre></td></tr></table></figure><h4 id="类视图csrf-token装饰"><a href="#类视图csrf-token装饰" class="headerlink" title="类视图csrf_token装饰"></a>类视图<code>csrf_token</code>装饰</h4><blockquote><p>当类视图需要允许跨站提交数据时，使用<code>csrf_exempt</code>装饰器装饰函数可以被跨域访问</p><p>但是使用上面的方法进行<code>csrf_exempt</code>是不行的，需要在类视图基类的<code>dispatch</code>函数上进行装饰</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line"><span class="comment">#<span class="doctag">@method</span>_decorator(csrf_exempt,name='dispatch') # 直接加载类视图上也是可以修饰的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span>(<span class="title">View</span>):</span></span><br><span class="line">    @method_decorator(csrf_exempt)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(<span class="keyword">self</span>, request, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(DemoView,<span class="keyword">self</span>).dispatch(request, *args, **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(<span class="keyword">self</span>, request)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(<span class="keyword">self</span>, request)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>csrf</code>装饰只能在类视图的<code>dispatch</code>函数上才能被生效</p></blockquote><blockquote><p>除了在类视图的<code>dispatch</code>函数上进行装饰，在路由映射处使用<code>csrf_exempt</code>函数修饰路由规则也是可以的</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#urls</span>.py</span><br><span class="line">from django<span class="selector-class">.views</span><span class="selector-class">.decorators</span><span class="selector-class">.csrf</span> import csrf_exempt</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">''</span>,csrf_exempt(ajaxviews<span class="selector-class">.DemoView</span><span class="selector-class">.as_view</span>()))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax及Axios异步请求，接口数据序列化处理</title>
      <link href="/2019/10/21/Ajax%E5%8F%8AAxios%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86/"/>
      <url>/2019/10/21/Ajax%E5%8F%8AAxios%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><p><code>ajax</code>可以使当前浏览器不需要整个重新加载，只是局部刷新，给用户的体验良好，也因为只是刷新局部页面，相对而言效率更高一些</p><p>同步交互：客户端发出一个请求后，需要等待服务器相应结束后，才可以发起第二个请求</p><p>异步交互：客户端发出一个请求后，无需等待该次服务器的相应，即可发起第二个请求</p></blockquote><a id="more"></a><!-- # Ajax及Axios异步请求，接口数据序列化处理 发表于 1990-01-10 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><h3 id="json数据类型"><a href="#json数据类型" class="headerlink" title="json数据类型"></a>json数据类型</h3><ul><li>数据在键值对中</li><li>数据由逗号分隔</li><li>花括号存储数据</li><li>方括号保存数组</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="string">"name"</span>:<span class="string">"Bill"</span>, <span class="string">"age"</span>:<span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>:<span class="string">"George"</span>, <span class="string">"age"</span>:<span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"name"</span>:<span class="string">"Thomas"</span>, <span class="string">"age"</span>: <span class="number">3</span> &#125;</span><br><span class="line">]<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery-Ajax"><a href="#jQuery-Ajax" class="headerlink" title="jQuery-Ajax"></a>jQuery-Ajax</h3><blockquote><p>使用<code>ajax</code>进行<code>django</code>后台数据的异步获取，<code>django</code>只是提供的数据，并不承担前端页面的渲染工程</p><p>这里使用<code>jQuery</code>所提供的<code>ajax</code>方法进行异步通信</p></blockquote><ul><li>首先测试数据库中模型类定义如下：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Article(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    title = models.<span class="constructor">CharField(<span class="params">max_length</span>=50,<span class="params">verbose_name</span>=<span class="string">"标题"</span>)</span></span><br><span class="line">    author = models.<span class="constructor">CharField(<span class="params">max_length</span>=20,<span class="params">verbose_name</span>=<span class="string">"作者"</span>)</span></span><br><span class="line">    date = models.<span class="constructor">DateField(<span class="params">auto_now_add</span>=True,<span class="params">verbose_name</span>=<span class="string">"发表日期"</span>)</span></span><br><span class="line">    content = models.<span class="constructor">TextField(<span class="params">verbose_name</span>=<span class="string">"文章内容"</span>)</span></span><br><span class="line"></span><br><span class="line">    def <span class="constructor">__str__(<span class="params">self</span>)</span>:</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure><blockquote><p>测试数据可由用户自行添加，非常简单</p></blockquote><ul><li>编写主页视图函数，返回所有数据库中内容</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line">    articles = models.Article.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ajax/index.html'</span>,locals())</span><br></pre></td></tr></table></figure><blockquote><p>此处的<code>index.html</code>页面不光承担所有数据的渲染工作</p><p>还将负责未来<code>ajax</code>异步请求，获取对应文章的详细内容</p></blockquote><ul><li><code>index.html</code>页面代码</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">    label&#123;</span></span><br><span class="line"><span class="xml">        border: 5px outset gray;</span></span><br><span class="line"><span class="xml">        width: 150px;</span></span><br><span class="line"><span class="xml">        margin-top: 10px; </span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> staticfiles %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'js/jquery-1.10.2.min.js' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'js/jquery.cookie.js' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 该js文件用来引入jquery所提供的获取cookie值的库 为了提取对应csrf_token--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个ajax的请求测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> article <span class="keyword">in</span> articles %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; article.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; article.author &#125;&#125;</span><span class="xml">:</span><span class="template-variable">&#123;&#123; article.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    $(document).ready(function () &#123;</span></span><br><span class="line"><span class="xml">        $("label").click(function () &#123;</span></span><br><span class="line"><span class="xml">            $.ajax(&#123;</span></span><br><span class="line"><span class="xml">                url: '/article/', // 请求地址，对应Django某个路由映射</span></span><br><span class="line"><span class="xml">                type: 'POST', // 请求方式 post</span></span><br><span class="line"><span class="xml">                data: &#123;</span></span><br><span class="line"><span class="xml">                    'csrfmiddlewaretoken': $.cookie('csrftoken'),</span></span><br><span class="line"><span class="xml">                    // 提交数据需有当前csrf_token 防跨站请求伪造令牌</span></span><br><span class="line"><span class="xml">                    'id_': $(this).attr('class'),</span></span><br><span class="line"><span class="xml">                    // 获取当前的id值 传递到视图后台</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                success: function (result) &#123;</span></span><br><span class="line"><span class="xml">                    var data = JSON.parse(result)</span></span><br><span class="line"><span class="xml">                    // 解析获得实际字符串</span></span><br><span class="line"><span class="xml">                    $('.content').html(data)</span></span><br><span class="line"><span class="xml">                    // 将内容以html形式显示到对应的p标签上</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>有了前端页面，并且<code>ajax</code>的请求地址为<code>/article/</code>，那么就需要我们定义一个视图函数返回对应的<code>json</code>数据，并且设置路由为<code>/article/</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#urls.py</span></span><br><span class="line">path(<span class="string">'ajax/'</span>,ajaxviews.index), <span class="comment"># 首页路由</span></span><br><span class="line">path(<span class="string">'article/'</span>,ajaxviews.article) <span class="comment"># ajax请求路由</span></span><br><span class="line"><span class="comment">#views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax(): <span class="comment"># 判断是否为ajax请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">"POST"</span>: <span class="comment"># 为ajax的post方式请求</span></span><br><span class="line">            id_ = request.POST.get(<span class="string">'id_'</span>)</span><br><span class="line">            <span class="keyword">if</span> id_:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    content = models.Article.objects.get(id=id_).content.replace(<span class="string">'\r\n'</span>,<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line">                <span class="comment"># 这里还将获取到的文章字符串内容中的换行替换为HTML的换行标签</span></span><br><span class="line">                <span class="keyword">except</span> models.Article.DoesNotExist:</span><br><span class="line">                    <span class="keyword">raise</span> Http404</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = json.dumps(content,ensure_ascii=<span class="literal">False</span>,cls=JsonEncoder) </span><br><span class="line">                    <span class="comment"># 返回get对应取到的实际属性</span></span><br><span class="line">                    <span class="keyword">return</span> HttpResponse(data)</span><br><span class="line">    <span class="keyword">raise</span> Http404</span><br></pre></td></tr></table></figure><hr><blockquote><p>这里要注意的是，后端返回的数据得是序列化之后的才可以被前端<code>js</code>所解析，直接返回一个<code>django model</code>数据实例是不行的。所以需要我们视图函数对需要返回的数据进行序列化操作</p></blockquote><blockquote><p>对于数据的序列化操作主要有以下两种</p></blockquote><h4 id="json序列化"><a href="#json序列化" class="headerlink" title="json序列化"></a>json序列化</h4><blockquote><p>普通<code>Python</code>数据直接使用<code>json</code>模块进行序列化</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">content = models.Article.objects.<span class="keyword">get</span>(id=id_).content.replace(<span class="string">'\r\n'</span>,<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line">#这里将文章内容对应返回，之所以有replace函数，是因为文章数据是通过<span class="keyword">admin</span>后台复制添加，需要将其中的\r\n换行转换为HTML可以解析的&lt;br&gt;标识符</span><br><span class="line">data = <span class="type">json</span>.dumps(content,ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line"># 第二个参数是因为序列化时对中文默认使用的ascii编码，此时需要将该值设置为<span class="keyword">False</span>，这样前端接收到时才是一个正常中文结果</span><br><span class="line"><span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure><blockquote><p>但如果要序列化的数据中包含时间类型<code>date</code> 或<code>datetime</code>时，这种办法就会报错啦</p></blockquote><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; TypeError: Object of<span class="built_in"> type </span>date is <span class="keyword">not</span> JSON serializable</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义json处理器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, datetime):</span><br><span class="line">            <span class="comment"># 如果判断到类型为datetime格式</span></span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">            <span class="comment"># 处理为字符串类型的 (年-月-日 时:分:秒)</span></span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, date):</span><br><span class="line">            <span class="comment"># 如果判断到json处理数据为date类型</span></span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(self,obj)</span><br><span class="line">            <span class="comment"># 其他数据类型按照默认的序列化方式处理即可</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>cls</code>指定序列化方式，即可轻松解决特殊格式没有办法被<code>json</code>序列化的问题</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">content</span> = models.<span class="type">Article</span>.objects.get(id=id_).date</span><br><span class="line"><span class="class"><span class="keyword">data</span> = json.dumps(<span class="title">content</span>,<span class="title">ensure_ascii</span>=<span class="type">False</span>,<span class="title">cls</span>=<span class="type">JsonEncoder</span>)</span></span><br><span class="line"><span class="meta"># 通过json.dumps的cls参数指明所使用的自定义序列化类</span></span><br><span class="line"><span class="title">return</span> <span class="type">HttpResponse</span>(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>对应前端接收展示</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = <span class="type">JSON</span>.parse(<span class="title">result</span>) // 普通json传输方式</span></span><br><span class="line">$('.content').html(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>如果返回的数据并不是一个单独的数据属性，那么也可以通过<code>json</code>进行处理，以一个数据列表的形式返回</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">content = models.Article.objects.<span class="keyword">filter</span>(id=id_).<span class="keyword">values</span>()</span><br><span class="line"># <span class="comment">----------------------------------------------</span></span><br><span class="line"># content = models.Article.objects.<span class="keyword">all</span>().<span class="keyword">values</span>()</span><br><span class="line"># <span class="comment">----------------------------------------------</span></span><br><span class="line">data = <span class="type">json</span>.dumps(list(content),ensure_ascii=<span class="keyword">False</span>,cls=JsonEncoder)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure><blockquote><p>对应前端接收展示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">&lt;!-- 这里用到的不是之前的p标签 而是一个div容器 --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">success: function (result) &#123;</span></span><br><span class="line"><span class="regexp">    var data = JSON.parse(result)[0]['content']</span></span><br><span class="line"><span class="regexp">    $('.content').html(data.replace(/</span>\r\n/g,<span class="string">"&lt;br&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果需要展示的是所有的结果，可以通过js的for循环</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(result)</span><br><span class="line">    <span class="keyword">var</span> tag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = data.length; i &lt; len; i++) &#123;</span><br><span class="line">        tag += <span class="string">'&lt;p&gt;'</span> + data[i][<span class="string">'content'</span>].replace(<span class="regexp">/\r\n/g</span>, <span class="string">"&lt;br&gt;"</span>) + <span class="string">'&lt;/p&gt;'</span></span><br><span class="line">        tag += <span class="string">'&lt;hr&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'.content'</span>).html(tag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="Vue-Axios"><a href="#Vue-Axios" class="headerlink" title="Vue-Axios"></a>Vue-Axios</h3><blockquote><p>除去<code>jQuery</code>所提供的异步通信<code>ajax</code>方法</p><p>在<code>Vue</code>中也提供了<code>ajax</code>的异步通信方法，叫做<code>Axios</code></p><p><code>Axios</code>会自动转换<code>json</code>数据</p></blockquote><blockquote><p>简单的来编写一个视图函数</p><p> <code>get</code>：返回当前页面</p><p> <code>post</code>：返回一条<code>json</code>数据</p></blockquote><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attribute">el</span>: <span class="string">'#content'</span>, <span class="comment">// Vue接管的区域</span></span><br><span class="line">        <span class="attribute">data</span>: &#123;</span><br><span class="line">            <span class="attribute">message</span>: <span class="string">'这个是表单内容'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attribute">methods</span>: &#123;</span><br><span class="line">            getajax() &#123;</span><br><span class="line">                axios.get(<span class="string">'/get_ajax/'</span>, &#123;</span><br><span class="line">                    <span class="attribute">params</span>: &#123; <span class="comment">// 这部分为get方式进行传参时使用的</span></span><br><span class="line">                        <span class="attribute">id:</span><span class="string"> 123</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;)</span></span><br><span class="line"><span class="string">                    .then</span>(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(response) <span class="comment">// 打印输出get方式进行ajax请求时获取到的数据</span></span><br><span class="line">                &#125;)</span><br><span class="line">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(error) <span class="comment">// 当get方式ajax请求报错时，会进入该函数</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对应的<code>HTML</code>页面</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'getajax'</span>&gt;</span>点我发送ajax的get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>后台视图函数</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request<span class="selector-class">.method</span> == <span class="string">'GET'</span>:</span><br><span class="line">    message = request<span class="selector-class">.GET</span><span class="selector-class">.get</span>(<span class="string">'message'</span>)</span><br><span class="line">    print(message)</span><br><span class="line">    return render(request,<span class="string">'axios/index.html'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>当使用的是<code>post</code>形式获取服务端数据时，首先要注意，<code>axios</code>默认的提交<code>post</code> 数据不是普通的<code>form-data</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; axios`的`post`使用的是`request payload`方式，参数格式是`application/json<span class="comment">;charset=UTF-8</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>而我们之前的表单提交数据的类型都是<code>application/x-www-form-urlencoded</code>，所以直接再<code>django</code>后台通过<code>request.POST.get</code>是获取不到任何数据的</p><p>解决办法，需要我们在<code>axios</code>提交数据时，指明提交时的头部信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#content'</span>, <span class="comment">// Vue接管的区域</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">'这个是表单内容'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getajax() &#123;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: <span class="string">'post'</span>,</span><br><span class="line">                    url: <span class="string">'/get_ajax/'</span>,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        message:<span class="keyword">this</span>.message,</span><br><span class="line">                        name: <span class="string">'张三'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    headers: &#123;</span><br><span class="line">                        <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">                    <span class="keyword">this</span>.message = response.data</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然通过添加头部信息，可以让<code>axios</code>发送的数据被<code>django</code>后台所接收到，但是此时的数据还是有问题的</p><p>获取到的<code>POST</code>提交的数据被<code>django</code>打包成了一个<code>QueryDict</code>中的key值，<code>value</code>为空数组</p><p>导致后台按照平时的解析方式是获取不到的</p><p>解决办法也很简单，把<code>QueryDict</code>单独处理为一个字典</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">if</span> request.method == '<span class="type">POST'</span>:</span><br><span class="line">    <span class="class"><span class="keyword">data</span> = eval(<span class="title">list</span>(<span class="title">request</span>.<span class="type">POST</span>.<span class="title">keys</span>())[0]) # 将获取到的数据转换为字典</span></span><br><span class="line">    message = <span class="class"><span class="keyword">data</span>.get('<span class="title">message'</span>)</span></span><br><span class="line">    <span class="class"><span class="keyword">data</span> = json.dumps(<span class="title">message</span> + '我被服务端后台修改过')</span></span><br><span class="line">    return <span class="type">HttpResponse</span>(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来，当用户点击按钮时，<code>post</code>提交表单数据，给到<code>django</code>后台，后台追加字符串并返回，返回的数据被<code>then</code>回调函数所接收到，重新赋值给绑定的表单变量中</p></blockquote><ul><li>第二种办法，在前端<code>vue</code>提交数据时，</li></ul><h3 id="serializer序列化"><a href="#serializer序列化" class="headerlink" title="serializer序列化"></a>serializer序列化</h3><blockquote><p><code>serializer</code>是由<code>django</code>所提供的一个专门用来处理<code>django</code>数据对象<code>(django model)</code>变为序列化数据的框架</p><p>并且<code>Django</code>的序列化不支持<strong>单个对象</strong>，比如像<code>objects.get</code>获取到的数据，或是<code>Python</code>中的 <code>str</code>等数据类型</p><p>该序列化框架所提供的功能类位于<code>django.core.serializers</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#views.py </span><br><span class="line">from django.core <span class="keyword">import</span> serializers</span><br><span class="line">content = models.Article.objects.filter(id=id_)</span><br><span class="line"><span class="keyword">data</span> = serializers.serialize(<span class="string">'json'</span>,content,ensure_ascii=False)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="keyword">data</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">data</span> = JSON.parse(result)[<span class="number">0</span>][<span class="string">'fields'</span>][<span class="string">'content'</span>] <span class="comment">// 序列化传输方式</span></span><br><span class="line">$(<span class="string">'.content'</span>).html(<span class="keyword">data</span>.replace(/\r\n/g,<span class="string">"&lt;br&gt;"</span>))</span><br><span class="line">console.log(<span class="keyword">data</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>总结</strong>：通过管理器的<code>get</code>方法获取到的是一个独立的结果，并不是一个<code>QuerySet</code>数据对象，也不是一个普通<code>Python</code>数据类型；只能对数据其中的某条属性进行<code>json</code>格式的处理或是将其变为列表等序列数据类型之后再进行序列化处理</p></blockquote><h3 id="serializer反序列化"><a href="#serializer反序列化" class="headerlink" title="serializer反序列化"></a>serializer反序列化</h3><blockquote><p>序列化：<code>serializers.serialize</code></p><p>反序列化：<code>serializers.deserialize</code></p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="title">content</span> = models.<span class="type">Article</span>.objects.filter(id=id_) # <span class="type">QuerySet</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> = serializers.serialize('<span class="title">json'</span>,<span class="title">content</span>,<span class="title">ensure_ascii</span>=<span class="type">False</span>) # str</span></span><br><span class="line"><span class="title">content</span> = serializers.deserialize(<span class="string">"json"</span>, <span class="class"><span class="keyword">data</span>)</span></span><br><span class="line"><span class="title">return</span> <span class="type">HttpResponse</span>(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure><h3 id="Ajax跨域"><a href="#Ajax跨域" class="headerlink" title="Ajax跨域"></a>Ajax跨域</h3><blockquote><p>浏览器有一个很重要的概念：同源策略<code>(Same-Origin Policy)</code></p><p><strong>所谓同源是指，域名，协议，端口相同</strong></p><p><strong>不同源的客户端脚本javascript、ActionScript在没明确授权的情况下，不能读写对方的资源</strong></p><p>同源：请求资源的地址与请求的发起方都属于同一域名下</p></blockquote><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><blockquote><p><code>JSONP</code>是<code>JSON with padding</code>（填充式<code>JSON</code> 或参数式 <code>JSON</code>）的简写</p><p><strong>JSONP实现跨域请求的原理简单的说，就是动态创建<script>标签，然后利用<script>的src不受同源策略约束来跨域获取数据。</strong></p><p><code>JSONP</code>由两部分组成：回调函数和数据</p><p>回调函数是当响应到来时应该在页面中调用的函数；回调函数的名字一般是在请求中指定的，而数据就是传入回调函数中的参数</p></blockquote><blockquote><p>注意：<code>JSONP</code>方式解决<code>AJAX</code>跨域，必须使用<code>get</code>方式，并且该方式常在一些数据量级比较小的情况下，因为需要服务端后台构建回调函数带参数的字符串，像是下面这样</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">index</span>(request):</span><br><span class="line">    <span class="type">name</span> = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">'name'</span>) + <span class="string">'哈哈哈哈哈'</span></span><br><span class="line">    callback = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">'callback'</span>)</span><br><span class="line">    data = <span class="string">'%s("%s")'</span> % (callback,<span class="type">name</span>) </span><br><span class="line">    # 这里以前端生成的回调函数名作为函数名，待返回数据作为参数返回</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure><ul><li>前端代码：点击按钮传送表单的值到后台，并由后台处理后追加内容返回，返回的结果展示再<code>p</code>标签处</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'ajax_data'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">    按钮</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Ajax</code>代码，获取当前表单数据，并使用<code>get</code>方式传递到服务端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'http://127.0.0.1:8000/axios/'</span>, <span class="comment">// 请求地址，对应Django某个路由映射</span></span><br><span class="line">            type: <span class="string">'get'</span>, <span class="comment">// 请求方式 post</span></span><br><span class="line">            dataType: <span class="string">"jsonp"</span>, <span class="comment">// 指定服务端返回的数据为jsonp格式</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                <span class="string">'name'</span>: $(<span class="string">'#ajax_data'</span>).val(),</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result)</span><br><span class="line">                $(<span class="string">'#content'</span>).html(result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li><p><code>ajax</code>发起请求，并指定服务端返回数据类型为<code>jsonp</code>格式</p></li><li><p>服务端构建函数包含参数的字符串，为<code>jsonp</code>请求发起时，给定的回调参数名，参数为要返回的数据</p></li><li><p>客户端先会调用回调函数，然后会调用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">success</span></span><br></pre></td></tr></table></figure><p>回调函数可以接收处理服务端返回的数据</p><ul><li><code>success</code>回调函数是成功返回数据后必定会调用的函数</li></ul></li></ol><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><blockquote><p>跨域资源共享<code>CORS(Cross-Origin Resource Sharing)</code>是一种机制，它使用额外的<code>HTTP</code>头来告诉浏览器，让运行在一个 <code>origin</code> (<code>domain</code>) 上的<code>Web</code>应用被<strong>准许</strong>访问<strong>来自不同源服务器</strong>上的指定的资源</p><p>当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong></p></blockquote><ul><li><strong>注意</strong>：不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了</li></ul><blockquote><p>实现<code>CORS</code>通信的关键是服务器。只要服务器实现了<code>CORS</code>接口，就可以跨源通信</p></blockquote><ul><li>这里需要我们将后端视图函数在接收到请求时，返回结果指明头部信息</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cors</span>(<span class="title">View</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(<span class="keyword">self</span>,request)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment">#判断是否为ajax请求</span></span><br><span class="line">name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">response = HttpResponse(json.dumps(<span class="string">'OK'</span>))</span><br><span class="line">response[<span class="string">"Access-Control-Allow-Origin"</span>] = <span class="string">"http://127.0.0.1:5500"</span></span><br><span class="line"><span class="comment"># 允许可以跨域请求的站点</span></span><br><span class="line">response[<span class="string">"Access-Control-Allow-Methods"</span>] = <span class="string">"POST, GET, OPTIONS"</span></span><br><span class="line"><span class="comment"># 允许可以跨域访问的请求方式</span></span><br><span class="line">response[<span class="string">"Access-Control-Allow-Headers"</span>] = <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 允许可以跨域请求时的头部字段</span></span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li>前端页面的<code>ajax</code>代码正常提交数据即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'button'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'http://127.0.0.1:8000/'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'post'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                name: $(<span class="string">'#name'</span>).val()</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span><span class="params">(result)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="django-cors-headers"><a href="#django-cors-headers" class="headerlink" title="django-cors-headers"></a>django-cors-headers</h4><blockquote><p>除了以上手动构建返回结果的头部信息用来解决跨域问题</p><p>在<code>django</code>中还可以通过一个先成可以自动添加<code>CORS-Header</code>的中间件，只需要在<code>settings.py</code>中做一些简单的配置即可</p><p>要想使用该中间件需要安装<code>django</code>的三方插件</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django-cors-headers</span><br></pre></td></tr></table></figure><ul><li>安装完成之后，在<code>django</code>的<code>settings</code>文件中加载<code>app</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="attribute">INSTALLED_APPS</span> = [</span><br><span class="line">...</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>接下来在中间件配置部分加载该插件所提供的中间件</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># settings.py</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>, <span class="meta"># 顺序需要在common组件之前</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="meta">#<span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>继续配置允许跨站请求的白名单设置等属性</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = False <span class="comment"># 是否允许其他所有站点发起跨站请求</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    'http://127.0.0.1:5500',</span><br><span class="line">) <span class="comment"># 跨站请求白名单</span></span><br><span class="line"></span><br><span class="line">CORS_ALLOW_METHODS = (</span><br><span class="line">    'POST',</span><br><span class="line">) <span class="comment">#  允许跨站访问的请求方式</span></span><br><span class="line"></span><br><span class="line">CORS_ALLOW_HEADERS = (</span><br><span class="line">    '*',</span><br><span class="line">) <span class="comment"># 允许跨站请求头中的字段类型</span></span><br></pre></td></tr></table></figure><ul><li>注：其中某些设置的默认值为如下所示</li></ul><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">default_headers = (</span><br><span class="line">    <span class="symbol">'accept'</span>,</span><br><span class="line">    <span class="symbol">'accept</span>-encoding',</span><br><span class="line">    <span class="symbol">'authorization'</span>,</span><br><span class="line">    <span class="symbol">'content</span>-type',</span><br><span class="line">    <span class="symbol">'dnt'</span>,</span><br><span class="line">    <span class="symbol">'origin'</span>,</span><br><span class="line">    <span class="symbol">'user</span>-agent',</span><br><span class="line">    <span class="symbol">'x</span>-csrftoken',</span><br><span class="line">    <span class="symbol">'x</span>-requested-with',</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">default_methods = (</span><br><span class="line">    <span class="symbol">'DELETE'</span>,</span><br><span class="line">    <span class="symbol">'GET'</span>,</span><br><span class="line">    <span class="symbol">'OPTIONS'</span>,</span><br><span class="line">    <span class="symbol">'PATCH'</span>,</span><br><span class="line">    <span class="symbol">'POST'</span>,</span><br><span class="line">    <span class="symbol">'PUT'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></script></strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django邮件发送及华丽呼哨的邮件格式</title>
      <link href="/2019/10/21/Django%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8F%8A%E5%8D%8E%E4%B8%BD%E5%91%BC%E5%93%A8%E7%9A%84%E9%82%AE%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/10/21/Django%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8F%8A%E5%8D%8E%E4%B8%BD%E5%91%BC%E5%93%A8%E7%9A%84%E9%82%AE%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><blockquote><p><code>django</code>中内置了许多方法可以使开发者方便的进行邮件发送</p></blockquote><h3 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h3><blockquote><p>发送邮件，首先需要在项目的<code>settings.py</code>文件下配置邮件服务器连接等信息</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">EMAIL_USE_SSL</span> = 真 ＃安全套接字层安全套接层，取决于邮件服务器是否开启加密协议</span><br><span class="line"> <span class="attr">EMAIL_HOST</span> = 'smtp.qq.com'   ＃邮件服务器地址</span><br><span class="line"> <span class="attr">EMAIL_PORT</span> = <span class="number">465</span>  ＃邮件服务器端口</span><br><span class="line"> <span class="attr">EMAIL_HOST_USER</span> = 'account@qq.com'  ＃登陆邮件服务器的</span><br><span class="line">账号<span class="attr">EMAIL_HOST_PASSWORD</span> = '密码'   ＃登陆邮件服务器的密码</span><br><span class="line"> <span class="attr">DEFAULT_FROM_EMAIL</span> = EMAIL_HOST_USER ＃邮件的发送者</span><br></pre></td></tr></table></figure><a id="more"></a><!-- # Django邮件发送及华丽呼哨的邮件格式 发表于 1990-01-11 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><blockquote><p><strong>注意</strong>：<code>EMAIL_HOST_PASSWORD</code>所设置的登陆邮件服务器的密码为邮件客户端后台所设置的第三方客户端登陆密码，这个值并非直接账号密码</p><p>如：<code>QQ</code>邮箱的该值密码在网页版<code>QQ</code>邮件客户端的设置<code>-&gt;</code>帐户<code>-&gt;</code>开启<code>POP3/SMTP服务|IMAP/SMTP服务</code></p></blockquote><h3 id="发送文本邮件"><a href="#发送文本邮件" class="headerlink" title="发送文本邮件"></a>发送文本邮件</h3><blockquote><p>发送普通邮件可以使用<code>django.core.mail</code>模块下的<code>send_mail</code>函数进行</p></blockquote><ul><li><p><code>send_mail(subject, message, from_email, recipient_list, fail_silently=False, html_message=None)</code></p><blockquote><p>将邮件发送至<code>recipient_list</code>中的每一个收件人处</p></blockquote><blockquote><p><code>subject</code>：发送邮件标题</p><p><code>message</code>：发送邮件正文</p><p><code>from_email</code>：发件人邮箱地址</p><p><code>recipient_list</code>：一个字符串列表，每一个数据为接收者的邮箱地址</p><p><code>html_message</code>：如果指定该值，则发送的内容类型为<code>text/html</code>为一个<code>html</code>邮件内容</p></blockquote></li><li><p>发送普通邮件视图函数</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">从 django.core.mail 导入 send_mail </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">send_email</span> <span class="title">（请求）：</span></span></span><br><span class="line"><span class="function">     <span class="title">subject</span> </span>= '邮件测试'</span><br><span class="line">     message = '&lt;a href=<span class="string">"http://www.python.org"</span>&gt;学习<span class="type">Python</span>，我很快乐&lt;/a&gt;'</span><br><span class="line">     send_mail（</span><br><span class="line">        主题=主题，</span><br><span class="line">        消息=消息，</span><br><span class="line">        from_email =<span class="symbol">'from</span><span class="meta">@qq</span>.com'，</span><br><span class="line">        收件人列表= [ <span class="symbol">'recv</span><span class="meta">@qq</span>.com'，<span class="symbol">'recv1</span><span class="meta">@qq</span>.com' ] </span><br><span class="line">    ）<span class="keyword">return</span> <span class="type">HttpResponse</span>（<span class="symbol">'Dow</span>n'）</span><br></pre></td></tr></table></figure><h3 id="发送HTML邮件"><a href="#发送HTML邮件" class="headerlink" title="发送HTML邮件"></a>发送HTML邮件</h3><blockquote><p>发送这里的邮件内容为一个<code>HTML</code>的<code>a</code>标签，但是真正接收者接到该邮件时，<code>a</code>标签并不会解释称为真正的<code>a</code>标签，只是一个普通的字符串，这是因为当前发送邮件的类型为<code>text/plain</code>，可以使用<code>html_message</code>参数进行<code>HTML</code>内容的发送</p></blockquote><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">从 django.core.mail 导入 send_mail </span><br><span class="line">def  send_email （请求）：    </span><br><span class="line">     subject = <span class="comment">'邮件测试'</span></span><br><span class="line">     message = <span class="comment">'<span class="doctag">&lt;a href="http://www.python.org"&gt;</span>学习Python，我很快乐<span class="doctag">&lt;/a&gt;</span>'</span></span><br><span class="line">     send_mail（</span><br><span class="line">        subject = subject，</span><br><span class="line">        message = <span class="comment">''，＃该参数为必须参数，必须填写</span></span><br><span class="line">         html_message =消息，</span><br><span class="line">        from_email =<span class="comment">'from@qq.com'，</span></span><br><span class="line">        收件人列表= [ <span class="comment">'recv@qq.com'，'recv1 @ qq。 com' ] </span></span><br><span class="line">    ）返回 HttpResponse（<span class="comment">'Down'）</span></span><br></pre></td></tr></table></figure><blockquote><p>发送<code>html</code>格式邮件还可以使用<code>django.core.mail</code>模块下的<code>EmailMultiAlternatives</code>类进行邮件体的构造，然后进行邮件发送</p></blockquote><ul><li><p><code>EmailMultiAlternatives(subject=&#39;&#39;, body=&#39;&#39;, from_email=None, to=None)</code></p><blockquote><p><code>subject</code>：邮件标题</p><p><code>body</code>：邮件内容</p><p><code>from_email</code>：邮件发送者</p><p><code>to</code>：邮件接收人列表</p></blockquote></li><li><p><code>EmailMultiAlternatives.attach_alternative(content, mimetype)</code></p><blockquote><p>向<code>EmailMultiAlternatives</code>实例中添加<code>mimetype</code>支持的邮件内容</p><p><code>content</code>：添加的邮件内容</p><p><code>mimetype</code>：添加内容的<code>mime</code>类型</p></blockquote></li><li><p><code>EmailMultiAlternatives.send()</code></p><blockquote><p>发送邮件</p></blockquote></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">从 django.core.mail 导入 <span class="type">EmailMultiAlternatives</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">send_email</span> <span class="title">（请求）：</span></span></span><br><span class="line"><span class="function">     <span class="title">subject</span> </span>= '邮件测试'</span><br><span class="line">     text_message = '学习<span class="type">Python</span>，我很快乐'</span><br><span class="line">     html_message = '&lt;a href=<span class="string">"http://www.python.org"</span>&gt;学习<span class="type">Python</span>，我很快乐&lt;/a&gt;'</span><br><span class="line">     email = <span class="type">EmailMultiAlternatives</span>（</span><br><span class="line">        subject = subject，</span><br><span class="line">        body = text_message，</span><br><span class="line">        from_email =<span class="symbol">'1747266529</span><span class="meta">@qq</span>.com'，收件人</span><br><span class="line">         = [ <span class="symbol">'recv</span><span class="meta">@qq</span>.com'，<span class="symbol">'recv1</span><span class="meta">@qq</span>.com' ] </span><br><span class="line">    ）</span><br><span class="line">    email.attach_alternative（html_message，<span class="symbol">'text</span> / html'）＃添加<span class="type">HTML</span>邮件部分</span><br><span class="line">    email.send（）＃发送邮件返回 <span class="type">HttpResponse</span>（<span class="symbol">'Dow</span>n'）</span><br></pre></td></tr></table></figure><h3 id="发送富文本邮件"><a href="#发送富文本邮件" class="headerlink" title="发送富文本邮件"></a>发送富文本邮件</h3><blockquote><p>经常需要我们在邮件中加入图片等静态资源</p><p>需要用到<code>python</code>中<code>email.mime.image</code>模块下的<code>MIMEImage</code>类进行图片内容的构造</p><p>这里发送邮件使用<code>EmailMessage</code>类，来自于<code>django.core.mail</code>模块下</p><p>并在使用对应该类实例的<code>attach</code>添加图片资源数据</p><p>最后使用实例的<code>send</code>函数发送邮件</p></blockquote><ul><li><p><code>EmailMessage(subject=&#39;&#39;, body=&#39;&#39;, from_email=None, to=None)</code></p><blockquote><p>``subject`：邮件标题</p><p><code>body</code>：邮件内容</p><p><code>from_email</code>：邮件发送者</p><p><code>to</code>：邮件接收人列表</p></blockquote></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">从 sendmailpro.settings 导入 STATICFILES_DIRS </span><br><span class="line">进口 OS </span><br><span class="line">从 email.mime.image 进口 MIMEImage </span><br><span class="line">从 django.core.mail 进口 EmailMessage </span><br><span class="line">DEF  SEND_EMAIL （请求）：</span><br><span class="line">     受试者= <span class="string">'图片邮件测试'</span></span><br><span class="line">     file_1 = os.path.<span class="keyword">join</span>（STATICFILES_DIRS [ <span class="number">0</span> ]，<span class="string">'img / 1.png'</span>）以 <span class="keyword">open</span>（file_1，<span class="string">'rb'</span>）作为 fp：＃：第一张图片         image_1 = MIMEImage（fp.<span class="keyword">read</span>（））    file_2 = os.path.<span class="keyword">join</span>（STATICFILES_DIRS [ <span class="number">0</span> ]，<span class="string">' img / 2.png'</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">），以 <span class="keyword">open</span>（file_2，<span class="string">'rb'</span>）<span class="keyword">as</span> fp：＃：第二张图片         image_2 = MIMEImage（fp.<span class="keyword">read</span>（））    body = “ &lt;img src =<span class="string">'cid：first_id'</span>&gt; &lt;br&gt; &lt;img src =<span class="string">' cid：sec_id'</span>&gt;“ ＃发送邮件主体内容 image_1.add_header（<span class="string">'Content-ID'</span>，<span class="string">'&lt;％s&gt;'</span>％<span class="string">'first_id'</span>）＃通过CID对称图片在邮件内容中的位置     image_2.add_header（<span class="string">'Content- ID'</span>，<span class="string">'&lt;％s&gt;'</span>％<span class="string">'sec_id'</span>）    message = EmailMessage（＃构建发送的邮件主体                 subject = subject，                body = body，                from_email =<span class="string">'from@qq.com'</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">，</span><br><span class="line">                <span class="keyword">to</span> = [ <span class="string">'recv@qq.com'</span>，<span class="string">'recv1@qq.com'</span> ] </span><br><span class="line">            ）</span><br><span class="line">    message.content_subtype = <span class="string">'</span></span><br><span class="line"><span class="string">     html'</span>message.attach（image_1）＃添加两张图片的</span><br><span class="line">     message.attach（image_2）</span><br><span class="line">    message.send（）＃发送邮件返回 HttpResponse（<span class="string">'Down'</span>）</span><br></pre></td></tr></table></figure><h3 id="发送附件邮件"><a href="#发送附件邮件" class="headerlink" title="发送附件邮件"></a>发送附件邮件</h3><blockquote><p>发送附件，也可以使用<code>django.core.mail</code>模块下的<code>EmailMessage</code>类进行附件邮件体构造</p><p>通过<code>EmailMessage</code>实例的<code>attach|attach_file</code>两个函数在邮件主体中添加附件内容</p><p><code>attach_file</code>添加邮件附件直接加入路径即可，但是<code>attach</code>添加附件内容需要提供附件内容</p></blockquote><ul><li><p><code>attach(filename=None, content=None, mimetype=None)</code></p><blockquote><p>添加附件内容</p></blockquote><blockquote><p><code>filename</code>：附件文件名称</p><p><code>content</code>：附件内容</p><p><code>mimetype</code>：附件的<code>MIME</code>类型</p></blockquote></li><li><p><code>attach_file(path, mimetype=None)</code></p><blockquote><p>直接通过路径添加附件</p></blockquote><blockquote><p><code>path</code>：附件路径</p><p><code>mimetype</code>：附件的<code>MIME</code>类型</p></blockquote></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">从 sendmailpro<span class="selector-class">.settings</span> 导入 STATICFILES_DIRS </span><br><span class="line">进口 OS </span><br><span class="line">从 email<span class="selector-class">.mime</span><span class="selector-class">.image</span> 进口 MIMEImage </span><br><span class="line">从 django<span class="selector-class">.core</span><span class="selector-class">.mail</span> 进口 EmailMessage </span><br><span class="line">DEF  SEND_EMAIL （请求）：</span><br><span class="line">     受试者= <span class="string">'附件邮件测试'</span></span><br><span class="line">     电子邮件= EmailMessage（</span><br><span class="line">        受试者=受试者</span><br><span class="line">        身体= “这是一篇具有图片附件的邮件”，</span><br><span class="line">        from_email = <span class="string">'from@qq.com'</span>，</span><br><span class="line">        to = [ <span class="string">'recv@qq.com'</span>，<span class="string">'recv1@qq.com'</span> ] </span><br><span class="line">    ）</span><br><span class="line">    file_1 = os<span class="selector-class">.path</span><span class="selector-class">.join</span>（STATICFILES_DIRS [ <span class="number">0</span>]，<span class="string">'img / 1.png'</span>）</span><br><span class="line">    image_1 =打开（file_1，<span class="string">'rb'</span>）.read（）</span><br><span class="line">    email.attach（<span class="string">'1.png'</span>，image_1，<span class="string">'image / png'</span>）＃使用attach实例函数添加附件内容</span><br><span class="line"></span><br><span class="line">    file_2 = os<span class="selector-class">.path</span><span class="selector-class">.join</span>（STATICFILES_DIRS [ <span class="number">0</span> ]，<span class="string">'img /     2.png '</span>）</span><br><span class="line">email.attach_file（file_2，mimetype = <span class="string">'image / png'</span>）＃使用attach_file实例函数添加附件路径</span><br><span class="line"></span><br><span class="line">    email.send（）返回 HttpResponse（<span class="string">'Down'</span>）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HayStack全文检索在Django中应用</title>
      <link href="/2019/10/21/HayStack%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%9C%A8Django%E4%B8%AD%E5%BA%94%E7%94%A8/"/>
      <url>/2019/10/21/HayStack%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%9C%A8Django%E4%B8%AD%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><p><a href="https://django-haystack.readthedocs.io/en/v2.4.1/tutorial.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>全文检索就是针对所有内容进行动态匹配搜索的概念</p><p>针对特定的关键词进行<strong>建立索引</strong>并<strong>精确匹配</strong>取出搜索结果，并且达到性能优化的目的</p></blockquote><ul><li>为啥要有全文检索</li></ul><blockquote><p>最常见的全文检索就是我们在数据库中进行的模糊查询</p><p>但是模糊查询是针对整体内容的一个动态匹配过程，在数据量较大的情况下匹配效率极低</p><p>常规项目中数据量一般都比较多并且内容繁杂，所以正常的项目搜索功能中很少会使用模糊查询进行操作</p><p>如果你开发的项目用户量较少并且项目数据较少，那么此时模糊查询可以是你值得考虑的选项</p></blockquote><a id="more"></a><!-- # HayStack全文检索在Django中应用 发表于 1990-01-12 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><ul><li><code>django</code>使用啥进行全文检索</li></ul><blockquote><p><code>Python</code>提供了各种模块进行全文检索，最常见的是<code>haystack</code>模块</p><p>该模块设计为支持<code>whoosh</code>、<code>solr</code>、<code>Xapian</code>、<code>Elasticsearch</code>四种全文检索引擎后端</p><p>使用<code>haystack</code>模块，不用更改代码，直接切换引擎，可以极大的减少代码量</p><p><code>haystack</code>属于一种<strong>全文检索</strong>的框架</p></blockquote><hr><ul><li><strong>whoosh</strong></li></ul><blockquote><p>纯<code>Python</code>编写的全文搜索引擎，是目前最快的<code>python</code>所编写的检索引擎，虽然性能比不上<code>solr</code>、<code>Xapian</code>、<code>Elasticsearch</code>等；但是无二进制包，程序不会莫名其妙的崩溃，对于小型的站点，<code>whoosh</code>已经足够使用</p></blockquote><ul><li><strong>solr</strong></li></ul><blockquote><p><code>Solr</code>是一个高性能，采用<code>Java5</code>开发，基于<code>Lucene</code>的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎</p><p><code>Lucene</code>：不是一个完整的<strong>全文检索引擎</strong>，是一个全文检索引擎的<strong>架构</strong>，提供了完整的查询引擎和索引引擎，<code>Lucene</code>的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能</p></blockquote><ul><li><strong>Xapian</strong></li></ul><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Xapian`是一个用`C++`编写的全文检索程序，他的作用类似于`Java`的`lucene</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>Elasticsearch</strong></li></ul><blockquote><p><code>ElasticSearch</code>是一个基于<code>Lucene</code>的搜索服务器它提供了一个分布式多用户能力的全文搜索引擎，基于<code>RESTful web</code>接口</p><p><code>Elasticsearch</code>是用Java开发的，并作为<code>Apache</code>许可条款下的开放源码发布，是当前流行的企业级搜索引擎。该引擎常设计用于云计算中；能够达到<strong>实时搜索</strong>，<strong>稳定</strong>，<strong>可靠</strong>，<strong>快速</strong>，<strong>安装</strong>使用方便</p></blockquote><h3 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h3><blockquote><p><code>whoosh</code>作为一个全文搜索引擎模块</p><p>分词功能和检索功能已经非常强大，但是针对中文的处理还是比较欠缺</p><p>可以通过<code>Jieba</code>模块重写分词操作，支持<code>whoosh</code>对中文的强大操作</p></blockquote><ul><li>安装中文分词模块</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> jieba</span><br></pre></td></tr></table></figure><ul><li><p>除了<code>jieba</code>分词，现在还有很多付费的中文分词模块</p><blockquote><p><a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="noopener">中科院计算所NLPIR</a></p><p><a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener"><code>ansj</code>分词器</a></p><p><a href="https://github.com/HIT-SCIR/ltp" target="_blank" rel="noopener">哈工大的<code>LTP</code></a></p><p><a href="https://github.com/thunlp/THULAC" target="_blank" rel="noopener">清华大学<code>THULAC</code></a></p><p><a href="https://nlp.stanford.edu/software/segmenter.shtml" target="_blank" rel="noopener">斯坦福分词器</a></p><p><a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener"><code>Hanlp</code>分词器</a></p><p><a href="https://github.com/yanyiwu/cppjieba" target="_blank" rel="noopener">结巴分词</a></p><p><a href="https://github.com/koth/kcws" target="_blank" rel="noopener"><code>KCWS</code>分词器(字嵌入<code>+Bi-LSTM+CRF</code>)</a></p><p><a href="https://github.com/frcchang/zpar/releases" target="_blank" rel="noopener"><code>ZPar</code></a></p><p><a href="https://github.com/wks/ik-analyzer" target="_blank" rel="noopener"><code>IKAnalyzer</code></a></p></blockquote></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>首先安装<code>HayStack</code>框架以及<code>whoosh</code>搜索引擎</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django-haystack</span><br><span class="line">pip <span class="keyword">install</span> whoosh</span><br></pre></td></tr></table></figure><h3 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h3><ul><li>添加<code>haystack</code>应用到项目的<code>settings</code>文件下的<code>app</code>部分</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = <span class="meta">[</span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line"><span class="params">...</span></span><br><span class="line">    <span class="string">'haystack'</span>,</span><br><span class="line"><span class="meta">]</span></span><br></pre></td></tr></table></figure><ul><li>添加搜索引擎，这里使用<code>whoosh</code>引擎</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="string">'PATH'</span>: os<span class="selector-class">.path</span><span class="selector-class">.join</span>(BASE_DIR, <span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#这里使用django的信号机制，在数据表发生改动时自动更新whoosh的查询索引</span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure><blockquote><p>这里要注意的是，我们使用的引擎为<code>whoosh_cn_backend</code></p><p>本身的<code>whoosh</code>引擎名为：<code>whoosh_backend</code></p><p><code>whoosh_cn_backend</code>将在接下来我们对安装目录下的引擎文件复制修改得来</p></blockquote><ul><li>在项目的路由文件下配置查询的路由映射</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="keyword">include</span>,re_path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, <span class="keyword">admin</span>.site.urls),</span><br><span class="line">    re_path(<span class="string">'^search/'</span>,<span class="keyword">include</span>(<span class="string">'haystack.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>当查询条件被提交时，会跳转至<code>search</code>路由</p><p>并且查询条件会作为<code>get</code>请求时的连接参数传入，参数<code>key</code>值为<code>q</code></p></blockquote><h3 id="创建索引文件"><a href="#创建索引文件" class="headerlink" title="创建索引文件"></a>创建索引文件</h3><ul><li>接下来，在需要被搜索的<code>app</code>下建立<code>search_indexes.py</code>文件，该文件名不许变更</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 用户表</span></span><br><span class="line">    name = models.CharField(</span><br><span class="line">        max_length=<span class="number">50</span>,</span><br><span class="line">        verbose_name=<span class="string">'昵称'</span></span><br><span class="line">        )</span><br><span class="line">    account = models.CharField(max_length=<span class="number">50</span>,verbose_name=<span class="string">'账号'</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    passwd = models.CharField(max_length=<span class="number">50</span>,verbose_name=<span class="string">'密码'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="comment">#app.search_indexes.py</span></span><br><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> models.User <span class="comment"># 当前模型文件下需要被检索的模型类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure><blockquote><p>该类为索引类，类名为模型类的名称<code>+Index</code>：比如模型类为<code>People</code>,则这里类名为<code>PeopleIndex</code></p><p><code>get_model</code>函数用来获取当前索引类所关联的模型类，这里我们关联上面的<code>User</code> 类对象</p><p><code>text=indexes.CharField</code>语句指定了将模型类中的哪些字段建立索引，而<code>use_template=True</code>说明后续我们将通过一个<strong>数据模板</strong>文件来指明需要检索的字段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="attribute">document</span>=<span class="literal">True</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>为什么要创建索引：索引就像是一本书的目录，可以为读者提供更快速的导航与查找</p></blockquote><h3 id="创建模板数据文件"><a href="#创建模板数据文件" class="headerlink" title="创建模板数据文件"></a>创建模板数据文件</h3><ul><li>创建数据模板文件</li></ul><blockquote><p>数据模板文件路径：<code>templates/search/indexes/yourapp/note_text.txt</code></p><p>放在任何一个你的<code>Django</code>能搜索到的模板文件夹<code>template</code>下面均可，这个文件主要确定要检索的字段，为他们建立索引</p><p>文件名必须为要索引的类名<code>_text.txt</code>，比如这里我们检索的类名是<code>User</code>，那么对应的数据模板文件名为<code>user_text.txt</code>，文件名小写即可</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#template</span><span class="selector-class">.search</span><span class="selector-class">.indexes</span><span class="selector-class">.people</span><span class="selector-class">.user_text</span><span class="selector-class">.txt</span></span><br><span class="line">&#123;&#123; <span class="selector-tag">object</span><span class="selector-class">.name</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="selector-tag">object</span><span class="selector-class">.account</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="selector-tag">object</span><span class="selector-class">.online_time</span> &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在数据模板文件中使用模板语法，写入需要建立索引的字段，这里我们将模型类中<code>name</code>、<code>account</code>以及<code>online_time</code>字段设置索引，当检索时会对这三个字段去做全文检索</p></blockquote><blockquote><p>接下来创建一个搜索结果展示页面</p></blockquote><h3 id="检索结果模板页面"><a href="#检索结果模板页面" class="headerlink" title="检索结果模板页面"></a>检索结果模板页面</h3><ul><li>创建检索结果展示页面</li></ul><blockquote><p>检索结果展示页面，需要在固定的目录路径下进行模板页面的编写</p><p>路径为：<code>templates/search/</code></p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> query %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>搜索结果如下：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> result <span class="keyword">in</span> page.object_list %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; result.object.name &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; result.object.account &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; result.object.online_time &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">empty</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>没找到<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.has_previous or page.has_next %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.has_previous %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=</span></span></span><span class="template-variable">&#123;&#123; query &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;amp;page=</span></span></span><span class="template-variable">&#123;&#123; page.previous_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            上一页</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.has_next %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=</span></span></span><span class="template-variable">&#123;&#123; query &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;amp;page=</span></span></span><span class="template-variable">&#123;&#123; page.next_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            下一页</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这个模板页面中已经自带了分页功能，可以按照需求修改</p></blockquote><ul><li>创建检索模板页面内容</li></ul><blockquote><p>还需要有一个表单，提交检索信息</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="keyword">method</span>=<span class="string">'get'</span> action="/search/" &gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="text" <span class="type">name</span>="q"&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="查询"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这部分检索的模板页面内容可以在你的项目中进行添加，查询方式为<code>get</code>，并且检索输入的表单框<code>name</code>属性必须为<code>q</code></p></blockquote><h3 id="中文分词配置"><a href="#中文分词配置" class="headerlink" title="中文分词配置"></a>中文分词配置</h3><ul><li>接下来，需要创建有关中文检索的配置文件，这里的配置文件创建为全局</li></ul><blockquote><p>进入到<code>python</code>的安装目录下，比如我的目录为：<code>C:\Python37\Lib\site-packages\haystack\backends</code></p><p>在该路径下创建名为<code>ChineseAnalyzer.py</code>的中文分词文件</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis import Tokenizer, Token</span><br><span class="line"></span><br><span class="line">class ChineseTokenizer(Tokenizer):</span><br><span class="line">    def __call__(self, value, <span class="attribute">positions</span>=<span class="literal">False</span>, <span class="attribute">chars</span>=<span class="literal">False</span>,</span><br><span class="line">                 <span class="attribute">keeporiginal</span>=<span class="literal">False</span>, <span class="attribute">removestops</span>=<span class="literal">True</span>,start_pos=0, <span class="attribute">start_char</span>=0, <span class="attribute">mode</span>=<span class="string">''</span>, **kwargs):</span><br><span class="line">        t = Token(positions, chars, <span class="attribute">removestops</span>=removestops, <span class="attribute">mode</span>=mode, **kwargs)</span><br><span class="line">        seglist = jieba.cut(value, <span class="attribute">cut_all</span>=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = 1.0</span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.<span class="builtin-name">find</span>(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.<span class="builtin-name">find</span>(w)</span><br><span class="line">                t.endchar = start_char + value.<span class="builtin-name">find</span>(w) + len(w)</span><br><span class="line">            yield t</span><br><span class="line"></span><br><span class="line">def ChineseAnalyzer():</span><br><span class="line">    return ChineseTokenizer()</span><br></pre></td></tr></table></figure><blockquote><p>在这个文件中，定义了一个<code>ChineseAnalyzer</code>的函数，这个函数将替代搜索引擎配置文件中的分词方式</p></blockquote><ul><li>复制引擎文件，修改分词方式为中文</li></ul><blockquote><p>同样在该文件夹下<code>C:\Python37\Lib\site-packages\haystack\backends</code>，复制<code>whoosh_backend.py</code>文件，创建一个新的文件名为<code>whoosh_cn_backend.py</code>，这里复制出一份文件也是为了之后如果不需要使用中文分词，可以直接在<code>settings</code>配置文件中修改引擎为<code>&#39;ENGINE&#39;:&#39;haystack.backends.whoosh_backend.WhooshEngine&#39;,</code></p></blockquote><blockquote><p>修改该引擎配置文件中的：<code>analyzer=StemmingAnalyzer()</code>变为<code>analyzer=ChineseAnalyzer()</code></p><p>并且要记得在头部引入刚才所编写的中文分词文件</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#whoosh_cn_backend</span>.py</span><br><span class="line">from <span class="selector-class">.ChineseAnalyzer</span> import ChineseAnalyzer</span><br></pre></td></tr></table></figure><h3 id="初始化索引"><a href="#初始化索引" class="headerlink" title="初始化索引"></a>初始化索引</h3><ul><li>最后，初始化索引数据</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> rebuild_index</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tinymce富文本编辑器</title>
      <link href="/2019/10/21/Tinymce%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/10/21/Tinymce%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="图文混排"><a href="#图文混排" class="headerlink" title="图文混排"></a>图文混排</h2><blockquote><p>在某些富文本编辑器中，我们可以支持文件与图片的同时编写，将文字与图片混合排列</p><p>在<code>django</code>中可以使用<code>TimyMce</code>富文本编辑器进行图文混排功能的实现</p></blockquote><h3 id="TinyMce"><a href="#TinyMce" class="headerlink" title="TinyMce"></a>TinyMce</h3><blockquote><p><code>TinyMCE</code>：是一个轻量级的基于浏览器的所见即所得编辑器，支持目前流行的各种浏览器，由<code>JavaScript</code>写成</p><p>功能配置灵活简单，两行代码就可以将编辑器嵌入网页中，并且支持<code>AJAX</code>，加载速度非常快</p><p>最重要的是，<code>TinyMCE</code>是一个根据<code>LGPL license</code>发布的自由软件，你可以把它用于商业应用。下图是此编辑器的界面</p></blockquote><h3 id="配置上传路径"><a href="#配置上传路径" class="headerlink" title="配置上传路径"></a>配置上传路径</h3><blockquote><p>首先配置整个项目的上传文件路径，为了区别与自身的<code>static</code>静态目录</p><p>这里的上传文件我们将另外保存至<code>upload</code>文件夹</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-id">#settings</span>.py</span><br><span class="line">&gt; UPLOAD_ROOT = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(BASE_DIR,<span class="string">'upload'</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><a id="more"></a><!-- > # Tinymce富文本编辑器>>  发表于 1990-01-13 |  分类于 [Django](https://lienze.tech/blog/categories/Django/)> --><blockquote><h3 id="配置模板页面"><a href="#配置模板页面" class="headerlink" title="配置模板页面"></a>配置模板页面</h3><blockquote><p>首先需要在使用到<code>tinymce</code>富文本编辑器的<code>html</code>页面下导入必备<code>js</code>文件</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'js/jquery-1.10.2.min.js' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'js/tinymce_setup.js' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; </span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'tinymce/js/tinymce/tinymce.min.js' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>接下来，在模板页面中加入一个<code>id</code>为<code>content</code>的输入表单，这里我们以一个文章数据为例</p></blockquote><ul><li>首先是模型层文件定义</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; #models.py </span><br><span class="line">&gt; <span class="keyword">class</span> <span class="constructor">Article(<span class="params">models</span>.Model)</span>:</span><br><span class="line">&gt;     title = models.<span class="constructor">CharField(<span class="params">max_length</span>=100,<span class="params">verbose_name</span>='标题')</span></span><br><span class="line">&gt;     author = models.<span class="constructor">CharField(<span class="params">max_length</span>=100,<span class="params">verbose_name</span>='作者')</span></span><br><span class="line">&gt;     content = models.<span class="constructor">TextField(<span class="params">verbose_name</span>='内容')</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>这里的<code>content</code>内容要用到富文本编辑器</p></blockquote><ul><li>接着是模板页面的主要部分</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> &lt;form method=<span class="string">"POST"</span> action=<span class="string">'/'</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &#123;% csrf_token %&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"文章标题"</span>&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;br&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"文章作者"</span>&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;br&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;input id=<span class="string">"rich_content"</span> name=<span class="string">"content"</span> value=<span class="string">" "</span>&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;br&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &lt;/form&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="修改插件配置"><a href="#修改插件配置" class="headerlink" title="修改插件配置"></a>修改插件配置</h3><blockquote><p>这里搭配了一个<code>tinymce_setup.js</code>文件，用来控制富文本编辑器所使用的插件等</p><p>全文配置如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> tinymce.init(&#123;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 选择id为content的标签作为编辑器</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     selector: <span class="string">'#rich_content'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 方向从左到右</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     directionality:<span class="string">'ltr'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 语言选择中文</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     language:<span class="string">'zh_CN'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 高度为400 宽度为一半</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     height:300,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     width: <span class="string">'50%'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 工具栏上面的补丁按钮</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     plugins: [</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             <span class="string">'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             <span class="string">'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             <span class="string">'save table contextmenu directionality template paste textcolor'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             <span class="string">'codesample imageupload'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     ],</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 工具栏的补丁按钮</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      toolbar: <span class="string">'insertfile undo redo | \</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      styleselect | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      bold italic | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      alignleft aligncenter alignright alignjustify | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      bullist numlist outdent indent | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      link image | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      <span class="built_in">print</span> preview media fullpage | \</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      forecolor backcolor emoticons |\</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      codesample fontsizeselect fullscreen |\</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      imageupload<span class="string">',</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 字体大小</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     fontsize_formats: <span class="string">'10pt 12pt 14pt 18pt 24pt 36pt'</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 按tab不换行</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     nonbreaking_force_tab: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     imageupload_url: <span class="string">"/upload_img/"</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     // 上传后图片保存为绝对路径</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     relative_urls : <span class="literal">false</span>,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>注释已经很清晰</p><p>要注意的是<code>imageupload_url</code>配置用来确定当前图片上传所对应的视图路由</p></blockquote><h3 id="上传视图配置"><a href="#上传视图配置" class="headerlink" title="上传视图配置"></a>上传视图配置</h3><blockquote><p>接下来编写富文本编辑器的上传图片路由函数及对应的路由配置</p><p>路由映射<code>tinymce_setup.js</code>与中的<code>imageupload_url</code>配置路由相同</p><p>这里还要注意，由于此时<code>tinymce</code>的上传图片表单并不是和本身所容纳的<code>form</code>表单一起上传，所以并不会具备<code>csrf_token</code>值，需要我们将上传图片的函数额外进行装饰器装饰，取消<code>csrf_token</code>验证</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#views.py</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> from django.views.decorators.csrf import csrf_exempt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> def md5(str_):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     import time</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     m = hashlib.md5()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     m.update(str(time.time()).encode())</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     filename = m.hexdigest()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="built_in">return</span> filename + <span class="string">'.'</span> + str_.split(<span class="string">'.'</span>)[-1]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> @csrf_exempt</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> def upload_img(request):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         img = request.FILES.get(<span class="string">'file'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         <span class="keyword">if</span> img:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             file_name_md5 = md5(img.name)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             with open(os.path.join(UPLOAD_ROOT,file_name_md5), <span class="string">'wb'</span>) as fp:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                 <span class="keyword">for</span> buf <span class="keyword">in</span> img.chunks():</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                     fp.write(buf)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">                 <span class="comment"># 迭代读取文件并写入到本地</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         response = &#123;&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         response[<span class="string">'path'</span>] = <span class="string">'/upload/'</span> + file_name_md5</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         response[<span class="string">'error'</span>] = False</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         <span class="built_in">return</span> HttpResponse(json.dumps(response))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>视图函数还是老样子去接收上传文件并保存即可</p><p>这里还使用了<code>md5</code>的方式进行文件名保存，避免重名文件上传互相覆盖</p></blockquote><ul><li>路由配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#urls.py</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> path(<span class="string">'upload_img/'</span>,views.upload_img),</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="表单接收视图"><a href="#表单接收视图" class="headerlink" title="表单接收视图"></a>表单接收视图</h3><blockquote><p>以上的视图函数只能处理上传图片的内容接收</p><p>我们的模板页面中还有作者及标题两样表单内容会被<code>POST</code>提交到后台</p><p>并且要主要的是，富文本编辑器里除了图片的内容，还有文字等其他内容，这里也需要我们保存下来</p></blockquote><ul><li>这里还需要一个视图函数去接管处理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> def index(request):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         <span class="built_in">return</span> render(request, <span class="string">'index.html'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         title = request.POST.get(<span class="string">'title'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         author = request.POST.get(<span class="string">'author'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         content = request.POST.get(<span class="string">'content'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         models.Article.objects.create(</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             title = title,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             author = author,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">             content = content,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         <span class="built_in">return</span> redirect(<span class="string">'/show/'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>表单路由</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#urls.py</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> path(<span class="string">''</span>,views.index),</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>这里上传之后，保存在后台的<code>content</code>数据是这个样子</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/upload/ec8f8c9a56ed32464a6727741fd58d8d.png"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>今天<span class="tag">&lt;<span class="name">em</span>&gt;</span>一切<span class="tag">&lt;/<span class="name">em</span>&gt;</span>都是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>美丽<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>的，哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="图片访问路由"><a href="#图片访问路由" class="headerlink" title="图片访问路由"></a>图片访问路由</h3><blockquote><p>当有了上传图片的视图函数及所有内容的接收视图函数</p><p>这里还有一个特殊的问题，现在如果在富文本编辑器中选择上传图片，你会发现图片已经在选择时就已经存储到了后台<code>upload</code>文件夹下，这也是为什么我们的图片上传视图函数要单独编写，并且还需要取消<code>csrf_token</code>的验证的原因</p></blockquote><blockquote><p>除了这个问题你还会发现，在富文本编辑器中，上传的图片是看不到的，是一个坏掉的图片；</p><p>使用<code>F12</code>开发者工具你可以看到，这里的图片展示为一个<code>img</code>标签，而标签的<code>src</code>属性内容正是通过上传视图函数返回的<code>response</code>中的<code>path</code>值</p><p>想让这个<code>path</code>值在访问时，能获取到实际的图片效果，需要我们在路由文件中继续配置，配置专门的<code>upload/xxxx.jpg</code>的图片路由访问，让图片真正展示出来</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-id">#urls</span>.py</span><br><span class="line">&gt; from django<span class="selector-class">.views</span><span class="selector-class">.static</span> import serve</span><br><span class="line">&gt; re_path(<span class="string">'^upload/(?P&lt;path&gt;.*)/$'</span>,serve,&#123;<span class="string">'document_root'</span>:UPLOAD_ROOT&#125;),</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>上传后图片的访问路径是<code>/upload/</code>，那么这里的路由也是<code>upload/</code>，之后通过静态文件映射函数<code>serve</code>查找<code>upload</code>文件夹下的同路径同名图片资源</p><p>当有了这条路由配置之后，再次再富文本编辑器中加入图片，你就会发现图片出现啦</p></blockquote><h3 id="上传并展示"><a href="#上传并展示" class="headerlink" title="上传并展示"></a>上传并展示</h3><blockquote><p>最后，我们将测试上传图片及文字</p><p>并且上传成功之后，重定向到<code>show</code>视图函数</p></blockquote><ul><li>这个视图函数用来提取当前最新的上传数据并返回到模板页面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#views.py</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> def show(request):</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         article = models.Article.objects.all().last()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         <span class="built_in">return</span> render(request,<span class="string">'show.html'</span>,locals())</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>展示的模板页面</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&gt; <span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示文章<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> article %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&gt;         <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; article.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;         <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><span class="template-variable">&#123;&#123; article.author &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123; article.content|<span class="name">safe</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>其实本身富文本编辑器上传的文本内容就已经在一个<code>p</code>标签中，所以这里没有用段落标签</p><p>另外由于保存在数据库的文本为<code>html</code>格式，而后台传递来的模板变量<code>django</code>出于安全考虑会自动进行转义，直接观看到的效果不会<code>html</code>样式，只是一些普通字符串；</p><p>这里可以使用<code>safe</code>过滤器将内容认定为安全，展示为原始的<code>html</code>效果，其实还不错</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>富文本编辑器其实就是将用户输入的内容变为<code>html</code>代码</p><p>这里的图文混排，只是在图片加入时，单独将图片上传保存，并且回调获取到上传的路径</p><p>之后只需要服务端后台配置好相关的上传图片访问路由配置即可</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django缓存系统</title>
      <link href="/2019/10/21/Django%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/10/21/Django%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p><code>Django</code> 是动态<code>Web</code>后台框架，需要实时生成用户访问的页面，进行多次的数据库操作，但是多次的数据库访问操作对于整个<code>Web</code>系统来说，会影响效率，尤其是当访问量增大时，数据库的压力也会越来越大。</p><p>相对于磁盘及内存操作，数据库的访问操作付出的成本要大的多</p></blockquote><a id="more"></a><!-- # Django缓存系统 发表于 1990-01-14 |  分类于 [Django](https://lienze.tech/blog/categories/Django/) --><blockquote><p>浏览器第一次请求时，<code>cache</code>会缓存单个变量或整个网页等内容到硬盘或者内存中，同时设置<code>response</code>头部</p><p>当浏览器再次发起请求时，会与缓存中的过期时间相比较，如果缓存时间比较新，则会重新请求数据，并缓存起来然后返回<code>response</code>给客户端，如果缓存没有过期，则直接从缓存中提取数据，返回给<code>response</code>给客户端</p></blockquote><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; HTTP`协议头`Cache-Control`，`Cache-Control`与`Expires`的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过`Cache-Control`的选择更多，设置更细致，如果同时设置的话，其优先级高于`Expires</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在<code>python</code>中使用<code>memcached</code>需要我们额外安装<code>memcached</code>作为<code>memcache</code>客户端的支持</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-memcached -<span class="selector-tag">i</span> https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><h3 id="Cache设置"><a href="#Cache设置" class="headerlink" title="Cache设置"></a>Cache设置</h3><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><ul><li><p>安装<code>memcached</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> memcached <span class="comment"># debian</span></span><br><span class="line">yum <span class="keyword">install</span> memcached <span class="comment"># centos</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件：<code>/etc/memcached.conf</code></p><blockquote><p>配置文件中有两个可能需要修改的参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-m <span class="number">64</span> #memcached所能使用的内存大小</span><br><span class="line">-l <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> #监听的IP地址</span><br></pre></td></tr></table></figure></li><li><p>开启|关闭<code>memcached</code>服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> memcached <span class="comment"># 开启</span></span><br><span class="line">systemctl <span class="literal">stop</span> memcached <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure></li><li><p>查看服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl status memcached</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="settings配置"><a href="#settings配置" class="headerlink" title="settings配置"></a>settings配置</h4><blockquote><p>使用<code>memcached</code>缓存，首先需要在项目的<code>settings</code>文件下进行配置</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    'default': &#123;</span><br><span class="line">        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',  </span><br><span class="line">        <span class="meta"># 指定缓存使用的引擎</span></span><br><span class="line">        'LOCATION':'172.16.19.26:<span class="number">1121</span>1', </span><br><span class="line">        <span class="meta"># 指定缓存服务器地址，常为本机地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="视图缓存"><a href="#视图缓存" class="headerlink" title="视图缓存"></a>视图缓存</h4><blockquote><p>可以只为某些视图函数进行缓存</p><p>使用<code>django.views.decorators.cache</code>下的装饰器<code>cache_page</code>进行视图函数装饰即可</p></blockquote><ul><li>模型类的表代码</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">People(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=20,<span class="params">verbose_name</span>='名字')</span></span><br></pre></td></tr></table></figure><ul><li>视图函数代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache_page(10) # 缓存10秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'视图函数被调用'</span>)</span><br><span class="line">    ss = models.People.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, locals())</span><br></pre></td></tr></table></figure><ul><li>模板页面代码</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> s <span class="keyword">in</span> ss %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; s.name &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在第一次刷新浏览器之后，</p><p>立即在数据库中添加一个新的数据对象</p><p>接着继续刷新浏览器，前端页面将会读取缓存中的结果，而不会显示刚才添加的用户</p></blockquote><blockquote><p>除了在视图函数上使用装饰器进行缓存设置，还可以在路由匹配部分使用相同装饰器函数进行设置</p></blockquote><h4 id="全站缓存"><a href="#全站缓存" class="headerlink" title="全站缓存"></a>全站缓存</h4><blockquote><p>将整站所有视图设置缓存，需要在配置文件的中间件设置首尾部分添加如下内容</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">MIDDLEWARE</span> = [</span><br><span class="line">    <span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>, <span class="comment"># 首部要添加的中间件</span></span><br><span class="line">    <span class="comment"># 将response缓存起来 </span></span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">...</span><br><span class="line">    <span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,<span class="comment"># 尾部要添加的中间件</span></span><br><span class="line">    <span class="comment"># 将缓存的response取出来</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>以及搭配设置当前全站缓存有效时间的全局变量</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CACHE_MIDDLEWARE_SECONDS</span> = <span class="number">10</span> <span class="comment"># 每页页面缓存的秒数，默认为600</span></span><br></pre></td></tr></table></figure><h4 id="局部缓存"><a href="#局部缓存" class="headerlink" title="局部缓存"></a>局部缓存</h4><blockquote><p>局部缓存主要为在模板页面，选择某个区域进行缓存，当用户再次访问相同页面时，如设置缓存未过期，则渲染时局部缓存不会重新生成</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> cache %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">局部缓存首先需要加载cache标签</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">cache</span> sec key %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endcache</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><blockquote><p>以时间模板变量为例，做一个简单的测试，后台视图函数每次在访问时，返回当前时间</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import <span class="selector-tag">time</span> </span><br><span class="line">now = <span class="selector-tag">time</span>.strftime(<span class="string">'%H:%M:%S'</span>, <span class="selector-tag">time</span>.localtime())</span><br></pre></td></tr></table></figure><blockquote><p>模板页面在使用时的代码</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> cache %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是未缓存的时间:</span><span class="template-variable">&#123;&#123; now &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">cache</span> 10 time %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是缓存的时间:</span><span class="template-variable">&#123;&#123; now &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endcache</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h4 id="手动缓存"><a href="#手动缓存" class="headerlink" title="手动缓存"></a>手动缓存</h4><blockquote><p>除了以上应用于各个业务中的缓存方式，还可以使用<code>django</code>所提供的<code>cache</code>接口进行缓存设置以及获取</p></blockquote><ul><li>设置缓存</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line">#存储缓存数据</span><br><span class="line">cache.<span class="keyword">set</span>(<span class="string">'cache_key'</span>,data,<span class="number">60</span>*<span class="number">15</span>)</span><br><span class="line">#cache_key为存储在缓存中的唯一值，data为存储的数据，<span class="number">60</span>*<span class="number">15</span>为缓存有效时间</span><br></pre></td></tr></table></figure><ul><li>获取缓存</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#获取缓存数据</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="string">'cache_key'</span>,<span class="string">'获取不到的默认值'</span>)</span><br><span class="line"><span class="meta">#cache_key为储存缓存数据的唯一值</span></span><br></pre></td></tr></table></figure><ul><li>避免<code>key</code>值重复导致更新缓存，可以使用<code>cache.add</code>函数，基本用法与<code>set</code>相同</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">status = cache.add(<span class="string">'add_key'</span>, <span class="string">'New value'</span>)</span><br><span class="line"># 当指定key值的缓存存在，add方法不会尝试更新缓存</span><br><span class="line"># 返回值status为<span class="literal">True</span>时，代表存储成功，<span class="literal">False</span>代表存储失败</span><br></pre></td></tr></table></figure><ul><li>清除缓存，通过<code>cache.delete</code>方法，该方法接收一个缓存<code>key</code>值</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache.<span class="keyword">delete</span>(<span class="string">'cache_key'</span>)</span><br></pre></td></tr></table></figure><ul><li>清空缓存，通过<code>cache.clear</code>方法，直接从缓存中清除所有</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache.<span class="built_in">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><code>memcached</code>不允许使用超过<code>250</code>个字符或包含空格或控制字符的缓存键值</p><p>使用这样的键值将会导致异常</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中的Admin组件</title>
      <link href="/2019/10/21/Django%E4%B8%AD%E7%9A%84Admin%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/10/21/Django%E4%B8%AD%E7%9A%84Admin%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h2><blockquote><p><code>Django-admin</code>界面是框架为我们提供的<code>Web-APP</code>的管理工具</p><p>在之前的练习中，我们已经多次使用它进行<code>APP</code>中表的<code>DML</code>语句操作</p><p>接下来，我们可以继续来学习，如何将<code>Admin</code>界面进行优化扩展，更加方便我们后台管理</p></blockquote><a id="more"></a><h3 id="管理员注册设置"><a href="#管理员注册设置" class="headerlink" title="管理员注册设置"></a>管理员注册设置</h3><blockquote><p>在<code>admin</code>界面中，我们可以通过继承<code>admin.ModelAdmin</code>类进行自定义<code>admin</code>类的编写，用作控制展示后台所显示的数据，以及排序规则等等属性，基本语法像是下面这样</p></blockquote><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">＃models.py </span><br><span class="line">类 用户（models.Model）：</span><br><span class="line"> 名称= models.CharField（max_length = <span class="number">20</span>）</span><br><span class="line">    age = models.IntegerField （）<span class="function"><span class="keyword">def</span> <span class="title">__str__</span> <span class="title">（self）：返回</span> <span class="title">self</span>.<span class="title">name</span></span></span><br><span class="line"><span class="function">     </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"><span class="title">＃admin</span>.<span class="title">py</span> </span></span><br><span class="line"><span class="function"><span class="title">类</span> <span class="title">UserAdmin</span> <span class="title">（admin</span>.<span class="title">ModelAdmin）：</span></span></span><br><span class="line"><span class="function">     <span class="title">字段=（</span>'<span class="title">name</span>'<span class="title">，</span>'<span class="title">age</span>'<span class="title">）＃控制管理界面模型类展示位置</span> <span class="title">admin</span>.<span class="title">site</span>.<span class="title">register（User，UserAdmin）</span></span></span><br></pre></td></tr></table></figure><h4 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h4><ul><li><p><code>list_display</code>：在<code>admin</code>控制台数据列表页面展示更多的细分</p></li><li><p><code>list_display_links</code>：用于设置当前列表中由<code>list_display</code>所设置的附加部分可以点击</p></li><li><p><code>fieldsets</code>：将<code>admin</code>界面下的表单输入栏进行分块</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类 UserAdmin （<span class="literal">admin</span>.ModelAdmin） ：</span><br><span class="line">     字段=（ <span class="string">'姓名'</span>， <span class="string">'年龄'</span>）</span><br><span class="line">    字段集=（ </span><br><span class="line">    （ <span class="string">'第一个区域'</span>，</span><br><span class="line">        &#123; <span class="string">'字段'</span>：（ <span class="string">'姓名'</span>）            &#125;        ）       （ <span class="string">'第二个区域'</span>，        &#123; <span class="string">'fields'</span>：（ <span class="string">'age'</span>，）            &#125;        ）         ）</span><br></pre></td></tr></table></figure></li><li><p><code>search_fields</code>：在<code>admin</code>数据展示页，设置一个搜索框，设置的分段是可查找的属性</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search_fields</span> =（<span class="string">'name'</span>，）</span><br></pre></td></tr></table></figure></li><li><p><code>list_filter</code>：以什么分解进行过滤，在<code>admin</code>页面上方展示</p></li><li><p><code>ordering</code>：数据列表可以通过某些细分进行排序</p></li></ul><h3 id="利用现有用户系统"><a href="#利用现有用户系统" class="headerlink" title="利用现有用户系统"></a>利用现有用户系统</h3><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> django.contrib.auth.models import User</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="用户细分"><a href="#用户细分" class="headerlink" title="用户细分"></a>用户细分</h4><ul><li><p><code>username</code></p><blockquote><p>必选。少于等于30个字符。用户名可以包含字母，数字，<code>_</code>， ，<code>@</code>，。<code>+</code>状语从句：<code>-</code>字符</p></blockquote></li><li><p><code>first_name</code></p><blockquote><p>任选。等于等于30个字符</p></blockquote></li><li><p><code>last_name</code></p><blockquote><p>可选。可以输入30个字符</p></blockquote></li><li><p><code>email</code></p><blockquote><p>任选。邮箱地址</p></blockquote></li><li><p><code>password</code></p><blockquote><p>必选。密码的哈希及元数据。（<code>Django</code>不保存原始密码）。原始密码可以无限长而且可以包含任意字符</p></blockquote></li><li><p><code>is_staff</code></p><blockquote><p>布尔值。指示用户是否可以访问<code>Admin</code>站点</p></blockquote></li><li><p><code>is_active</code></p><blockquote><p>布尔值。用户的账号是否激活。长使用这个标志为False来代替删除账号</p></blockquote></li><li><p><code>is_superuser</code></p><blockquote><p>布尔值。指定这个用户拥有所有的权限而不需要给他们分配明确的权限</p></blockquote></li><li><p><code>last_login</code></p><blockquote><p>用户最后一次登录的时间。如果这个用户没有登录过，这个细分将会是<code>null</code></p><p>之前版本默认设置为的当前的<code>datetime</code></p></blockquote></li><li><p><code>date_joined</code></p><blockquote><p>帐户创建的时间。当账号创建时，替代设置为当前的<code>datetime</code></p></blockquote></li></ul><h4 id="用户实例方法"><a href="#用户实例方法" class="headerlink" title="用户实例方法"></a>用户实例方法</h4><ul><li><p><code>get_username()</code></p><blockquote><p>获取到当前的用户的用户名属性</p></blockquote></li><li><p><code>is_authenticated()</code></p><blockquote><p>检查用户是否已通过认证</p></blockquote></li><li><p><code>is_anonymous()</code></p><blockquote><p>检查用户是否未通过认证</p></blockquote></li><li><p><code>set_password(password)</code></p><blockquote><p>设置保存用户的密码，和会负责密码的哈希加密工作</p><p>通常修改密码之后还需要调用<code>save()</code>方法进行数据更新</p></blockquote></li></ul><h4 id="用户表方法"><a href="#用户表方法" class="headerlink" title="用户表方法"></a>用户表方法</h4><ul><li><p><code>create_user(username, email=None, password=None, **extra_fields)</code></p><blockquote><p><code>django</code>的用户创建需要使用<code>User</code>表管理器中的<code>create_user</code>函数进行</p><p>该函数可以创建并保存一个用户</p></blockquote></li><li><p><code>create_superuser(username, email, password, **extra_fields)</code></p><blockquote><p>与上一个创建用户函数功能相同，但是额外会设置用户的<code>is_staff</code>及<code>is_superuser</code>属性为<code>True</code></p><p>创建一个<code>admin</code>后台超级用户</p></blockquote></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p><code>authenticate(username,password)</code></p><blockquote><p>验证是否为合法用户，如果用户存在合法则返回一个用户对象</p></blockquote></li><li><p><code>logout()</code></p><blockquote><p>清除当前浏览器下用户<code>session</code></p></blockquote></li><li><p><code>login(request,user)</code></p><blockquote><p>登录并保存当前用户<code>session</code></p><p>接受参数为<code>HttpRequest</code>请求及一个<code>User</code>用户对象</p><p>参数<code>user</code>必须为使用<code>authenticate</code>验证过后的用户对象</p></blockquote></li></ul><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><ul><li>登陆所需表单类</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">＃forms.py </span><br><span class="line">从 django的进口形式</span><br><span class="line">从 django.contrib.auth.models 导入用户</span><br><span class="line">进口重新</span><br><span class="line">类 LoginForm的（forms.Form） ：</span><br><span class="line"> 用户名= forms.CharField（标记= “用户名”，需要= 真，）</span><br><span class="line">    密码=形式。 CharField（</span><br><span class="line">        widget = forms.PasswordInput（），</span><br><span class="line">        label = <span class="string">'密码'</span>，</span><br><span class="line">        required = <span class="keyword">True</span>，</span><br><span class="line">        ）def clean_username （self）：         username = self.cleaned_data.<span class="keyword">get</span>（“ username”）.strip（）try</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        ：</span><br><span class="line">            <span class="keyword">User</span>.objects.<span class="keyword">get</span>（用户名=用户名），但 <span class="keyword">User</span>.DoesNotExist 除外：引发 Forms.ValidationError（“用户名％s不存在”％用户名）<span class="keyword">else</span>：返回用户名</span><br></pre></td></tr></table></figure><ul><li>登录所需模板页面</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">！DOCTYPE</span> <span class="attr">html</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/ <span class="attr">title</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">head</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> =<span class="string">'/ login /'</span><span class="attr">method</span> =<span class="string">“</span> <span class="attr">POST</span>”&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％csrf_token％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;错误&#125;</span><span class="xml"> &#125; </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％表示形式为％的字段&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％表示field.errors％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％表示error。％s错误&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><span class="template-variable">&#123;&#123;error&#125;</span><span class="xml">&#125; <span class="tag">&lt;/ <span class="attr">li</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endfor％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">ul</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endif％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">label</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><span class="template-variable">&#123;&#123;field.label&#125;</span><span class="xml">&#125;：</span><span class="template-variable">&#123;&#123;field&#125;</span><span class="xml">&#125; <span class="tag">&lt;/ <span class="attr">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endfor％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">“</span> <span class="attr">submit</span>” <span class="attr">value</span> =<span class="string">“登录”</span> &gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">form</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>登陆主要视图逻辑</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">＃views<span class="selector-class">.py</span> </span><br><span class="line">从 django<span class="selector-class">.contrib</span><span class="selector-class">.auth</span> 进口身份验证，注销作为 auth_logout，登录作为 auth_login </span><br><span class="line">DEF  登录（请求）：如果 request<span class="selector-class">.method</span> == <span class="string">'GET'</span> ：形式=用户窗体（）返回渲染（请求，“的login<span class="selector-class">.html</span> “，&#123; <span class="string">'form'</span>：form&#125;）<span class="selector-tag">form</span> = userForm（request.POST）    用户名= <span class="selector-tag">form</span><span class="selector-class">.data</span> [ <span class="string">'username'</span> ]     密码= <span class="selector-tag">form</span><span class="selector-class">.data</span> [ <span class="string">'password'</span> ]     user = authenticate（username = username，password = password）＃验证当前账号密码是否符合合法如果用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    和 user.is_active：</span><br><span class="line">        auth_login（请求，用户）返回 redirect（<span class="string">'/'</span>）<span class="keyword">else</span>：返回 render（request，“ login.html”，&#123; <span class="string">'form'</span>：form，<span class="string">'errors'</span>：<span class="string">'用户名或密码错误'</span> &#125; ）</span><br></pre></td></tr></table></figure><blockquote><p>在用户登录成功之后，将会重新进入主页，主页展示当前登录用户</p><p>登录用户可以直接在<code>request.user</code>属性中获取到，主页的模板内容如下</p></blockquote><ul><li>主页模板</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">！DOCTYPE</span> <span class="attr">html</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt; <span class="attr">html</span> &gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt; <span class="attr">head</span> &gt;</span> <span class="tag">&lt; <span class="attr">title</span> &gt;</span>主页<span class="tag">&lt;/ <span class="attr">title</span> &gt;</span> <span class="tag">&lt;/ <span class="attr">head</span> &gt;</span> <span class="tag">&lt; <span class="attr">body</span> &gt;</span> 欢迎你：</span><span class="template-variable">&#123;&#123;user&#125;&#125;</span><span class="xml"> <span class="tag">&lt;/ <span class="attr">body</span> &gt;</span> <span class="tag">&lt;/ <span class="attr">html</span> &gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>主页视图函数可以通过装饰器<code>@login_required</code>或判断<code>is_authenticated</code>状态来查看用户是否登录</p><p>只有登录用户可以访问该站点</p><p>使用当装饰器<code>@login_required</code>时，在需要<code>settings</code>下设置<code>LOGIN_URL = &#39;/login/&#39;</code></p><p>引入属性设置为登录路由</p></blockquote><ul><li>首页视图函数</li></ul><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从 django.contrib.auth.decorators中导入 login_required </span><br><span class="line">＃@ login_required </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">索引（请求）：如果</span> <span class="title">request</span>.<span class="title">user</span>.<span class="title">is_authenticated（）：返回</span> <span class="title">render（请求，“</span> <span class="title">index</span>.<span class="title">html”）否则：返回重定向（</span>'<span class="title">/</span> <span class="title">login</span> <span class="title">/</span>'<span class="title">）</span></span></span><br></pre></td></tr></table></figure><h4 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h4><ul><li>注册所需表单</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">＃forms.py </span><br><span class="line">类 RegisterForm （forms.Form）：</span><br><span class="line">     用户名= form.CharField（label = “用户名”，</span><br><span class="line">        max_length = <span class="number">30</span>，</span><br><span class="line">        required = <span class="keyword">True</span>，</span><br><span class="line">        error_messages = &#123; <span class="string">'max_length'</span>：<span class="string">'账号长度最长为30'</span> &#125;，</span><br><span class="line">    ）</span><br><span class="line">    <span class="keyword">password</span> = form.CharField（label = “密码”，</span><br><span class="line">        min_length = <span class="number">6</span>，max_length = <span class="number">30</span>，</span><br><span class="line">        widget = forms.PasswordInput（），</span><br><span class="line">        required = <span class="keyword">True</span>，</span><br><span class="line">            error_messages = &#123; <span class="string">'min_length'</span>：<span class="string">'密码长度最短为6'</span> &#125;，</span><br><span class="line">        ）</span><br><span class="line">check_password = forms.CharField（label = “重复密码”，</span><br><span class="line">min_length = <span class="number">6</span>，max_length = <span class="number">30</span>，</span><br><span class="line">widget = forms.PasswordInput（），</span><br><span class="line">required = <span class="keyword">True</span>，</span><br><span class="line">error_messages = &#123; <span class="string">'min_length'</span>：<span class="string">'密码长度最短为6'</span> &#125;，</span><br><span class="line">）def clean_check_password （self）： 密码= self.cleaned_data.<span class="keyword">get</span>（<span class="string">'password'</span>）check_password = self.cleaned_data.<span class="keyword">get</span>（<span class="string">'check_password'</span>）如果 <span class="keyword">password</span>！= check_password 和 <span class="keyword">password</span> 和 check_password：提高</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ValidationError（“重复输入密码错误”）def clean_username （self）： username = self.cleaned_data.<span class="keyword">get</span>（<span class="string">'username'</span>）<span class="keyword">if</span> username [：<span class="number">1</span> ] == <span class="string">'_'</span>：提出表格。ValidationError（“用户名不能以下划线打头“）尝试：<span class="keyword">User</span>.objects.<span class="keyword">get</span>（username = username）除外 <span class="keyword">User</span>.DoesNotExist：返回用户名引发表单。ValidationError（”用户名已存在“）</span><br></pre></td></tr></table></figure><blockquote><p>表单中，将对用户两次输入的密码进行校验和判断是否为空，而且分开下划线作为用户名的开头字符</p></blockquote><ul><li>注册主要视图函数逻辑</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">＃views.py </span><br><span class="line">def  寄存器（请求）：<span class="keyword">if</span> request.<span class="keyword">method</span> == <span class="string">'POST'</span>：        form = RegisterForm（request.POST）<span class="keyword">if</span> form.is_valid（）：            username = form.cleaned_data [ <span class="string">'username'</span> ]             密码= form.cleaned_data [ <span class="string">'password'</span> ]             <span class="keyword">User</span>.objects.create_user（username = username，<span class="keyword">password</span> = <span class="keyword">password</span>）            <span class="keyword">user</span> = authenticate（username = username，<span class="keyword">password</span> = <span class="keyword">password</span>）            auth_login（request，<span class="keyword">user</span>）<span class="keyword">return</span> redirect（<span class="string">'/'</span>）<span class="keyword">else</span>：        form = RegisterForm（ ）返回</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    渲染（请求，“ register.html”，&#123; <span class="string">'form'</span>：form&#125;）</span><br></pre></td></tr></table></figure><blockquote><p>通过表单验证，并获取到对应的用户账号密码，创建成功之后，验证并登录，并重定向到首页</p></blockquote><ul><li>主页模板页面</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">！DOCTYPE</span> <span class="attr">html</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/ <span class="attr">title</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">head</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％如果request.user.is_authenticated％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>您已登录：<span class="tag">&lt;/ <span class="attr">p</span>&gt;</span> </span><span class="template-variable">&#123;&#123;用户&#125;</span><span class="xml">&#125; </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％else％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> =<span class="string">'/ register /'</span><span class="attr">method</span> =<span class="string">“</span> <span class="attr">POST</span>”&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％csrf_token％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％表示形式为％的字段&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％<span class="keyword">if</span> field.errors％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123; ％for field.errors％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span> </span><span class="template-variable">&#123;&#123;error&#125;</span><span class="xml">&#125; <span class="tag">&lt;/ <span class="attr">li</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endfor％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">ul</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endif％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">label</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><span class="template-variable">&#123;&#123;field.label&#125;</span><span class="xml">&#125;： </span><span class="template-variable">&#123;&#123;field&#125;</span><span class="xml">&#125; <span class="tag">&lt;/ <span class="attr">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endfor％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">“</span> <span class="attr">submit</span>”<span class="attr">value</span> =<span class="string">“注册”</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">form</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;％endif％&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">body</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/ <span class="attr">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>当用户已经登录时，显示当前登录用户，反之则展示表单，以供用户填写</p></blockquote><h3 id="重载admin用户系统"><a href="#重载admin用户系统" class="headerlink" title="重载admin用户系统"></a>重载admin用户系统</h3><blockquote><p><code>django</code>自带的<code>admin</code>模块下的用户系统主要负责用户帐户，组，权限和基于<code>cookie</code>的会话等业务</p><p>认证系统由以下部分组成：</p><p>用户：包含用户数据细分，是实现业务功能逻辑的基础</p><p>权限：控制用户进入否可以执行某项任务的二进制（是/否）标志。</p><p>组：一种为多个用户加上标签和权限的常用方式。</p><p>消息：一种为指定用户生成简单消息嵌入的方式</p></blockquote><h4 id="默认预设"><a href="#默认预设" class="headerlink" title="默认预设"></a>默认预设</h4><ul><li><p><code>username</code></p><blockquote><p>必选项，小于等于30个字符；只能是字母数字（字母，数字和下划线）</p></blockquote></li><li><p><code>first_name</code></p><blockquote><p>可选项，等于等于30个字符</p></blockquote></li><li><p><code>last_name</code></p><blockquote><p>可选项，等于等于30个字符</p></blockquote></li><li><p><code>email</code></p><blockquote><p>可选项。电子邮件地址</p></blockquote></li><li><p><code>password</code></p><blockquote><p>必选，密码（哈希值，元数据）</p><p><code>Django</code>不储存原始密码</p><p>原始密码可以是任意长度的，包含任何字符</p><p>密码由哈希类型，盐值和哈希值组成，用美元符合分隔</p></blockquote></li><li><p><code>is_staff</code></p><blockquote><p>布尔值，指明这个用户是否可以进入管理站点的权限</p></blockquote></li><li><p><code>is_active</code></p><blockquote><p>布尔值，指明这个用户帐户是否是活动的</p><p>我们建议把这个标记设置为<code>False</code>来代替删除用户帐户，这样就不会影响指向用户的外键</p><p>这个属性不控制用户是否可以登录。登录验证时不会核查<code>is_active</code>标志。</p><p>因此，如果在登录时需要检查<code>is_active</code>标志，需要你在自己的登录视图中实现</p><p>用于<a href="http://docs.oneele.com/django/topics/auth.html#django.contrib.auth.views.login" target="_blank" rel="noopener"><code>login()</code></a>视图的<a href="http://docs.oneele.com/django/topics/auth.html#django.contrib.auth.forms.AuthenticationForm" target="_blank" rel="noopener"><code>AuthenticationForm</code></a>会执行这个检查，判断用户是否是活跃账户</p></blockquote></li><li><p><code>is_superuser</code></p><blockquote><p>布尔值，规范用户拥有所有权限（包括显式赋予和非显式赋予的）</p></blockquote></li><li><p><code>last_login</code></p><blockquote><p>预期情况下设置为用户最后一次登录的日期时间</p></blockquote></li><li><p><code>date_joined</code></p><blockquote><p>预期情况下设置为用户帐户创建的日期时间</p></blockquote></li></ul><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><blockquote><p>在项目中，我们将使用电子邮件作为用户的用户名，那么可以在自带用户表中写明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> USERNAME_FIELD = <span class="string">'email'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>该属性设置当前表的登陆细分</p></blockquote><blockquote><p>描述我们自定义用户模型上作的唯一标识符分割名称的字符串，分段必须是唯一的，在定义中设置<code>unique=True</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> REQUIRED_FIELDS = [<span class="string">'username'</span>]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>设置当前该基线为必填细分</p></blockquote><ul><li><p><code>is_authenticated()</code></p><blockquote><p>判断用户是否已通过身份验证的方法，不意味任何权限，而且不检查用户的活动状态</p></blockquote></li><li><p><code>get_username()</code></p><blockquote><p>返回由USERNAME_FIELD制定的细分的值</p></blockquote></li><li><p>get_full_name（）</p><blockquote><p>返回<code>first_name</code>加上<code>last_name</code></p><p>中间加上一个空格，由于我们重新设置了表分区，那么这个变量函数需要我们重新给定返回值</p></blockquote></li><li><p><code>get_short_name()</code></p><blockquote><p>一个短的且非正式用户的标识符，返回<code>first_name</code></p><p>当你的项目重写该静态或直接去掉了<code>first_name</code>，所以我们必须重新给定这个函数的返回值</p></blockquote></li><li><p><code>set_password()</code></p><blockquote><p>将用户的密码设置为给定的字符串</p></blockquote></li><li><p><code>has_perm(perm, obj=None)</code></p><blockquote><p>用户是否具有某个权限，如果给定<code>obj</code>，则需要根据特定对象实例检查权限</p></blockquote></li><li><p><code>has_module_perms(app_label)</code></p><blockquote><p>如果用户有权访问给定应用中的模型，则返回<code>True</code></p><p>这里我们这两个分区都设置为<code>True</code>，可以让用户访问任一<code>APP</code></p></blockquote></li><li><p><code>is_staff()@property</code></p><blockquote><p>如果用户允许访问管理网站，则返回<code>True</code></p><p>这里我们返回<code>is_admin</code>的随机属性即可</p></blockquote></li></ul><blockquote><p>关于细分属性，如果需要进行高度扩展</p><p>可以使用继承<code>AbstractBaseUser</code>这个类</p><p>这个类中只含有<code>password</code>， ，<code>last_login</code>以及<code>is_active</code>三个字段属性</p></blockquote><h4 id="重载管理器"><a href="#重载管理器" class="headerlink" title="重载管理器"></a>重载管理器</h4><blockquote><p>由于已经覆盖了替代的<code>admin</code>用户表，现在需要将其对应的管理器函数进行编写</p><p>编写时主要关注一下两个父类函数的重写</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create_user（username_field，password_filed = <span class="keyword">None</span>，** other_fields）</span><br><span class="line">normalize_email（）将邮件地址规范化的类方法</span><br><span class="line"><span class="keyword">user</span>.save（<span class="keyword">using</span> = self._db）</span><br><span class="line">create_superuser（用户名，电子邮件，密码）＃用户创建，is_admin设置为真     <span class="keyword">user</span>.save（<span class="keyword">using</span> = self._db）</span><br><span class="line"></span><br><span class="line">从 django.contrib.auth.models 导入 BaseUserManager </span><br><span class="line">类 MyUserManager （BaseUserManager） ：高清create_user （个体经营，用户名，电子邮件，密码=无）：如果没有电子邮件：提高 ValueError异常（“用户必须拥有一个电子邮件地址”），如果没有用户名：引发 ValueError（<span class="string">'用户必须具有用户名'</span>）＃判断邮件和用户名是否具有         now = timezone.now（）＃获取当前django的时间         <span class="keyword">user</span> = self.model（            用户名=用户名，            email = self.normalize_email（email） ，</span><br><span class="line">     </span><br><span class="line">         </span><br><span class="line">            </span><br><span class="line">         </span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            date_joined = now，</span><br><span class="line">            last_login = now，</span><br><span class="line">        ）</span><br><span class="line">        <span class="keyword">user</span>.set_password（<span class="keyword">password</span>）</span><br><span class="line">        <span class="keyword">user</span>.save（<span class="keyword">using</span> = self._db）返回用户def create_superuser （self，username，email，<span class="keyword">password</span>）：         <span class="keyword">user</span> = self.create_user（username，            email，            <span class="keyword">password</span> = <span class="keyword">password</span>，        ）        <span class="keyword">user</span>.is_admin = <span class="keyword">True</span>         <span class="keyword">user</span>.save（<span class="keyword">using</span> = self._db）返回用户</span><br></pre></td></tr></table></figure><blockquote><p>重新定义新用户表的管理器之后，想要生效，还需要在对应的模型类表中覆盖<code>objects</code>属性</p></blockquote><ul><li><code>objects = MyUserManager()</code></li></ul><h4 id="重载表"><a href="#重载表" class="headerlink" title="重载表"></a>重载表</h4><blockquote><p>下面是一个真实的重载自带用户表的模型类</p></blockquote><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">从 django.contrib.auth.models 导入 AbstractBaseUser </span><br><span class="line">类 成员（AbstractBaseUser）：#AbstractBaseUser中只包含<span class="number">3</span>个字段：password，last_login和is_active。    email = models.EmailField（verbose_name = '邮箱'，max_length = <span class="number">255</span>，unique = True，）    用户名= models.CharField（verbose_name = “用户名”，max_length = <span class="number">16</span>，unique = True）    weibo_id = models.CharField（verbose_name = “新浪微博”，max_length = <span class="number">30</span>，空白= True）    博客= models.CharField（verbose_name = “个人网站”</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">，max_length = <span class="number">200</span>，blank = True）</span><br><span class="line">    位置=模型。CharField（verbose_name = “城市”，max_length = <span class="number">10</span>，blank = True）</span><br><span class="line">    profile =模型。CharField（verbose_name = “个人简介”，max_length = <span class="number">140</span>，blank = True）</span><br><span class="line">    头像= models.CharField（verbose_name = “头像”，max_length = <span class="number">128</span>，blank = True）</span><br><span class="line">    au = models.IntegerField（verbose_name = “用户活跃度”，默认= <span class="number">0</span>）</span><br><span class="line">    last_ip = models.IPAddressField（verbose_name = “上次访问IP”，默认= “ <span class="number">0.0</span><span class="number">.0</span>。<span class="number">0</span>“）</span><br><span class="line">    email_verified = models.BooleanField（verbose_name = “邮箱是否验证”，默认= False）</span><br><span class="line">    date_joined = models.DateTimeField（verbose_name = “用户注册时间”，default = timezone.now）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    topic_num = models.IntegerField（verbose_name = “帖子数”，默认= <span class="number">0</span>）</span><br><span class="line">    comment_num = models.IntegerField（verbose_name = “评论数”，default = <span class="number">0</span>）</span><br><span class="line">    is_active = models.BooleanField（default = True）</span><br><span class="line">    is_admin = models.BooleanField（默认= False）</span><br><span class="line"></span><br><span class="line">    objects = MyUserManager（）#objects就是我们之前一直使用的管理器＃管理器用来维护我们的增删改查</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    USERNAME_FIELD = '电子邮件'</span><br><span class="line">     REQUIRED_FIELDS = [ '用户名' ]</span><br><span class="line"></span><br><span class="line">    高清 __str__ （个体经营）：返回 self.username＃标签中的数据实例高清is_email_verified （个体经营）：返回 self.email_verified＃我们可以在模板中，通过实例出来的对象数据进行这个函数的调取，获取他是否验证过<span class="function"><span class="keyword">def</span> <span class="title">get_weibo</span> <span class="title">（个体）：返回</span> <span class="title">self</span>.<span class="title">weibo_id</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">     </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">     </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span>  <span class="title">get_username</span> <span class="title">（self）：返回</span> <span class="title">self</span>.<span class="title">username＃方法的圆括号在模板标签中必需省略！！def</span> <span class="title">get_username</span> <span class="title">（self）：返回</span> <span class="title">self</span>.<span class="title">username＃方法的圆括号在模板标签中必需省略！！</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">     </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span>  <span class="title">get_full_name</span> <span class="title">（self）：＃用户通过其电子邮件地址return</span> <span class="title">self进行标识。email</span> <span class="title">#</span> <span class="title">get_full_name本来是获取名字和姓氏的＃但由于我们重新设置了表结构，所以此函数必须自定义＃方法的圆括号在templates标签中必需省略！！</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span>  <span class="title">get_short_name</span> <span class="title">（self）：＃用户通过其电子邮件地址返回</span> <span class="title">self</span>.<span class="title">username进行标识</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span>  <span class="title">has_perm</span> <span class="title">（self，perm，obj</span> </span>= None）：“用户是否具有特定权限？” 返回True</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">has_module_perms</span> <span class="title">（自己，app_label）：“用户是否有权查看应用程序</span>`<span class="title">app_label</span>`<span class="title">？”</span> <span class="title">返回True</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">         </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">DEF</span>  <span class="title">calculate_au</span> <span class="title">（个体）：“”，</span> <span class="title">“</span>         <span class="title">计算活跃度</span>        <span class="title">公式的：主题*</span> 5 <span class="title">+注释*</span> 1         <span class="title">”“”</span>         <span class="title">self</span>.<span class="title">au</span> </span>= self.topic_num * <span class="number">5</span> + self.comment_num * <span class="number">1</span> 返回 self.au</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    @ property＃类中函数可以直接做为属性使用<span class="function"><span class="keyword">def</span> <span class="title">is_staff</span> <span class="title">（个体）：“用户是工作人员吗？”</span> <span class="title">＃最简单的答案：所有管理员都是员工返回</span> <span class="title">self</span>.<span class="title">is_admin</span></span></span><br></pre></td></tr></table></figure><h4 id="重载Admin表单"><a href="#重载Admin表单" class="headerlink" title="重载Admin表单"></a>重载Admin表单</h4><blockquote><p>由于修改了默认的<code>django</code>表结构，此时在<code>admin</code>界面修改密码或添加用户数据已经不能再按照之前的表单系统啦</p><p>需要在<code>app</code>的<code>admin.py</code>中重写<code>UserCreationForm</code>和<code>UserChangeForm</code></p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">＃用户创建表单</span><br><span class="line">从 Django的进口形式</span><br><span class="line">从 django.contrib中输入管理员</span><br><span class="line">从 django.contrib.auth.<span class="keyword">admin</span> 进口 UserAdmin </span><br><span class="line">从 django.contrib.auth.forms 导入 ReadOnlyPasswordHashField </span><br><span class="line">从 people.models 导入会员，跟随</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  UserCreationForm （forms.ModelForm）：“”“用于创建新用户的表单。包括所有必填    字段以及重复的密码。”“”     password1 = form.CharField（label = <span class="string">'密码'</span>，widget = forms.PasswordInput）    password2 = Forms.CharField（label = <span class="string">'确认密码'</span>，widget = forms.PasswordInput）类Meta：         model =成员        字段=（ <span class="string">'email'</span>， <span class="string">'username'</span>）</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def  clean_password2 （self）：</span><br><span class="line">         password1 = self.cleaned_data.<span class="keyword">get</span>（ “ password1”）</span><br><span class="line">        password2 = self.cleaned_data.<span class="keyword">get</span>（ “ password2”）如果 password1和 password2和 password1！= password2：提出 form.ValidationError（ “输入确认失败“） <span class="keyword">return</span> password2＃在窗体中的clean__field函数会在is_valid（）函数验证时自动调用def save （self，<span class="keyword">commit</span> = <span class="keyword">True</span>）：         <span class="keyword">user</span> = super（UserCreationForm，self）.save（<span class="keyword">commit</span> = <span class="keyword">False</span>）        <span class="keyword">user</span>.set_password （self.cleaned_data [ “ password1”</span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">]）#set_password将采用django的加密算法将密码设置到对应的模型实例中＃在内存中创建的好的对象只能通过<span class="keyword">commit</span> = <span class="keyword">True</span>才被真正执行到数据库上如果提交：            <span class="keyword">user</span>.save（）<span class="keyword">return</span>用户</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">＃密码更改时的展示表单</span><br><span class="line">类 UserChangeForm （forms.ModelForm）：</span><br><span class="line">     密码= ReadOnlyPasswordHashField（）类Meta：         模型=成员        字段=（<span class="string">'email'</span>，<span class="string">'password'</span>，<span class="string">'username'</span>，<span class="string">'is_active'</span>，<span class="string">'is_admin'</span>，）def clean_password （self）：返回 self.initial [ “ <span class="keyword">password</span>” ] ＃使用替代的保存函数即可</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">＃真正的用户管理界面管理方式</span><br><span class="line">类 MyUserAdmin （UserAdmin）：</span><br><span class="line">     形式= UserChangeForm </span><br><span class="line">    add_form = UserCreationForm </span><br><span class="line">    list_display =（<span class="string">'id'</span>，<span class="string">'email'</span>，<span class="string">'username'</span>，<span class="string">'email_verified'</span>，<span class="string">'last_login'</span>，<span class="string">'is_active'</span>，<span class="string">'is_admin'</span>，<span class="string">'last_ip'</span>）</span><br><span class="line">    list_display_links =（<span class="string">'id'</span>，<span class="string">'email'</span>，<span class="string">'用户名'</span>）</span><br><span class="line">    list_filter =（<span class="string">'email'</span>，<span class="string">'email_verified'</span>，） </span><br><span class="line">    字段集=（</span><br><span class="line">        （无，&#123; <span class="string">'fields'</span>：（（<span class="string">'username'</span>，<span class="string">'email'</span>，<span class="string">'date_joined'</span>，<span class="string">'password'</span>，<span class="string">'is_active'</span>，<span class="string">'is_admin'</span>，<span class="string">'avatar'</span>）&#125;），</span><br><span class="line">        （<span class="string">'状态'</span>，&#123; <span class="string">'fields'</span>：（<span class="string">' email_verified'</span>，<span class="string">'last_ip'</span>，<span class="string">'au'</span>，<span class="string">'topic_num'</span>，<span class="string">'comment_num'</span>）&#125;），</span><br><span class="line">        （<span class="string">'社交网络'</span>，&#123; <span class="string">'fields'</span>：（<span class="string">'weibo_id'</span>，<span class="string">'blog'</span>）&#125;），</span><br><span class="line">    ）</span><br><span class="line">    add_fieldsets =（</span><br><span class="line">        （无，&#123; <span class="string">'classes'</span>：（<span class="string">'wide'</span>，），#<span class="keyword">admin</span>样式设置#Fieldsets使用wide样式将会有额外的水平间距。<span class="string">'fields'</span>：（（<span class="string">'email'</span>，<span class="string">'username'</span>，<span class="string">'password1'</span>，<span class="string">'password2'</span>，<span class="string">'is_active'</span>，<span class="string">'is_admin'</span>）&#125;         ）    ））    search_fields =（<span class="string">'id'</span>，<span class="string">'email'</span>，<span class="string">'username'</span>）    ordering = （<span class="string">'id'</span>，<span class="string">'email'</span>，<span class="string">'email_verified'</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">admin</span>.site.register（成员，MyUserAdmin）</span><br><span class="line"><span class="keyword">admin</span>.site.register（跟随者）</span><br></pre></td></tr></table></figure><h4 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h4><blockquote><p>还需要在<code>settings.py</code>文件下进行设置，覆盖最小的<code>User</code>模型</p></blockquote><ul><li><code>AUTH_USER_MODEL = &#39;people.Member&#39;</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websocket</title>
      <link href="/2019/10/21/Websocket/"/>
      <url>/2019/10/21/Websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><blockquote><p><code>WebSocket</code>实现了浏览器与服务器的全双工通信，扩展了浏览器与服务端的通信功能，使服务端可以主动向客户端发送数据。</p><p>传统的<code>HTTP</code>协议是无状态的，种客户端是主动方，服务端是被动方的；对于涉及实时信息的<code>Web</code>应用带来了很大的不便，如带有即时通信、实时数据、订阅推送等功能的应用。在之前有两种办法解决这个问题</p></blockquote><a id="more"></a> <!-- 发表于 1990-01-16 |  分类于 [Django ](https://lienze.tech/blog/categories/Django/)， [Websocket](https://lienze.tech/blog/categories/Django/Websocket/) --><blockquote><p>轮询是最原始的实现实时<code>Web</code>应用的解决方案。轮询技术要求客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动。这种方法会导致过多不必要的请求，浪费流量和服务器资源。</p><p><code>Comet</code>技术又可以分为长轮询和流技术；长轮询改进了上述的轮询技术，减小了无用的请求。它会为某些数据设定过期时间，当数据过期后才会向服务端发送请求；这种机制适合数据的改动不是特别频繁的情况。流技术通常是指客户端使用一个隐藏的窗口与服务端建立一个<code>HTTP</code>长连接，服务端会不断更新连接状态以保持<code>HTTP</code>长连接存活；这样的话，服务端就可以通过这条长连接主动将数据发送给客户端；流技术在大并发环境下，可能会考验到服务端的性能。</p><p><code>WebSocket</code>真正实现了<code>Web</code>的实时通信，使<code>B/S</code>模式具备了<code>C/S</code>模式的实时通信能力</p><p><code>WebSocket</code>的工作流程是这样的：浏览器通过<code>JavaScript</code>向服务端发出建立<code>WebSocket</code>连接的请求，在<code>WebSocket</code>连接建立成功后，客户端和服务端就可以通过 TCP连接传输数据。因为<code>WebSocket</code>连接本质上是<code>TCP</code>连接，不需要每次传输都带上重复的头部数据，所以它的数据传输量比轮询和<code>Comet</code>技术小了很多</p></blockquote><blockquote><p><code>Websocket</code>在建立连接之前有一个<code>Handshake</code>（<code>Opening Handshake</code>）过程，在关闭连接前也有一个Handshake（<code>Closing Handshake</code>）过程，建立连接之后，双方即可双向通信</p></blockquote><h3 id="HTML的Websocket"><a href="#HTML的Websocket" class="headerlink" title="HTML的Websocket"></a>HTML的Websocket</h3><ul><li>初始化websocket</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ws = <span class="keyword">new</span> <span class="constructor">WebSocket(<span class="params">url</span>, [<span class="params">protocol</span>] )</span>;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; url`：指定连接的`websocket</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>protocol</code>：可接受的子协议</p></blockquote><h4 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h4><blockquote><p>当<code>ws</code>套接字初始化成功之后，我们可以通过定义回调函数在某些事件触发时执行，以下是常见响应事件</p></blockquote><ul><li>当<code>ws</code>连接建立时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 连接开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>ws</code>连接接收到数据时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(evt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// evt.data即是接收到的数据对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>ws</code>连接发生通信错误时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 连接出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当连接关闭时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 连接关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>初次之外，还可以通过一些方法函数进行数据的传输或连接的关闭</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>通过<code>ws</code>连接发送数据</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.<span class="built_in">send</span>(str)</span><br></pre></td></tr></table></figure><ul><li>关闭连接</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><h4 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">ws</span> = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:3000'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接建立'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(ev)</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'server:'</span>,ev.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接建立'</span>)</span><br><span class="line">    <span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接关闭'</span>)</span><br><span class="line">    <span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Django的Websocket"><a href="#Django的Websocket" class="headerlink" title="Django的Websocket"></a>Django的Websocket</h3><blockquote><p><code>dwebsocket</code>是一个在<code>django</code>用来实现<code>websocket</code>服务端的三方模块，使用上手非常简单，安装方式如下</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> dwebsocket</span><br></pre></td></tr></table></figure><ul><li><code>git</code>地址</li></ul><blockquote><p><a href="https://github.com/duanhongyi/dwebsocket" target="_blank" rel="noopener">https://github.com/duanhongyi/dwebsocket</a></p></blockquote><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><blockquote><p>在后台中，通过该三方模块可以让我们在<code>django</code>的视图中实现对于<code>websocket</code>的操作</p></blockquote><blockquote><p>首先是两个基本的装饰器，用来限定过滤<code>websocket</code>的连接</p></blockquote><ul><li><code>dwebsocket.accept_websocket</code></li></ul><blockquote><p>允许<code>http</code>与<code>websocket</code>连接</p></blockquote><ul><li><code>dwebsocket.require_websocke</code></li></ul><blockquote><p>只允许<code>websocket</code>连接</p></blockquote><blockquote><p>除去两种装饰器方法进行过滤判断，还可以通过在视图函数中的<code>request</code>进行<code>websocket</code>的判断</p></blockquote><ul><li><code>request.is_websocket</code></li></ul><blockquote><p>如果是个<code>websocket</code>请求返回<code>True</code>，如果是个普通的<code>http</code>请求返回<code>False</code></p><p>可以用这个方法区分普通连接与<code>websocket</code></p></blockquote><ul><li><code>request.websocket</code></li></ul><blockquote><p>在一个<code>websocket</code>请求建立之后，这个请求将会有一个<code>websocket</code>属性，用来给客户端提供一个简单的<code>api</code>通讯，如果<code>request.is_websocket()</code>是<code>False</code>，这个属性将是<code>None</code></p></blockquote><ul><li><code>request.websocket.wait</code></li></ul><blockquote><p>接收客户端发来的一条消息；如果在收到消息或客户端关闭连接之前，它不会有任何返回，只会返回None</p></blockquote><ul><li><code>request.websocket.read</code></li></ul><blockquote><p>如果从客户端接收到新消息，<code>read</code>函数返回这条消息；如果没有新消息，则返回None</p><p>这是一个替代<code>wait</code>的非阻塞读取数据的方法</p></blockquote><ul><li><code>request.websocket.count_messages()</code></li></ul><blockquote><p>返回消息队列数量</p></blockquote><ul><li><code>request.websocket.has_messages()</code></li></ul><blockquote><p>如果有新消息返回<code>True</code>，否则返回<code>False</code></p></blockquote><ul><li><code>request.websocket.send(message)</code></li></ul><blockquote><p>向客户端发送消息</p></blockquote><ul><li><code>requqest.websocket.__iter__</code></li></ul><blockquote><p><code>websocket</code>迭代器</p></blockquote><ul><li>关于<code>Django</code>的<code>Demo</code>将会在下一章节结合<code>paramiko</code>以及<code>xterm.js</code>来进行一个<code>webssh</code>的实现</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
