<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Websocket</title>
      <link href="/2019/10/21/Websocket/"/>
      <url>/2019/10/21/Websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><blockquote><p><code>WebSocket</code>实现了浏览器与服务器的全双工通信，扩展了浏览器与服务端的通信功能，使服务端可以主动向客户端发送数据。</p><p>传统的<code>HTTP</code>协议是无状态的，种客户端是主动方，服务端是被动方的；对于涉及实时信息的<code>Web</code>应用带来了很大的不便，如带有即时通信、实时数据、订阅推送等功能的应用。在之前有两种办法解决这个问题</p></blockquote><a id="more"></a> <!-- 发表于 1990-01-16 |  分类于 [Django ](https://lienze.tech/blog/categories/Django/)， [Websocket](https://lienze.tech/blog/categories/Django/Websocket/) --><blockquote><p>轮询是最原始的实现实时<code>Web</code>应用的解决方案。轮询技术要求客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动。这种方法会导致过多不必要的请求，浪费流量和服务器资源。</p><p><code>Comet</code>技术又可以分为长轮询和流技术；长轮询改进了上述的轮询技术，减小了无用的请求。它会为某些数据设定过期时间，当数据过期后才会向服务端发送请求；这种机制适合数据的改动不是特别频繁的情况。流技术通常是指客户端使用一个隐藏的窗口与服务端建立一个<code>HTTP</code>长连接，服务端会不断更新连接状态以保持<code>HTTP</code>长连接存活；这样的话，服务端就可以通过这条长连接主动将数据发送给客户端；流技术在大并发环境下，可能会考验到服务端的性能。</p><p><code>WebSocket</code>真正实现了<code>Web</code>的实时通信，使<code>B/S</code>模式具备了<code>C/S</code>模式的实时通信能力</p><p><code>WebSocket</code>的工作流程是这样的：浏览器通过<code>JavaScript</code>向服务端发出建立<code>WebSocket</code>连接的请求，在<code>WebSocket</code>连接建立成功后，客户端和服务端就可以通过 TCP连接传输数据。因为<code>WebSocket</code>连接本质上是<code>TCP</code>连接，不需要每次传输都带上重复的头部数据，所以它的数据传输量比轮询和<code>Comet</code>技术小了很多</p></blockquote><blockquote><p><code>Websocket</code>在建立连接之前有一个<code>Handshake</code>（<code>Opening Handshake</code>）过程，在关闭连接前也有一个Handshake（<code>Closing Handshake</code>）过程，建立连接之后，双方即可双向通信</p></blockquote><h3 id="HTML的Websocket"><a href="#HTML的Websocket" class="headerlink" title="HTML的Websocket"></a>HTML的Websocket</h3><ul><li>初始化websocket</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ws = <span class="keyword">new</span> <span class="constructor">WebSocket(<span class="params">url</span>, [<span class="params">protocol</span>] )</span>;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; url`：指定连接的`websocket</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>protocol</code>：可接受的子协议</p></blockquote><h4 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h4><blockquote><p>当<code>ws</code>套接字初始化成功之后，我们可以通过定义回调函数在某些事件触发时执行，以下是常见响应事件</p></blockquote><ul><li>当<code>ws</code>连接建立时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 连接开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>ws</code>连接接收到数据时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(evt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// evt.data即是接收到的数据对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>ws</code>连接发生通信错误时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 连接出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当连接关闭时触发</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 连接关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>初次之外，还可以通过一些方法函数进行数据的传输或连接的关闭</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>通过<code>ws</code>连接发送数据</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.<span class="built_in">send</span>(str)</span><br></pre></td></tr></table></figure><ul><li>关闭连接</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><h4 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">ws</span> = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:3000'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接建立'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(ev)</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'server:'</span>,ev.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接建立'</span>)</span><br><span class="line">    <span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ws</span>.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'连接关闭'</span>)</span><br><span class="line">    <span class="keyword">ws</span>.<span class="keyword">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Django的Websocket"><a href="#Django的Websocket" class="headerlink" title="Django的Websocket"></a>Django的Websocket</h3><blockquote><p><code>dwebsocket</code>是一个在<code>django</code>用来实现<code>websocket</code>服务端的三方模块，使用上手非常简单，安装方式如下</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> dwebsocket</span><br></pre></td></tr></table></figure><ul><li><code>git</code>地址</li></ul><blockquote><p><a href="https://github.com/duanhongyi/dwebsocket" target="_blank" rel="noopener">https://github.com/duanhongyi/dwebsocket</a></p></blockquote><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><blockquote><p>在后台中，通过该三方模块可以让我们在<code>django</code>的视图中实现对于<code>websocket</code>的操作</p></blockquote><blockquote><p>首先是两个基本的装饰器，用来限定过滤<code>websocket</code>的连接</p></blockquote><ul><li><code>dwebsocket.accept_websocket</code></li></ul><blockquote><p>允许<code>http</code>与<code>websocket</code>连接</p></blockquote><ul><li><code>dwebsocket.require_websocke</code></li></ul><blockquote><p>只允许<code>websocket</code>连接</p></blockquote><blockquote><p>除去两种装饰器方法进行过滤判断，还可以通过在视图函数中的<code>request</code>进行<code>websocket</code>的判断</p></blockquote><ul><li><code>request.is_websocket</code></li></ul><blockquote><p>如果是个<code>websocket</code>请求返回<code>True</code>，如果是个普通的<code>http</code>请求返回<code>False</code></p><p>可以用这个方法区分普通连接与<code>websocket</code></p></blockquote><ul><li><code>request.websocket</code></li></ul><blockquote><p>在一个<code>websocket</code>请求建立之后，这个请求将会有一个<code>websocket</code>属性，用来给客户端提供一个简单的<code>api</code>通讯，如果<code>request.is_websocket()</code>是<code>False</code>，这个属性将是<code>None</code></p></blockquote><ul><li><code>request.websocket.wait</code></li></ul><blockquote><p>接收客户端发来的一条消息；如果在收到消息或客户端关闭连接之前，它不会有任何返回，只会返回None</p></blockquote><ul><li><code>request.websocket.read</code></li></ul><blockquote><p>如果从客户端接收到新消息，<code>read</code>函数返回这条消息；如果没有新消息，则返回None</p><p>这是一个替代<code>wait</code>的非阻塞读取数据的方法</p></blockquote><ul><li><code>request.websocket.count_messages()</code></li></ul><blockquote><p>返回消息队列数量</p></blockquote><ul><li><code>request.websocket.has_messages()</code></li></ul><blockquote><p>如果有新消息返回<code>True</code>，否则返回<code>False</code></p></blockquote><ul><li><code>request.websocket.send(message)</code></li></ul><blockquote><p>向客户端发送消息</p></blockquote><ul><li><code>requqest.websocket.__iter__</code></li></ul><blockquote><p><code>websocket</code>迭代器</p></blockquote><ul><li>关于<code>Django</code>的<code>Demo</code>将会在下一章节结合<code>paramiko</code>以及<code>xterm.js</code>来进行一个<code>webssh</code>的实现</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2019/10/10/hexo/"/>
      <url>/2019/10/10/hexo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>安装hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> hexo -g</span><br></pre></td></tr></table></figure></li><li><p>Hexo初始化项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure></li><li><p>安装github的管理工具</p></li><li><p>配置仓库路径</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> </span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>每次上传新的博客内容，先要清理本地的缓存文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure></li><li><p>执行生成上传命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g -d</span></span><br></pre></td></tr></table></figure></li><li><p>上传需要安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>编写新的md文件代表新的博客</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>文件名</span><br></pre></td></tr></table></figure></li><li><p>HEXO语法转义规则</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">! &amp;#<span class="number">33</span>; — 惊叹号 Exclamation mark</span><br><span class="line">” &amp;#<span class="number">34</span>; &amp;quot; 双引号 Quotation mark</span><br><span class="line"># &amp;#<span class="number">35</span>; — 数字标志 Number sign</span><br><span class="line">$ &amp;#<span class="number">36</span>; — 美元标志 Dollar sign</span><br><span class="line">% &amp;#<span class="number">37</span>; — 百分号 Percent sign</span><br><span class="line">&amp; &amp;#<span class="number">38</span>; &amp;amp; Ampersand</span><br><span class="line">‘ &amp;#<span class="number">39</span>; — 单引号 Apostrophe</span><br><span class="line">( &amp;#<span class="number">40</span>; — 小括号左边部分 Left parenthesis</span><br><span class="line">) &amp;#<span class="number">41</span>; — 小括号右边部分 Right parenthesis</span><br><span class="line">* &amp;#<span class="number">42</span>; — 星号 Asterisk</span><br><span class="line">+ &amp;#<span class="number">43</span>; — 加号 Plus sign</span><br><span class="line">&lt; &amp;#<span class="number">60</span>; &amp;lt; 小于号 Less than</span><br><span class="line">= &amp;#<span class="number">61</span>; — 等于符号 Equals sign</span><br><span class="line">- &amp;#<span class="number">45</span>; &amp;minus; — 减号</span><br><span class="line">&gt; &amp;#<span class="number">62</span>; &amp;gt; 大于号 Greater than</span><br><span class="line">? &amp;#<span class="number">63</span>; — 问号 Question mark</span><br><span class="line">@ &amp;#<span class="number">64</span>; — Commercial at</span><br><span class="line">[ &amp;#<span class="number">91</span>; --- 中括号左边部分 Left square bracket</span><br><span class="line">\ &amp;#<span class="number">92</span>; --- 反斜杠 Reverse solidus (backslash)</span><br><span class="line">] &amp;#<span class="number">93</span>; — 中括号右边部分 Right square bracket</span><br><span class="line">&#123; &amp;#<span class="number">123</span>; — 大括号左边部分 Left curly brace</span><br><span class="line">| &amp;#<span class="number">124</span>; — 竖线Vertical bar</span><br><span class="line">&#125; &amp;#<span class="number">125</span>; — 大括号右边部分 Right curly brace</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
