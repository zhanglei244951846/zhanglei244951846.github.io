<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厽乂彐</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://laxe.top/"/>
  <updated>2019-12-26T00:34:38.211Z</updated>
  <id>http://laxe.top/</id>
  
  <author>
    <name>张磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xtrabackup备份mysql</title>
    <link href="http://laxe.top/2019/12/26/%E4%BD%BF%E7%94%A8xtrabackup%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD/"/>
    <id>http://laxe.top/2019/12/26/使用xtrabackup进行备份/</id>
    <published>2019-12-26T00:27:30.314Z</published>
    <updated>2019-12-26T00:34:38.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用xtrabackup备份mysql"><a href="#使用xtrabackup备份mysql" class="headerlink" title="使用xtrabackup备份mysql"></a>使用xtrabackup备份mysql</h1><h2 id="简介（Percona-XtraBackup-）简称PXB"><a href="#简介（Percona-XtraBackup-）简称PXB" class="headerlink" title="简介（Percona XtraBackup ）简称PXB##"></a>简介（<a href="https://www.percona.com/software/mysql-database/percona-xtrabackup" target="_blank" rel="noopener">Percona XtraBackup</a> ）简称PXB##</h2><blockquote><p>Xtrabackup是由percona开源的免费数据库热备份软件，它能对Innodb数据库和Xtradb存储引擎的数据库非阻塞地备份。（对于Myisam的备份同样需要加表锁），mysqldump备份方式是采用的逻辑备份，其最大的缺陷是备份和恢复速度较慢，如果数据库大于50G，mysqldump备份就不太适合。</p></blockquote><a id="more"></a><h2 id="优点"><a href="#优点" class="headerlink" title="优点##"></a>优点##</h2><ul><li>备份速度快，物理备份可靠</li><li>备份过程不会打断正在执行的事务（无需锁表）</li><li>能够基于压缩等功能节约磁盘空间和流量</li><li>自动备份校验</li><li>还原速度快</li><li>可以流传将备份传输到另一台机器上</li><li>在不增加服务器负载的情况下备份数据</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理##"></a>原理##</h2><blockquote><p>​    备份开始的时候，首先会开启一个后台检测进程，实时检测mysql redo到的变化，一旦发现有新的日志写入，立刻将日志记入后台日志文件xtrabackup_log中，之后赋值innodb的数据文件，系统表空间文件ibdatax，复制后，将上锁（读锁），flush tables with read lock，让后复制.frm MYI MYD等文件，最后执行 unlock tables（释放锁），最终停止xtrabackup_log。</p></blockquote><p>​        <img src="http://mysql.taobao.org/monthly/pic/2016-03-07/PXB-backup-procedure.png" alt="image "></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展##"></a>扩展##</h2><blockquote><p>​    在innodb内部会维护一个redo日志文件，我们也可以叫做事务日志文    件，事务日志会存储每一个Innodb表数据的记录修改。当Innodb启动时，Innodb会检查数据文件和事务日志。并执行两个步骤：它应用（前滚）已经提交的事务日志到数据文件，并将修改过但没有提交的数据进行回滚操作。</p><p>​    xtrabackup在启动时会记住log    sequence number（LSN），并且复制所有数据文件，复制过程需要一些时间，所以这期间如果数据文件有改动，那么将会使数据库处于一个不同的时间点。这时，Xtrabackup会运行一个后台进程，用于监测事务日志，并从事务日志复制最新的修改。xtrabackup必须持续的做这个操作，因为事务日志是会轮转重复的写入，并且事务日志可以被重用。所以xtrabackup自启动开始，就不停的将事务日志中每个数据文件的修改都记录下来。这就是xtrabackup的备份过程。</p><p>​    接下来是准备（prepare）过程。在这个过程中，xtrabackup使用之前复制的事务日志。对各个数据文件执行灾难恢复（就像mysql刚启动时要做的一样）。当这个过程结束后，数据库就可以做恢复还原了。</p><p>​    整个过程就是-备份-》准备。先将文件全部复制过来，在根据事务日志对部分操作进行回滚。</p><p>​    程序innobbackupex可以允许我们备份Myisam表和文件从而增加了便捷和功能。</p><p>​    innobbackupex会启动xtrabackup，直到xtrabackup复制数据文件后，然后执行FLUSH TABLES WITH READ LOCK 来阻止新的写入刷新到磁盘上。之后复制Myisam数据文件。最后UNLOCK TABLES （释放锁）。</p><p>​    备份Myisam和Innodb表最终会处于一致，在准备（prepare）过程结束后，Innodb表数据已经前滚到整个备份结束点，而不是回滚到xtrabackup感刚开始的点。这个时间点与执行FLUSH TABLES WITH READ LOCK的时间点相同，所以Myisam表数据与Innodb表数据是同步的。</p></blockquote><h2 id="xtrabackup增量备份"><a href="#xtrabackup增量备份" class="headerlink" title="xtrabackup增量备份"></a>xtrabackup增量备份</h2><ul><li><p>原理</p><blockquote><p>​    首先是建立在完全备份的基础上，记录下此时的检查点LSN</p><p>​    在进行增量备份时，比较表空间中每个页的LSN是否大于上次备份的LSN，若是则备份该页并记录当前检查点的LSN。</p></blockquote></li><li><p>优点：</p><ul><li>数据库太大没有足够的空间全量备份，增量备份能有效节省空间，并且效率高</li><li>支持热备份，备份过程不锁表（针对Innodb而言），不阻塞数据库读写。</li><li>每日备份只产生少量数据，也可采用远程备份，节省本地空间</li><li>备份恢复基于文件操作，降低直接对数据库操作风险</li><li>备份效率更高，恢复效率更高。</li></ul></li></ul><h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><p>软件包安装完后一共有4个可执行文件，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">usr</span><br><span class="line">├── bin</span><br><span class="line">│   ├── innobackupex</span><br><span class="line">│   ├── xbcrypt  #用来加密或解密备份的数据</span><br><span class="line">│   ├── xbstream  #用来解压或压缩xbstream格式的文件</span><br><span class="line">│   └── xtrabackup</span><br></pre></td></tr></table></figure><p>其中最主要的是 <code>innobackupex</code> 和 <code>xtrabackup</code>，前者是一个 perl 脚本，后者是 C/C++ 编译的二进制。</p><p><code>xtrabackup</code> 是用来备份 InnoDB 表的，不能备份非 InnoDB 表，和 mysqld server 没有交互；<code>innobackupex</code> 脚本用来备份非 InnoDB 表，同时会调用 <code>xtrabackup</code> 命令来备份 InnoDB 表，还会和 mysqld server 发送命令进行交互，如加读锁（FTWRL）、获取位点（SHOW SLAVE STATUS）等。简单来说，<code>innobackupex</code> 在 <code>xtrabackup</code> 之上做了一层封装。</p><p>一般情况下，我们是希望能备份 MyISAM 表的，虽然我们可能自己不用 MyISAM 表，但是 mysql 库下的系统表是 MyISAM 的，因此备份基本都通过 <code>innobackupex</code> 命令进行；另外一个原因是我们可能需要保存位点信息。</p><p>另外2个工具相对小众些，<code>xbcrypt</code> 是加解密用的；<code>xbstream</code> 类似于tar，是 Percona 自己实现的一种支持并发写的流文件格式。两都在备份和解压时都会用到（如果备份用了加密和并发）。</p><p>本文的介绍的主角是 <code>innobackupex</code> 和 <code>xtrabackup</code>。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载##"></a>下载##</h2><ul><li><p>安装percona仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装xtrabackup</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install percona-xtrabackup -y</span><br></pre></td></tr></table></figure></li><li><p>创建备份用户及设置权限（也可以直接使用root用户）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER ‘用户名’@'localhost' IDENTIFIED BY '密码';#创建</span><br><span class="line">GRANT RELOAD,LOCK TABLES,PROCESS,REPLICATION CLIENT ON *.* TO '用户名'@'localhost';#设置权限</span><br><span class="line">FLUSH PRIVILEGES;#刷新权限</span><br></pre></td></tr></table></figure></li><li><p>配置xtrabackup（可配置也可以已参数的形式写入）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.my.cnf</span><br><span class="line"></span><br><span class="line">[xtrabackup]</span><br><span class="line"></span><br><span class="line">user=创建的用户名</span><br><span class="line"></span><br><span class="line">password=密码</span><br></pre></td></tr></table></figure></li><li><p>创建备份使用的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/backup/mysql</span><br></pre></td></tr></table></figure></li></ul><h2 id="基于xtrabackup的备份和恢复"><a href="#基于xtrabackup的备份和恢复" class="headerlink" title="基于xtrabackup的备份和恢复##"></a>基于xtrabackup的备份和恢复##</h2><ul><li><p><em>xtrabackup</em> 只支持innodb引擎和xtradb引擎</p></li><li><p>语法：</p><ul><li>–backup 表示该操作代表备份操作</li><li>–target-dir 指定备份文件的路径</li><li>–user 备份的用户 （设定配置文件后，无需指定）</li><li>–password  用户密码（同上）</li><li>–socket 指定socket启动文件路径（不添加使用默认路径）</li><li>–incremental-basedir  表示在某个全量备份的基础上进行增备</li></ul></li><li><p>全量备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@ax mysql]# xtrabackup --backup --target-dir=/data/backup/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">以下是返回的结果</span></span><br><span class="line">191221 13:49:02  version_check Connecting to MySQL server with DSN 'dbi:mysql:;mysql_read_default_group=xtrabackup' as 'backuper'  (using password: YES).</span><br><span class="line">191221 13:49:02  version_check Connected to MySQL server</span><br><span class="line">191221 13:49:02  version_check Executing a version check against the server...</span><br><span class="line">191221 13:49:02  version_check Done.</span><br><span class="line">191221 13:49:02 Connecting to MySQL server host: localhost, user: backuper, password: set, port: not set, socket: not set</span><br><span class="line">Using server version 5.5.64-MariaDB</span><br><span class="line">xtrabackup version 2.3.10 based on MySQL server 5.6.24 Linux (x86_64) (revision id: bd0d4403f36)</span><br><span class="line">xtrabackup: uses posix_fadvise().</span><br><span class="line">xtrabackup: cd to /var/lib/mysql</span><br><span class="line">xtrabackup: open files limit requested 0, set to 65535</span><br><span class="line">xtrabackup: using the following InnoDB configuration:</span><br><span class="line"><span class="meta">#</span><span class="bash">省略.....</span></span><br><span class="line">MySQL binlog position: filename 'mysql-bin.000001', position '245'</span><br><span class="line">191221 13:49:03 [00] Writing backup-my.cnf</span><br><span class="line">191221 13:49:03 [00]        ...done</span><br><span class="line">191221 13:49:03 [00] Writing xtrabackup_info</span><br><span class="line">191221 13:49:03 [00]        ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (8622624) to (8622624) was copied.</span><br><span class="line">191221 13:49:04 completed OK!#代表成功全量备份</span><br></pre></td></tr></table></figure></li><li><p>在全量备份的基础上进行增量备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">xtrabackup --backup --target-dir=/data/mysql/增量备份文件夹的名字（自定义）--incremental-basedir=/全量备份文件路径</span></span><br><span class="line">[root@ax mysql]# xtrabackup --backup --target-dir=/data/backup/mysql/mysql_increment1 --incremental-basedir=/data/backup/mysql</span><br><span class="line">191221 14:00:43  version_check Connecting to MySQL server with DSN 'dbi:mysql:;mysql_read_default_group=xtrabackup' as 'backuper'  (using password: YES).</span><br><span class="line">191221 14:00:43  version_check Connected to MySQL server</span><br><span class="line">191221 14:00:43  version_check Executing a version check against the server...</span><br><span class="line">191221 14:00:43  version_check Done.</span><br><span class="line">191221 14:00:43 Connecting to MySQL server host: localhost, user: backuper, password: set, port: not set, socket: not set</span><br><span class="line">Using server version 5.5.64-MariaDB</span><br><span class="line">xtrabackup version 2.3.10 based on MySQL server 5.6.24 Linux (x86_64) (revision id: bd0d4403f36)</span><br><span class="line">incremental backup from 8622624 is enabled.</span><br><span class="line">xtrabackup: uses posix_fadvise().</span><br><span class="line">xtrabackup: cd to /var/lib/mysql</span><br><span class="line">xtrabackup: open files limit requested 0, set to 65535</span><br><span class="line"><span class="meta">#</span><span class="bash">省略....</span></span><br><span class="line">xtrabackup: Stopping log copying thread.</span><br><span class="line">.191221 14:00:45 &gt;&gt; log scanned up to (8622624)</span><br><span class="line"></span><br><span class="line">191221 14:00:45 Executing UNLOCK TABLES</span><br><span class="line">191221 14:00:45 All tables unlocked</span><br><span class="line">191221 14:00:45 Backup created in directory '/data/backup/mysql/mysql_increment1/'</span><br><span class="line">MySQL binlog position: filename 'mysql-bin.000001', position '245'</span><br><span class="line">191221 14:00:45 [00] Writing backup-my.cnf</span><br><span class="line">191221 14:00:45 [00]        ...done</span><br><span class="line">191221 14:00:45 [00] Writing xtrabackup_info</span><br><span class="line">191221 14:00:45 [00]        ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (8622624) to (8622624) was copied.</span><br><span class="line">191221 14:00:45 completed OK!#代表增量备份成功</span><br></pre></td></tr></table></figure></li><li><p>在增量备份的基础上继续增量备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在第一次增量备份后，以后的每一次增量备份都是以上一次增量备份为基准</span></span><br><span class="line"><span class="meta">#</span><span class="bash">xtrabackup --backup --target-dir=增量备份文件路径 --incremental-basedir=上次增量备份的文件位置</span></span><br><span class="line">[root@ax ~]# xtrabackup --backup --target-dir=/data/backup/mysql_increment2 --incremental-basedir=/data/backup/mysql/mysql_increment1</span><br><span class="line">191221 18:39:28  version_check Connecting to MySQL server with DSN 'dbi:mysql:;mysql_read_default_group=xtrabackup' as 'backuper'  (using password: YES).</span><br><span class="line">191221 18:39:28  version_check Connected to MySQL server</span><br><span class="line">191221 18:39:28  version_check Executing a version check against the server...</span><br><span class="line">191221 18:39:28  version_check Done.</span><br><span class="line">191221 18:39:28 Connecting to MySQL server host: localhost, user: backuper, password: set, port: not set, socket: not set</span><br><span class="line">Using server version 5.5.64-MariaDB</span><br><span class="line">xtrabackup version 2.3.10 based on MySQL server 5.6.24 </span><br><span class="line"><span class="meta">#</span><span class="bash">省略...</span></span><br><span class="line">191221 18:39:32 Executing UNLOCK TABLES</span><br><span class="line">191221 18:39:32 All tables unlocked</span><br><span class="line">191221 18:39:32 Backup created in directory '/data/backup/mysql_increment2/'</span><br><span class="line">MySQL binlog position: filename 'mysql-bin.000001', position '245'</span><br><span class="line">191221 18:39:32 [00] Writing backup-my.cnf</span><br><span class="line">191221 18:39:32 [00]        ...done</span><br><span class="line">191221 18:39:32 [00] Writing xtrabackup_info</span><br><span class="line">191221 18:39:32 [00]        ...done</span><br><span class="line">xtrabackup: Transaction log of lsn (8622624) to (8622624) was copied.</span><br><span class="line">191221 18:39:32 completed OK!#代表成功</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用xtrabackup恢复"><a href="#使用xtrabackup恢复" class="headerlink" title="使用xtrabackup恢复##"></a>使用xtrabackup恢复##</h2><ul><li><p>语法：</p><ul><li><p>xtrabackup –prepare –apply-log-only –target-dir=全量备份文件路径</p><ul><li>–prepare  表示还原</li><li>–apply-log-only 表示不回滚事务，因为后面有基于全备的增量备份，所以不需要回滚，如果没有增量备份则可以不添加。</li></ul></li><li><p>将第一次增量备份加载至全备中（增量备份多每次都要以上一次加载的备份文件为基准，命令相同，只需修改增量备份文件的路径即可。）</p></li><li><p>在加载最后一次的增量备份文件时，不需要添加–apply-log-only，因为增量备份都加载完成了，所以需要事务回滚。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">xtrabackup --prepare --apply-log-only --target-dir=全量备份文件路径 --incremental-dir=增量备份文件路径</span></span><br><span class="line">[root@ax ~]# xtrabackup --prepare --apply-log-only --target-dir=/data/backup/mysql --incremental-dir=/data/backup/mysql_increment1</span><br><span class="line">xtrabackup version 2.3.10 based on MySQL server 5.6.24 Linux (x86_64) (revision id: bd0d4403f36)</span><br><span class="line">incremental backup from 8622624 is enabled.</span><br><span class="line">xtrabackup: cd to /data/backup/mysql/</span><br><span class="line">xtrabackup: This target seems to be already </span><br><span class="line"><span class="meta">#</span><span class="bash">省略...</span></span><br><span class="line">191221 18:56:43 [01]        ...done</span><br><span class="line">191221 18:56:43 [01] Copying /data/backup/mysql_increment1/mysql/db.MYD to ./mysql/db.MYD</span><br><span class="line">191221 18:56:43 [01]        ...done</span><br><span class="line">191221 18:56:43 [00] Copying /data/backup/mysql_increment1//xtrabackup_binlog_info to ./xtrabackup_binlog_info</span><br><span class="line">191221 18:56:43 [00]        ...done</span><br><span class="line">191221 18:56:43 [00] Copying /data/backup/mysql_increment1//xtrabackup_info to ./xtrabackup_info</span><br><span class="line">191221 18:56:43 [00]        ...done</span><br><span class="line">191221 18:56:43 completed OK!#代表成功</span><br><span class="line"><span class="meta">#</span><span class="bash">最后一加载增量备份到全量备份</span></span><br><span class="line">[root@ax ~]# xtrabackup --prepare --target-dir=/data/backup/mysql --incremental-dir=/data/backup/mysql_increment2</span><br><span class="line"><span class="meta">#</span><span class="bash">返回也上面最后一行的结果代表成功</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>恢复</p><ul><li><p>停止mysql服务</p></li><li><p>清空mysql的数据目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show variables like &apos;datadir&apos;; #查询数据目录</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | /var/lib/mysql/ |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#cd到指定目录 rm -rf ./*  这是模拟数据库损坏</span><br></pre></td></tr></table></figure></li><li><p>恢复 <code>xtrabackup --copy-back --target-dir=/data/backup/mysql</code>  –copy-back 将备份的数据目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ax ~]# xtrabackup --copy-back --target-dir=/data/backup/mysql</span><br><span class="line">xtrabackup version 2.3.10 based on MySQL server 5.6.24 Linux (x86_64) (revision id: bd0d4403f36)</span><br><span class="line">191221 19:23:55 [01] Copying ib_logfile0 to /var/lib/mysql/ib_logfile0</span><br><span class="line">191221 19:23:55 [01]        ...done</span><br><span class="line">191221 19:23:55 [01] Copying ib_logfile1 to /var/lib/mysql/ib_logfile1</span><br><span class="line">191221 19:23:55 [01]        ...done</span><br><span class="line">191221 19:23:55 [01] Copying ibdata1 to /var/</span><br></pre></td></tr></table></figure></li><li><p>恢复后的数据目录下的文件及文件夹，用户数属于root的,mysql用户是没有权限使用的，所以需要重新赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@ax mysql]# ll</span><br><span class="line">total 36896</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 exam</span><br><span class="line">-rw-r----- 1 root root 27262976 Dec 21 19:23 ibdata1</span><br><span class="line">-rw-r----- 1 root root  5242880 Dec 21 19:23 ib_logfile0</span><br><span class="line">-rw-r----- 1 root root  5242880 Dec 21 19:23 ib_logfile1</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 mysql</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 nextcloud</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 performance_schema</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 siyouyun</span><br><span class="line">drwx------ 2 root root     4096 Dec 21 19:23 text</span><br><span class="line">-rw-r----- 1 root root       23 Dec 21 19:23 xtrabackup_binlog_pos_innodb</span><br><span class="line">-rw-r----- 1 root root      548 Dec 21 19:23 xtrabackup_info</span><br><span class="line"><span class="meta">#</span><span class="bash">重新赋予权限，所属者和所属组改为mysql</span></span><br><span class="line">[root@ax mysql]# chown -R mysql:mysql ../mysql</span><br><span class="line">[root@ax mysql]# ll</span><br><span class="line">total 36896</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 exam</span><br><span class="line">-rw-r----- 1 mysql mysql 27262976 Dec 21 19:23 ibdata1</span><br><span class="line">-rw-r----- 1 mysql mysql  5242880 Dec 21 19:23 ib_logfile0</span><br><span class="line">-rw-r----- 1 mysql mysql  5242880 Dec 21 19:23 ib_logfile1</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 mysql</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 nextcloud</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 performance_schema</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 siyouyun</span><br><span class="line">drwx------ 2 mysql mysql     4096 Dec 21 19:23 text</span><br><span class="line">-rw-r----- 1 mysql mysql       23 Dec 21 19:23 xtrabackup_binlog_pos_innodb</span><br><span class="line">-rw-r----- 1 mysql mysql      548 Dec 21 19:23 xtrabackup_info</span><br></pre></td></tr></table></figure></li><li><p>重新启动mysql服务查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@ax mysql]# systemctl restart mariadb</span><br><span class="line">[root@ax mysql]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.64-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| exam               |</span><br><span class="line">| mysql              |</span><br><span class="line">| nextcloud          |</span><br><span class="line">| performance_schema |</span><br><span class="line">| siyouyun           |</span><br><span class="line">| text               |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash">恢复成功</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>单表/单库备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单表：xtrabackup --backup --datadir=数据目录路径 --tables='库名.表名' --target-dir=备份文件路径</span><br><span class="line"></span><br><span class="line">--tables:单引号中填写databases.tables</span><br><span class="line"></span><br><span class="line">单库：trabackup --backup  --databases=数据库名 --target-dir=备份文件路径 </span><br><span class="line">--databases:库名（database）</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ax ~]# xtrabackup --backup --datadir=/var/lib/mysql --target-dir=/data/backup/mysql --tables='exam.a1';</span><br><span class="line"><span class="meta">#</span><span class="bash">还原也需要进行事务回滚</span></span><br><span class="line">[root@ax exam]# xtrabackup --prepare --target-dir=单表或单库备份文件</span><br><span class="line"><span class="meta">#</span><span class="bash">停止数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录中的原表删除，复制备份文件中单表或单库文件到数据目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置所属用户和组到mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">成功</span></span><br></pre></td></tr></table></figure></li></ul><p>##使用innobackupex的备份与恢复</p><ul><li><p>innobackupex封装了xtrabackup，支持Myisam的数据表</p></li><li><p>innobackupex完整备份后生成的几个重要文件：</p><ul><li>记录当前最新的Log position</li><li>xtrabackup_binlog_pos_innodb:innodb log position</li><li>xtrabackup_checkpoints:存放备份的起始LSN（beginlsn），和结束的位置LSN（endlsn）</li><li>增量备份需要上次备份的endlsn</li></ul></li><li><p>innobackupex命令相当于冷备份，复制数据目录的索引，数据结构文件，为保证数据一致，需要短暂的锁表（时间的长短依赖于Myisam表的大小。）</p></li><li><p>参数解释（同样适用于xtrabackup）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--defaults-file：指定my.cnf参数文件的位置[此配置文件里必须指定datadir]</span></span><br><span class="line"><span class="comment">#--apply-log：同xtrabackup的--prepare参数,一般情况下,在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此，此时数据 文件仍处理不一致状态。--apply-log的作用是通过回滚未提交的事务及同步已经提交的事务至数据文件使数据文件处于一致性状态。</span></span><br><span class="line"><span class="comment">#--copy-back：做数据恢复时将备份数据文件拷贝到MySQL服务器的datadir</span></span><br><span class="line"><span class="comment">#--remote-host=HOSTNAME： 通过ssh将备份数据存储到进程服务器上</span></span><br><span class="line"><span class="comment">#--stream=[tar]：备份文件输出格式, 该文件可在XtarBackup binary文件中获得. 在使用参数stream=tar备份的时候,你的xtrabackup_logfile可能会临时放在/tmp目录下,如果你备份的时候并发写入较大的话,xtrabackup_logfile可能会很大(5G+),很可能会撑满你的/tmp目录,可以通过参数--tmpdir指定目录来解决这个问题.</span></span><br><span class="line"><span class="comment">#--tmpdir=DIRECTORY：当有指定--remote-host or --stream时, 事务日志临时存储的目录, 默认采用MySQL配置文件中所指定的临时目录tmpdir</span></span><br><span class="line"><span class="comment">#--redo-only --apply-log：强制备份日志时只redo,跳过rollback,这在做增量备份时非常必要</span></span><br><span class="line"><span class="comment">#--use-memory=*：该参数在prepare的时候使用,控制prepare时innodb实例使用的内存</span></span><br><span class="line"><span class="comment">#--databases=LIST：列出需要备份的databases,如果没有指定该参数,所有包含MyISAM和InnoDB表的database都会被备份</span></span><br><span class="line"><span class="comment">#--slave-info：备份从库, 加上--slave-info备份目录下会多生成一个xtrabackup_slave_info 文件, 这里会保存主日志文件以及偏移, 文件内容类似于:CHANGE MASTER TO MASTER_LOG_FILE='', MASTER_LOG_POS=0</span></span><br><span class="line"><span class="comment">#--socket=SOCKET：指定mysql.sock所在位置，以便备份进程登录mysql.</span></span><br></pre></td></tr></table></figure></li><li><p>全量备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ax backup]# innobackupex --user=备份账户 --password=密码 备份文件存储路径</span><br><span class="line">191223 10:08:18 innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the end of a successful backup run innobackupex</span><br><span class="line">           prints "completed OK!".</span><br><span class="line"><span class="meta">#</span><span class="bash">省略...</span></span><br><span class="line">191223 10:08:20 completed OK!#代表成功</span><br></pre></td></tr></table></figure></li><li><p>全量恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行innobackupex --apply-log --use-memory=size（可加可不加） 备份文件路径    这一步是准备操作。apply-only在上面介绍过。</span></span><br><span class="line">[root@ax backup]# innobackupex --apply-only --use-memory=4G /data/backup/2019-12-23_10-08-18</span><br><span class="line">191223 10:16:02 innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the end of a successful backup run innobackupex</span><br><span class="line">           prints "completed OK!".</span><br><span class="line"><span class="meta">#</span><span class="bash">省略...</span></span><br><span class="line">191223 10:16:04 completed OK!#代表成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">接下来是恢复</span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭mysql服务,模拟数据库损坏，清空数据目录（不清空会报错）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行 innobackupex --copy-back 备份文件路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">给予mysql数据目录下所有文件的操作权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动mysql</span></span><br></pre></td></tr></table></figure></li><li><p>增量备份（所有的增量备份都是在全量备份的基础上进行的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行 innobackupex --incremental 指定增量文件存储路径 --incremental-basedir=第一次是全量备份的文件路径/在增量的备份的基础上继续增量这里就需要填写上次增量备份文件的路径</span></span><br><span class="line">[root@ax backup]# innobackupex --incremental /data/backup/ --incremental-basedir=/data/backup/2019-12-23_11-25-13/</span><br><span class="line">xtrabackup: Transaction log of lsn (8626208) to (8626208) was copied.</span><br><span class="line">191223 11:34:20 completed OK!#代表成功</span><br></pre></td></tr></table></figure></li><li><p>恢复：（将各个增量备份的数据文件合并到全量备份的目录下，最终是从全量备份的这个目录上进行恢复的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">准备工作</span></span><br><span class="line"><span class="meta">#</span><span class="bash">innobackupex --apply-log --redo-only 全被文件路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">innobackupex --apply-log --redo-only 全备路径 --incremental-dir=第一次增备路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">innobackupex --apply-log --redo-only 全备文件路径 --incremental-dir=第二次增备路径 <span class="comment">#多次增备执行多次</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">innobackupex --apply-log 全备路径 --incremental-dir=最后一次增备路径 最后一次不需要填加--redo-only参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复</span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭mysql服务,模拟数据库损坏，清空数据目录（不清空会报错）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">innobackupex --copy-back 全量备份路径 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">给予mysql数据目录下所有文件的操作权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动mysql</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用xtrabackup备份mysql&quot;&gt;&lt;a href=&quot;#使用xtrabackup备份mysql&quot; class=&quot;headerlink&quot; title=&quot;使用xtrabackup备份mysql&quot;&gt;&lt;/a&gt;使用xtrabackup备份mysql&lt;/h1&gt;&lt;h2 id=&quot;简介（Percona-XtraBackup-）简称PXB&quot;&gt;&lt;a href=&quot;#简介（Percona-XtraBackup-）简称PXB&quot; class=&quot;headerlink&quot; title=&quot;简介（Percona XtraBackup ）简称PXB##&quot;&gt;&lt;/a&gt;简介（&lt;a href=&quot;https://www.percona.com/software/mysql-database/percona-xtrabackup&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Percona XtraBackup&lt;/a&gt; ）简称PXB##&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Xtrabackup是由percona开源的免费数据库热备份软件，它能对Innodb数据库和Xtradb存储引擎的数据库非阻塞地备份。（对于Myisam的备份同样需要加表锁），mysqldump备份方式是采用的逻辑备份，其最大的缺陷是备份和恢复速度较慢，如果数据库大于50G，mysqldump备份就不太适合。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="http://laxe.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>nginx负载均衡</title>
    <link href="http://laxe.top/2019/12/26/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://laxe.top/2019/12/26/负载均衡/</id>
    <published>2019-12-26T00:27:23.465Z</published>
    <updated>2019-12-26T00:35:22.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改nginx-conf配置文件"><a href="#修改nginx-conf配置文件" class="headerlink" title="修改nginx.conf配置文件"></a>修改nginx.conf配置文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="attribute">upstream</span> mytest &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">114.55.39.15</span>;  <span class="comment">#负载均衡服务器群</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">47.98.237.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>假如有default.conf修改为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>      /root/myweb_access.log;</span><br><span class="line">    <span class="attribute">error_log</span>       /root/myweb_error.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://mytest;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">        <span class="attribute">root</span> /root/public;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1、轮询（默认）</span><br><span class="line">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、权重 weight</span><br><span class="line">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14 <span class="attribute">weight</span>=3;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15 <span class="attribute">weight</span>=7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、ip_hash（ IP绑定）</span><br><span class="line">上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。</span><br><span class="line"></span><br><span class="line">我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。</span><br><span class="line"></span><br><span class="line">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.14:88;</span><br><span class="line">   <span class="built_in"> server </span>192.168.0.15:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、fair（第三方插件）</span><br><span class="line">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">   <span class="built_in"> server </span>server1;</span><br><span class="line">   <span class="built_in"> server </span>server2;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、url_hash（第三方插件）</span><br><span class="line">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line"></span><br><span class="line">upstream backserver &#123;</span><br><span class="line">   <span class="built_in"> server </span>squid1:3128;</span><br><span class="line">   <span class="built_in"> server </span>squid2:3128;</span><br><span class="line">    hash <span class="variable">$request_uri</span>;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改nginx-conf配置文件&quot;&gt;&lt;a href=&quot;#修改nginx-conf配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改nginx.conf配置文件&quot;&gt;&lt;/a&gt;修改nginx.conf配置文件&lt;/h2&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;user&lt;/span&gt;  root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;worker_processes&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;error_log&lt;/span&gt;  /var/log/nginx/error.log &lt;span class=&quot;literal&quot;&gt;warn&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;pid&lt;/span&gt;        /var/run/nginx.pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;events&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;http&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;include&lt;/span&gt;       /etc/nginx/mime.types;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;default_type&lt;/span&gt;  application/octet-stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;log_format&lt;/span&gt;  main  &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$remote_addr&lt;/span&gt; - &lt;span class=&quot;variable&quot;&gt;$remote_user&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$time_local&lt;/span&gt;] &quot;&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$status&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &quot;&lt;span class=&quot;variable&quot;&gt;$http_referer&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&quot;&lt;span class=&quot;variable&quot;&gt;$http_user_agent&lt;/span&gt;&quot; &quot;&lt;span class=&quot;variable&quot;&gt;$http_x_forwarded_for&lt;/span&gt;&quot;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;access_log&lt;/span&gt;  /var/log/nginx/access.log  main;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;sendfile&lt;/span&gt;        &lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#tcp_nopush     on;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;keepalive_timeout&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#gzip  on;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;upstream&lt;/span&gt; mytest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;114.55.39.15&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;#负载均衡服务器群&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;47.98.237.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;include&lt;/span&gt; /etc/nginx/conf.d/&lt;span class=&quot;regexp&quot;&gt;*.conf&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://laxe.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制</title>
    <link href="http://laxe.top/2019/12/26/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B62/"/>
    <id>http://laxe.top/2019/12/26/redis主从复制2/</id>
    <published>2019-12-26T00:26:33.567Z</published>
    <updated>2019-12-26T00:33:17.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reids主从"><a href="#Reids主从" class="headerlink" title="Reids主从"></a>Reids主从</h2><p><strong>参考链接：</strong></p><p><a href="https://www.cnblogs.com/leeSmall/p/8398401.html" target="_blank" rel="noopener">Redis主从复制和哨兵 参考1</a></p><p><a href="https://www.cnblogs.com/chenhuabin/p/10048854.html" target="_blank" rel="noopener">Redis主从复制和哨兵 参考2</a></p><p><a href="https://www.cnblogs.com/lxx666/articles/10693844.html" target="_blank" rel="noopener">Redis主从架构和主从从架构集群搭建详细步骤</a></p><p><a href="https://www.cnblogs.com/wade-luffy/p/9639986.html" target="_blank" rel="noopener">Redis主从复制原理</a></p><p><a href="http://doc.redisfans.com/topic/replication.html" target="_blank" rel="noopener">Redis复制官方文档翻译</a></p><blockquote><p>​    主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。</p><p>​    默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p></blockquote><a id="more"></a><h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ol><li><p><strong>数据冗余：</strong>主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p></li><li><p><strong>故障恢复：</strong>当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p></li><li><p><strong>负载均衡：</strong>在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p></li><li><p><strong>高可用基石：</strong>主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p></li></ol><h3 id="主从拓扑结构"><a href="#主从拓扑结构" class="headerlink" title="主从拓扑结构"></a>主从拓扑结构</h3><p>​    <strong>一主一从：</strong></p><p><img src="C:%5CUsers%5Casus%5CDesktop%5C1539768-20181201112713274-1680086476.png" alt="1539768-20181201112713274-1680086476"></p><p>　　这一结构主要用于主节点故障从节点，当主节点的“写”命令并发高且需要持久化，可以只在从节点开启AOF（主节点不需要），这样即保证了数据的安全性，也避免持久化对主节点的影响。<br>　　<br>​    <strong>一主多从：</strong></p><p><img src="C:%5CUsers%5Casus%5CDesktop%5C1539768-20181201112740108-1961344396.png" alt="1539768-20181201112740108-1961344396"></p><p>　　这一结构主要针对“读”较多的场景，“读”由多个从节点来分担，但节点越多，主节点同步到多节点的次数也越多，影响带宽，也加重主节点的稳定。<br>　　<br>​    <strong>树状主从:</strong></p><p><img src="C:%5CUsers%5Casus%5CDesktop%5C1539768-20181201112824130-1051891659.png" alt="1539768-20181201112824130-1051891659"></p><p>　　这一结构是对一主多从的补充，主节点只推送一次数据到slave1和slave2，再由从slave2推送到slave3和 slave4，减轻主节点推送的压力。</p><h2 id="主从复制的实现原理"><a href="#主从复制的实现原理" class="headerlink" title="主从复制的实现原理"></a>主从复制的实现原理</h2><p>主从复制过程大体可以分为3个阶段：<strong>连接建立阶段（即准备阶段）</strong>、<strong>数据同步阶段</strong>、<strong>命令传播阶段</strong>；</p><h3 id="连接建立阶段"><a href="#连接建立阶段" class="headerlink" title="连接建立阶段"></a>连接建立阶段</h3><h4 id="step1：保存主节点信息"><a href="#step1：保存主节点信息" class="headerlink" title="step1：保存主节点信息"></a>step1：保存主节点信息</h4><p>​    从节点服务器内部维护了两个字段，即<strong>masterhost</strong>和<strong>masterport</strong>字段，用于存储主节点的<strong>ip</strong>和<strong>port</strong>信息。</p><p>​    <strong>slaveof是异步命令，从节点完成主节点ip和port的保存后，向发送slaveof命令的客户端直接返回OK，实际的复制操作在这之后才开始进行。</strong></p><h4 id="step2：建立socket连接"><a href="#step2：建立socket连接" class="headerlink" title="step2：建立socket连接"></a>step2：建立socket连接</h4><p>​    <strong>从节点每秒1次调用复制定时函数replicationCron()</strong>，如果发现了有主节点可以连接，便会根据主节点的ip和port，创建socket连接。</p><p><strong>如果连接成功：</strong></p><p>​    <strong>从节点：</strong>为该socket建立一个专门处理复制工作的文件事件处理器，负责后续的复制工作，如接收RDB文件、接收命令传播等。</p><p>​    <strong>主节点：</strong>接收到从节点的socket连接后（即accept之后），为该socket创建相应的客户端状态，并将从节点看做是连接到主节点的一个客户端，后面的步骤会以从节点向主节点发送命令请求的形式来进行。</p><h4 id="step3：发送ping命令"><a href="#step3：发送ping命令" class="headerlink" title="step3：发送ping命令"></a>step3：发送ping命令</h4><p>​    从节点成为主节点的客户端之后，发送ping命令进行首次请求，<strong>目的是：检查socket连接是否可用，以及主节点当前是否能够处理请求。</strong></p><p><strong>从节点发送ping命令后，可能出现3种情况：</strong></p><ol><li><p>返回pong：说明socket连接正常，且主节点当前可以处理请求，复制过程继续。</p></li><li><p>超时：一定时间后从节点仍未收到主节点的回复，说明socket连接不可用，则从节点断开socket连接，并重连。</p></li><li><p>返回pong以外的结果：如果主节点返回其他结果，如正在处理超时运行的脚本，说明主节点当前无法处理命令，则从节点断开socket连接，并重连。</p></li></ol><h4 id="step4：身份验证"><a href="#step4：身份验证" class="headerlink" title="step4：身份验证"></a>step4：身份验证</h4><p>如果从节点中设置了<strong>masterauth</strong>选项，则从节点需要向主节点进行身份验证；没有设置该选项，则不需要验证。</p><p>从节点进行身份验证是通过向主节点发送auth命令进行的，auth命令的参数即为配置文件中的masterauth的值。</p><p>如果主节点设置密码的状态，与从节点masterauth的状态一致（一致是指都存在，且密码相同，或者都不存在），则身份验证通过，复制过程继续；如果不一致，则从节点断开socket连接，并重连。</p><h4 id="step5：发送从节点端口信息"><a href="#step5：发送从节点端口信息" class="headerlink" title="step5：发送从节点端口信息"></a>step5：发送从节点端口信息</h4><p>身份验证之后，从节点会向主节点发送其监听的端口号，主节点将该信息保存到该从节点对应的客户端的slave_listening_port字段中；<strong>该端口信息除了在主节点中执行info Replication时显示以外，没有其他作用。</strong></p><h3 id="数据同步阶段"><a href="#数据同步阶段" class="headerlink" title="数据同步阶段"></a>数据同步阶段</h3><p>主从节点之间的连接建立以后，便可以开始进行数据同步，该阶段可以理解为从节点数据的初始化。</p><p>具体执行的方式是：从节点向主节点发送<strong>psync命令</strong>，开始同步。</p><p>数据同步阶段是主从复制最核心的阶段，根据主从节点当前状态的不同，可以分为<strong>全量复制和部分复制</strong>。</p><blockquote><p>在数据同步阶段之前，从节点是主节点的客户端，主节点不是从节点的客户端；而到了这一阶段及以后，主从节点互为客户端。原因在于：在此之前，主节点只需要响应从节点的请求即可，不需要主动发请求，而在数据同步阶段和后面的命令传播阶段，主节点需要主动向从节点发送请求（如推送缓冲区中的写命令），才能完成复制。</p></blockquote><h3 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h3><p>​    数据同步阶段完成后，主从节点进入命令传播阶段；在这个阶段主节点将自己执行的写命令发送给从节点，从节点接收命令并执行，从而保证主从节点数据的一致性。</p><p>​    在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。</p><p><strong>PS：</strong></p><p>​    <strong>延迟与不一致：</strong>命令传播是异步的过程，即主节点发送写命令后并不会等待从节点的回复；因此实际上主从节点之间很难保持实时的一致性，延迟在所难免。数据不一致的程度，与主从节点之间的网络状况、主节点写命令的执行频率、以及主节点中的repl-disable-tcp-nodelay配置等有关。</p><p>​    <strong>repl-disable-tcp-nodelay no：</strong>该配置作用于命令传播阶段，控制主节点是否禁止与从节点的TCP_NODELAY；默认no，即不禁止TCP_NODELAY。当设置为yes时，TCP会对包进行合并从而减少带宽，但是发送的频率会降低，从节点数据延迟增加，一致性变差；具体发送频率与Linux内核的配置有关，默认配置为40ms。当设置为no时，TCP会立马将主节点的数据发送给从节点，带宽增加但延迟变小。一般来说，只有当应用对Redis数据不一致的容忍度较高，且主从节点之间网络状况不好时，才会设置为yes；多数情况使用默认值no。</p><h3 id="【数据同步阶段】全量复制和部分复制"><a href="#【数据同步阶段】全量复制和部分复制" class="headerlink" title="【数据同步阶段】全量复制和部分复制"></a>【数据同步阶段】全量复制和部分复制</h3><p>在Redis2.8以前，从节点向主节点发送sync命令请求同步数据，此时的同步方式是全量复制；</p><p>在Redis2.8以后，从节点可以发送psync命令请求同步数据，此时根据主从节点当前状态的不同，同步方式可能是全量复制或部分复制。</p><ol><li>全量复制：用于初次复制或其他无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作。</li><li>部分复制：用于网络中断等情况后的复制，只将中断期间主节点执行的写命令发送给从节点，与全量复制相比更加高效。需要注意的是，如果网络中断时间过长，导致主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制。</li></ol><h4 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h4><p><strong>Redis通过psync命令进行全量复制的过程如下：</strong></p><ol><li><p>从节点判断无法进行部分复制，向主节点发送全量复制的请求；或从节点发送部分复制的请求，但主节点判断无法进行全量复制；</p></li><li><p>主节点收到全量复制的命令后，执行bgsave，在后台生成RDB文件，并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令。</p></li><li><p>主节点的bgsave执行完成后，将RDB文件发送给从节点；从节点首先清除自己的旧数据，然后载入接收的RDB文件，将数据库状态更新至主节点执行bgsave时的数据库状态。</p></li><li><p>主节点将前述复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态。</p></li><li><p>如果从节点开启了AOF，则会触发bgrewriteaof的执行，从而保证AOF文件更新至主节点的最新状态。</p></li></ol><p><strong>通过全量复制的过程可以看出，全量复制是非常重型的操作：</strong></p><ol><li><p>主节点通过<strong>bgsave</strong>命令<strong>fork</strong>子进程进行<strong>RDB</strong>持久化，该过程是非常消耗CPU、内存(页表复制)、硬盘IO的；</p></li><li><p>主节点通过网络将RDB文件发送给从节点，对主从节点的带宽都会带来很大的消耗。</p></li><li><p>从节点清空老数据、载入新RDB文件的过程是阻塞的，无法响应客户端的命令；如果从节点执行bgrewriteaof，也会带来额外的消耗。</p></li></ol><h4 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h4><p>​    由于全量复制在主节点数据量较大时效率太低，因此Redis2.8开始提供部分复制，用于处理网络中断时的数据同步。</p><p>​    部分复制的实现，依赖于三个重要的概念：复制偏移量，复制积压缓冲区，服务器运行ID</p><h5 id="offset-复制偏移量"><a href="#offset-复制偏移量" class="headerlink" title="offset 复制偏移量"></a>offset 复制偏移量</h5><p>​        在主从复制的Master(主节点)和Slave(从节点)双方都会各自维持一个offset，代表的是<strong>主节点向从节点传递的字节数</strong>；Master成功发送N个字节的命令后会将Master的offset加上N，Slave在接收到N个字节命令后同样会将Slave的offset增加N。Master和Slave如果状态是一致的那么它的的offset也应该是一致的。</p><p>​        offset用于判断主从节点的数据库状态是否一致：如果二者offset相同，则一致；如果offset不同，则不一致，此时可以根据两个offset找出从节点缺少的那部分数据。例如，如果主节点的offset是1000，而从节点的offset是500，那么部分复制就需要将offset为501-1000的数据传递给从节点。而offset为501-1000的数据存储的位置，就是下面要介绍的复制积压缓冲区。</p><h5 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h5><p>  复制积压缓冲区是由<strong>Master(主节点)维护的一个固定长度的FIFO队列(先进先出)</strong>，默认大小1MB；当主节点开始有从节点时创建，它的作用是缓存已经传播出去的命令。当Master进行命令传播时，不仅将命令发送给所有Slave，还会将命令写入到复制积压缓冲区里面。注意，无论主节点有一个还是多个从节点，都只需要一个复制积压缓冲区。</p><p>​        除了存储写命令，复制积压缓冲区中还存储了其中的每个字节对应的复制偏移量（offset）。由于复制积压缓冲区定长且是先进先出，所以它保存的是主节点最近执行的写命令；时间较早的写命令会被挤出缓冲区。</p><p>​        由于该缓冲区长度固定且有限，因此可以备份的写命令也有限，当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。反过来说，为了提高网络中断时部分复制执行的概率，可以根据需要增大复制积压缓冲区的大小(通过配置repl-backlog-size)；例如如果网络中断的平均时间是60s，而主节点平均每秒产生的写命令(特定协议格式)所占的字节数为100KB，则复制积压缓冲区的平均需求为6MB，保险起见，可以设置为12MB，来保证绝大多数断线情况都可以使用部分复制。</p><p><strong>从节点将offset发送给主节点后，主节点根据offset和缓冲区大小决定能否执行部分复制：</strong></p><ul><li><strong>如果offset偏移量之后的数据，仍然都在复制积压缓冲区里，则执行部分复制；</strong></li><li><strong>如果offset偏移量之后的数据已不在复制积压缓冲区中（数据已被挤出），则执行全量复制。</strong></li></ul><h5 id="runid-服务器运行ID"><a href="#runid-服务器运行ID" class="headerlink" title="runid 服务器运行ID"></a>runid 服务器运行ID</h5><p>​        每个Redis服务器(无论主从)在启动时都会自动生成一个表明自己身份的随机ID(每次启动都不一样)，由40个随机的十六进制字符组成。在PSYNC中发送的这个ID是指之前连接的Master的ID，如果没保存这个ID，PSYNC命令会使用<strong>”PSYNC ? -1”</strong> 这种形式发送给Master，表示需要全量复制。</p><p>​        每个Redis节点，在启动时都会自动生成一个随机ID，由40个随机的十六进制字符组成；</p><p>runid用来唯一识别一个Redis节点。<strong>通过info Server命令，可以查看节点的runid。</strong></p><p>​        主从节点初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来；当断线重连时，从节点会将这个runid发送给主节点；</p><p><strong>主节点根据runid判断能否进行部分复制：</strong></p><ul><li><p>如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会继续尝试使用部分复制(到底能不能部分复制还要看offset和复制积压缓冲区的情况)；</p></li><li><p>如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。</p></li></ul><h3 id="PSYNC命令"><a href="#PSYNC命令" class="headerlink" title="PSYNC命令"></a>PSYNC命令</h3><p>  Redis在2.8版本提供了PSYNC命令来带代替SYNC命令，为Redis主从复制提供了部分复制的能力。</p><h4 id="PSYNC命令格式"><a href="#PSYNC命令格式" class="headerlink" title="PSYNC命令格式"></a>PSYNC命令格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PSYNC &lt;runid&gt; &lt;offset&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> runid:主服务器ID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> offset:从服务器最后接收命令的偏移量</span></span><br></pre></td></tr></table></figure><p>  <strong>PSYNC执行过程中比较重要的概念有3个：runid、offset（复制偏移量）以及复制积压缓冲区。</strong></p><h4 id="psync命令的执行"><a href="#psync命令的执行" class="headerlink" title="psync命令的执行"></a>psync命令的执行</h4><p><img src="C:%5CUsers%5Casus%5CDesktop%5C990532-20180913134017449-1623896661.png" alt="990532-20180913134017449-1623896661"></p><ol><li><p>首先从节点根据当前状态，决定如何调用psync命令：</p><ul><li>如果从节点之前未执行过<strong>slaveof</strong>或最近执行了<strong>slaveof no one</strong>，则从节点发送命令为<strong>psync ? -1</strong>，向主节点请求全量复制；</li><li>如果从节点之前执行了<strong>slaveof</strong>，则发送命令为 <strong>psync <runid> <offset> **，其中</offset></runid></strong>runid<strong>为上次复制的主节点的</strong>runid<strong>，</strong>offset**为上次复制截止时从节点保存的复制偏移量。</li></ul></li><li><p>主节点根据收到的psync命令，及当前服务器状态，决定执行全量复制还是部分复制：</p><ul><li>如果主节点版本低于Redis2.8，则返回-ERR回复，此时从节点重新发送sync命令执行全量复制；</li><li>如果主节点版本够新，且runid与从节点发送的runid相同，且从节点发送的offset之后的数据在复制积压缓冲区中都存在，则回复+CONTINUE，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可；</li><li>如果主节点版本够新，但是runid与从节点发送的runid不同，或从节点发送的offset之后的数据已不在复制积压缓冲区中(在队列中被挤出了)，则回复<strong>+FULLRESYNC <runid> <offset></offset></runid></strong>，表示要进行全量复制，其中runid表示主节点当前的runid，offset表示主节点当前的offset，从节点保存这两个值，以备使用。</li></ul></li></ol><h3 id="【命令传播阶段】心跳机制"><a href="#【命令传播阶段】心跳机制" class="headerlink" title="【命令传播阶段】心跳机制"></a>【命令传播阶段】心跳机制</h3><p>在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：PING和REPLCONF ACK。心跳机制对于主从复制的超时判断、数据安全等有作用。</p><h4 id="主-gt-从：PING"><a href="#主-gt-从：PING" class="headerlink" title="主-&gt;从：PING"></a>主-&gt;从：PING</h4><p>每隔指定的时间，<strong>主节点会向从节点发送PING命令</strong>，这个PING命令的作用，主要是为了让从节点进行超时判断。</p><p>PING发送的频率由 repl-ping-slave-period 参数控制，单位是秒，默认值是10s。</p><h4 id="从-gt-主：REPLCONF-ACK"><a href="#从-gt-主：REPLCONF-ACK" class="headerlink" title="从-&gt;主：REPLCONF ACK"></a>从-&gt;主：REPLCONF ACK</h4><p>在命令传播阶段，<strong>从节点会向主节点发送REPLCONF ACK命令，</strong>频率是每秒1次；</p><p><strong>命令格式为：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLCONF ACK &#123;offset&#125;# offset指从节点保存的复制偏移量。</span><br></pre></td></tr></table></figure><p><strong>REPLCONF ACK命令的作用包括：</strong></p><ol><li><p><strong>实时监测主从节点网络状态：</strong>该命令会被主节点用于复制超时的判断。此外，在主节点中使用info Replication，可以看到其从节点的状态中的lag值，代表的是主节点上次收到该REPLCONF ACK命令的时间间隔，在正常情况下，该值应该是0或1。</p></li><li><p><strong>检测命令丢失：</strong>从节点发送了自身的offset，主节点会与自己的offset对比，如果从节点数据缺失（如网络丢包），主节点会推送缺失的数据（这里也会利用复制积压缓冲区）。</p></li></ol><ul><li><strong>注意：offset和复制积压缓冲区，不仅可以用于部分复制，也可以用于处理命令丢失等情形；区别在于前者是在断线重连后进行的，而后者是在主从节点没有断线的情况下进行的。</strong></li></ul><ol start="3"><li><strong>辅助保证从节点的数量和延迟：</strong>Redis主节点中使用min-slaves-to-write和min-slaves-max-lag参数，来保证主节点在不安全的情况下不会执行写命令；所谓不安全，是指从节点数量太少，或延迟过高。例如min-slaves-to-write和min-slaves-max-lag分别是3和10，含义是如果从节点数量小于3个，或所有从节点的延迟值都大于10s，则主节点拒绝执行写命令。而这里从节点延迟值的获取，就是通过主节点接收到REPLCONF ACK命令的时间来判断的，即前面所说的info Replication中的lag值。</li></ol><p>　　</p><h2 id="开启主从复制"><a href="#开启主从复制" class="headerlink" title="开启主从复制"></a>开启主从复制</h2><p>从节点开启主从复制，有3种方式：</p><ul><li>配置文件：在从服务器的配置文件中加入：<strong>slaveof <masterip> <masterport></masterport></masterip></strong></li><li>启动命令：redis-server启动命令后加入： <strong>–slaveof <masterip> <masterport></masterport></masterip></strong></li><li>客户端命令：Redis服务器启动后，直接通过客户端执行命令：<strong>slaveof <masterip> <masterport></masterport></masterip></strong>，则该Redis实例成为从节点。</li></ul><h3 id="修改配置文件方法："><a href="#修改配置文件方法：" class="headerlink" title="修改配置文件方法："></a>修改配置文件方法：</h3><h4 id="1-配置从服务配置文件redis-conf"><a href="#1-配置从服务配置文件redis-conf" class="headerlink" title="1. 配置从服务配置文件redis.conf"></a>1. 配置从服务配置文件redis.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slaveof 192.168.1.9 6379    #添加属于某台主机的从 服务</span><br><span class="line">masterauth 123456       #从服务连接主服的密码（访问主服务器的密码）</span><br><span class="line">slave-read-only yes     #从服务只读，不可在命令行写入数据</span><br><span class="line"></span><br><span class="line">5.0.4以后：</span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">replica-read-only yes</span><br></pre></td></tr></table></figure><h4 id="2-重新启动从服务即实现主从连接"><a href="#2-重新启动从服务即实现主从连接" class="headerlink" title="2. 重新启动从服务即实现主从连接"></a>2. 重新启动从服务即实现主从连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. ./bin/redis-cli# 启动redis客户端</span><br><span class="line">2. 输入 info replication # 查看与复制相关的状态，了解主从节点的当前状态</span><br></pre></td></tr></table></figure><p><strong>输入info replication 后显示的内容：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave      # 表示此台服务器是主是从</span><br><span class="line">master_host:39.107.38.62     # 主服务器ip</span><br><span class="line">master_port:6379        # 主服务器端口号</span><br><span class="line">master_link_status:up       # 与主服务器是否连接成功 up为成功 down失败</span><br><span class="line">master_last_io_seconds_ago:9</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:808</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:ea5230cc485f9c6f372b2c89a65613fb075aff8b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:808</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:794</span><br></pre></td></tr></table></figure><h4 id="遇到的报错："><a href="#遇到的报错：" class="headerlink" title="遇到的报错："></a>遇到的报错：</h4><h5 id="1-Error-condition-on-socket-for-SYNC-Connection-refused"><a href="#1-Error-condition-on-socket-for-SYNC-Connection-refused" class="headerlink" title="1. Error condition on socket for SYNC: Connection refused"></a>1. Error condition on socket for SYNC: Connection refused</h5><p>  <strong>出现原因</strong>：</p><p>  ​    redis主服务器绑定了127.0.0.1，跨服务器IP的访问就会失败，只能本机才能访问，外部请求会被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">1. 主服务器绑定ip: bind 39.107.38.62</span><br><span class="line">3. bind 0.0.0.0</span><br><span class="line">2. 注释bind  # 会报下面的错↓</span><br></pre></td></tr></table></figure><h5 id="2-‘-DENIED-Redis-is-running-in-protected-mode-because-protected-mode-is-enabled-no-bind-address-was-specified-no-authentication-password-is-requested-to-clients-In-this-mode-connections-are-only-accepted-from-the-loopback-interface-If-you-want-to-connec"><a href="#2-‘-DENIED-Redis-is-running-in-protected-mode-because-protected-mode-is-enabled-no-bind-address-was-specified-no-authentication-password-is-requested-to-clients-In-this-mode-connections-are-only-accepted-from-the-loopback-interface-If-you-want-to-connec" class="headerlink" title="2. ‘-DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connec"></a>2. ‘-DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connec</h5><p>   <strong>出现原因</strong>：</p><p>   ​    处于保护模式，只能本地链接。没有绑定ip 没有设置验证密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">1. 主服务器绑定ip： bind 39.107.38.62</span><br><span class="line">2. 设置主服务器访问密码：requirepass 12345</span><br></pre></td></tr></table></figure><h5 id="3-error-READONLY-You-can’t-write-against-a-read-only-replica"><a href="#3-error-READONLY-You-can’t-write-against-a-read-only-replica" class="headerlink" title="3. (error) READONLY You can’t write against a read only replica."></a>3. (error) READONLY You can’t write against a read only replica.</h5><p>​    <strong>出现原因</strong>：</p><p>​        从库只可读不可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决方法：</span><br><span class="line">1. 设置slave-read-only no # 代表不限于只读</span><br></pre></td></tr></table></figure><h2 id="断开主从复制"><a href="#断开主从复制" class="headerlink" title="断开主从复制"></a>断开主从复制</h2><p>​    通过<strong>slaveof <masterip> <masterport></masterport></masterip></strong>命令建立主从复制关系以后，可以通过slaveof no one断开。</p><p>从节点断开复制后，不会删除已有的数据，只是不再接受主节点新的数据变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reids主从&quot;&gt;&lt;a href=&quot;#Reids主从&quot; class=&quot;headerlink&quot; title=&quot;Reids主从&quot;&gt;&lt;/a&gt;Reids主从&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参考链接：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/leeSmall/p/8398401.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis主从复制和哨兵 参考1&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chenhuabin/p/10048854.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis主从复制和哨兵 参考2&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lxx666/articles/10693844.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis主从架构和主从从架构集群搭建详细步骤&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wade-luffy/p/9639986.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis主从复制原理&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://doc.redisfans.com/topic/replication.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis复制官方文档翻译&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;​    主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。&lt;/p&gt;
&lt;p&gt;​    默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Redis" scheme="http://laxe.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化</title>
    <link href="http://laxe.top/2019/12/26/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://laxe.top/2019/12/26/redis持久化/</id>
    <published>2019-12-26T00:26:08.965Z</published>
    <updated>2019-12-26T00:34:02.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么叫持久化？"><a href="#什么叫持久化？" class="headerlink" title="什么叫持久化？"></a>什么叫持久化？</h2><p>用一句话可以将持久化概括为：将数据（如内存中的对象）保存到可永久保存的存储设备中。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、 XML 数据文件中等等。</p><blockquote><p>从应用层与系统层理解持久化</p></blockquote><a id="more"></a><p>同时，也可以从应用层和系统层这两个层面来理解持久化：</p><p><strong>应用层</strong>：如果关闭( <code>Close</code> )你的应用然后重新启动则先前的数据依然存在。</p><p><strong>系统层</strong>：如果关闭( <code>Shutdown</code> )你的系统（电脑）然后重新启动则先前的数据依然存在。</p><p>说白了，就是在指定的时间间隔内,将内存当中的数据快照写入磁盘,它恢复时是拷快照文件直接读到内存</p><p>什么意思呢?  我们都知道, 内存当中的数据, 如果我们一断电,那么数据必然会丢失,但是玩过redis的同学应该都知道,我们一关机之后再启动的时候数据是还在的,所以它必然是在redis启动的时候重新去加载了持久化的文件</p><p><strong>redis提供两种方式进行持久化</strong></p><p>一种是RDB持久化默认,</p><p>另一种 AOF (append only file) 持久化.</p><h2 id="Redis-为什么要持久化？"><a href="#Redis-为什么要持久化？" class="headerlink" title="Redis 为什么要持久化？"></a>Redis 为什么要持久化？</h2><p>Redis 中的数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis 支持各种不同方式的排序。与 Memcached 一样，为了保证效率，数据都是缓存在内存中。</p><p>对，数据都是缓存在内存中的，当你重启系统或者关闭系统后，缓存在内存中的数据都会消失殆尽，再也找不回来了。所以，为了让数据能够长期保存，就要将 Redis 放在缓存中的数据做持久化存储。</p><h2 id="redis持久化的意义，在于故障恢复"><a href="#redis持久化的意义，在于故障恢复" class="headerlink" title="redis持久化的意义，在于故障恢复"></a>redis持久化的意义，在于故障恢复</h2><p>比如你部署了一个redis，作为cache缓存，当然也可以保存一些较为重要的数据</p><p>如果没有持久化的话，redis遇到灾难性故障的时候，就会丢失所有的数据</p><p>如果通过持久化将数据搞一份儿在磁盘上去，然后定期比如说同步和备份到一些云存储服务上去，那么就可以保证数据不丢失全部，还是可以恢复一部分数据回来的</p><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><p><strong>是什么？</strong></p><p>原理是redis会单独创建(fork函数)（复制）一个与当前进程一模一样的子进程来进行持久化,这个子线程的所有数据(变量,环境变量,程序,程序计数器等)都和原进程一模一样,会先将数据写入到一个临时文件中,待持久化结束了,再用这个临时文件替换上次持久化好的文件,整个过程中,主进程不进行任何的IO操作,（用到了fork子进程来进行持久化）这就确保了极高的性能</p><p><strong>1.这个持久化文件在哪里</strong></p><p>vi /usr/local/redis/etc/redis.conf</p><p>找dbfilename dump.rdb</p><p>默认就是dump.rdb</p><p>dir ./  (包括很多例如redis实例，只要是redis产生的实例都会丢到)</p><p>./   =====  哪里启动，哪里生成。</p><p>注意：</p><p>要么写死目录</p><p>要么启动的位置就在同一个地方，地方不一样可能造成数据丢失。</p><p><strong>2.他是什么时候fork子进程，或者什么时候触发rdb持久化机制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>/usr/local/redis/bin/redis-cli</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>SHUTDOWN</span><br></pre></td></tr></table></figure><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20191217092426326.png" alt="image-20191217092426326" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf <span class="comment">## 开启redis</span></span><br></pre></td></tr></table></figure><p>shutdown时,如果没有开启aof,会触发</p><p>配置文件中默认的快照配置</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20191217092743078.png" alt="image-20191217092743078" style="zoom:50%;"><p>执行命令save成者bgsave ,</p><p>save是只管保存,其他不管,全部阻塞  </p><p>redis会在后台异步进行快照操作,</p><p>同时可以响应客户端的请求(默认调用bgsave来进行持久化)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f ./dump.rdb</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </span><br><span class="line"><span class="comment">## 开启redis</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli  </span><br><span class="line"><span class="comment">## 连接客户端</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k1 v1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save     <span class="comment">## dump.rdb  是只管保存,其他不管,全部阻塞</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgsave   <span class="comment">## dump.rdb  redis会在后台异步进行快照操作</span></span><br></pre></td></tr></table></figure><p>执行flushall命令但是里面是空的,无意义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL   <span class="comment">## 清空</span></span><br></pre></td></tr></table></figure><p><strong>在redis.conf中rdb持久化策略</strong></p><p>集群save 900 1                ##  900秒之内执行了一次增删改操作就会触发 ， 查不算</p><p>save 300 10             </p><p>save 60    10000  </p><p>默认配置</p><p>redis 性能调优</p><p>集群  master节点肯定会把rdb</p><p>实际上关不掉的在主从复制上</p><p>要么就是就写一个save</p><p>要么就注掉</p><h2 id="2-aof"><a href="#2-aof" class="headerlink" title="2.aof"></a>2.aof</h2><p>执行set k1 v1 </p><p>保存命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set k1 v1</span><br><span class="line">set k2 v1   </span><br><span class="line"><span class="comment">## 保存到文件中  保存的是命令</span></span><br></pre></td></tr></table></figure><p><strong>是什么？</strong></p><p>原理是将Reids的操作日志以追加的方式写入文件,读操作是不记录的</p><p><strong>1.这个持久化文件在哪里</strong></p><p>产生的位置还是 ./dir </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename <span class="string">"appendonly.aof"</span>   <span class="comment">## 文件名</span></span><br></pre></td></tr></table></figure><p> redis 默认关闭，开启需要手动把no改为yes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k1 v1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHUTDOWN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </span><br><span class="line"><span class="comment">## 开启redis</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ll</span></span><br></pre></td></tr></table></figure><p>‘*’  开头代表下面有两组命令</p><p>$  字符串的长度</p><p>日志追加的方式保存到文件里。</p><p><strong>2.触发机制（根据配置文件配置项）</strong></p><p>AOF_FSYNC_NO:表示等操作系统进行数据缓存同步到磁盘(快,持久化没保证) —–不能配置不可控 </p><p>AOF_FSYNC_ALWAYS: 同步持久化,每次发生数据变更时,立即记录到磁盘(慢,安全) —-消耗性能</p><p>AOF_FSYNC_EVERYSEC: 表示每秒同步一次(默认值很快,但可能会丢失一秒以内的数据)–所以默认</p><h2 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h2><p>在了解同步策略之前，需要先来了解两个三方法flushAppendOnlyFile、write和save：</p><ul><li>redis的服务器进程是一个事件循环，文件事件负责处理客户端的命令请求，而时间事件负责执行serverCron函数这样的定时运行的函数。在处理文件事件执行写命令，使得命令被追加到aof_buf中，然后在处理时间事件执行serverCron函数会调用flushAppendOnlyFile函数进行文件的写入和同步</li><li>write：根据条件，将aof_buf中的缓存写入到AOF文件</li><li>save：根据条件，调用fsync或fdatasync函数将AOF文件保存到磁盘</li></ul><p>下面来介绍Redis支持的三种同步策略：</p><ul><li>AOF_FSYNC_NO：不保存（write和read命令都由主进程执行）</li><li>AOF_FSYNC_EVERYSEC：每一秒钟保存一次（write由主进程完成，save由子进程完成）</li><li>AOF_FSYNC_ALWAYS：每执行一个命令保存一次（write和read命令都由主进程执行）</li></ul><p><strong>AOF_FSYNC_NO</strong><br>在这种策略下，每次flushAppendOnlyFile函数被调用的时候都会执行一次write方法，但是不会执行save方法。</p><p>只有下面三种情况下才会执行save方法：</p><ul><li>Redis被关闭</li><li>AOF功能被关闭</li><li>系统的写缓存被刷新（可能是缓存已经被写满，或者定期保存操作被执行）</li></ul><p>这三种情况下的save操作都会引起Redis主进程阻塞，并且由于长时间没有执行save命令，所以save命令执行的时候，阻塞时间会很长</p><p><strong>AOF_FSYNC_EVERYSEC</strong><br>在这种策略下，save操作原则上每隔一秒钟就会执行一次， 因为save操作是由后台子线程调用的， 所以它不会引起服务器主进程阻塞。</p><p>其实根据Redis的状态，每当 flushAppendOnlyFile函数被调用时，write命令和save命令的执行又分为四种不同情况：</p><p><img src="https://lebron-youdao-img.oss-cn-hangzhou.aliyuncs.com/AOF%20everysec.png" alt="AOF everysec"></p><p>根据以上图知道，在AOF_FSYNC_EVERYSEC策略下， 如果在情况1时发生故障停机， 那么用户最多损失小于2秒内所产生的数据；而如果在情况2时发生故障停机，堆积了很多save命令，那么用户损失的数据是可以超过 2 秒的。</p><p>AOF_FSYNC_ALWAYS<br>在这种模式下，每次执行完一个命令之后，write和save命令都会被执行。</p><p>另外，因为save命令是由Redis主进程执行的，所以在save命令执行期间，主进程会被阻塞。</p><p>三种策略的优缺点<br>AOF_FSYNC_NO策略虽然表面上看起来提升了性能，但是会存在每次save命令执行的时候相对长时间阻塞主进程的问题。并且数据的安全性的不到保证，如果Redis服务器突然宕机，那么没有从AOF缓存中保存到硬盘中的数据都会丢失。</p><p>AOF_FSYNC_ALWAYS策略的安全性的到了最大的保障，理论上最多丢失最后一次写操作，但是由于每个写操作都会阻塞主进程，所以Redis主进程的响应速度受到了很大的影响。</p><p>AOF_FSYNC_EVERYSEC策略是比较建议的配置，也是Redis的默认配置，相对来说兼顾安全性和性能。</p><h2 id="AOF执行流程"><a href="#AOF执行流程" class="headerlink" title="AOF执行流程"></a>AOF执行流程</h2><ul><li>所有的写命令都会追加到aof_buf（缓冲区）中。</li><li>可以使用不同的策略将AOF缓冲区中的命令写到AOF文件中。</li><li>随着AOF文件的越来越大，会对AOF文件进行重写。</li><li>当服务器重启的时候，会加载AOF文件并执行AOF文件中的命令用于恢复数据。</li></ul><p>简单分析一下AOF执行流程中的一些问题：</p><ul><li><p>因为Redis为了效率，使用单线程来响应命令，如果每次写命令都追加写硬盘的操作，那么Redis的响应速度还要取决于硬盘的IO效率，显然不现实，所以Redis将写命令先写到AOF缓冲区。</p></li><li><p>写道缓冲区还有一个好处是可以采用不同的策略来实现缓冲区到硬盘的同步，可以让用户自行在安全性和性能方面做出权衡。</p></li></ul><h2 id="3-aof重写机制"><a href="#3-aof重写机制" class="headerlink" title="3.aof重写机制"></a>3.aof重写机制</h2><p>我们以日志的方式,记录我们的命令记录到文件当中</p><p>如果我操作的特别频繁，文件肯定会特别大。</p><p>我写100万数据，持久化文件也会特别大</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis/</span>bin<span class="regexp">/redis-cli</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL  <span class="comment">## 清空数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *   <span class="comment">## 查看是否有数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCR lock   <span class="comment">## 加操作</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit    <span class="comment">## 退出</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi appendonly.aof  <span class="comment">## 查看文件</span></span><br></pre></td></tr></table></figure><p>记录着</p><p>我可以直接执行一条命令set lock 11</p><p>重写就是将重复的剔除掉瘦身</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BGREWRITEAOF  <span class="comment">##手动调用重写命令</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit  <span class="comment">## 退出</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi dump.rdb</span><br></pre></td></tr></table></figure><p>是因为我这个版本是5.0的</p><p>当AOF文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当AOF文件大小的增长率大于该配置项时自动开启重写(这里指超过原大小的100%) .</p><p>auto-aof-rewrite-percentage 100</p><p>当AOF文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写,当AOF文件大小大于该配置项时自动开启重写</p><p>auto-aof-rewrite-min-size 64mb</p><p>incr lock </p><p>重写就是将重复的剔除掉瘦身</p><h2 id="4-redis4-0后混合持久化机制"><a href="#4-redis4-0后混合持久化机制" class="headerlink" title="4.redis4.0后混合持久化机制"></a>4.redis4.0后混合持久化机制</h2><p><strong>开启混合持久化</strong></p><p>4.0 版本是 像set lock 11</p><p>4.0版本的混合持久化默认关闭的,通过aof-use-rdb-preamble配置参数控制, yes则表示开启, no表示禁用, 5.0之后默认开启。</p><p>混合持久化是通过bgrewriteaof完成的,不同的是当开启混合持久化时, fork出的子进程先将共享的内存副本全量 以RDB方式写入aof文件,然后在将重写缓冲区的增量命令以AOF方式写入到文件,写入完成后通知主进程更新统计信息,并将新的含有RDB格式和AOF格式的AOF文件替换旧的AOF文件。</p><p>简单的说:新的AOF文件前半段是 RDB格式的全量数据后半段是AOF格式的增量数据,</p><p>优点:混合持久化结合了RDB持久化和AOF持久化的优点由于绝大部分都是RDB格式,加载速度快,同时结合 AOF,增量的数据以AOF方式保存了,数据更少的丢失.</p><p>缺点:兼容性差,一旦开启了混合持久化,在4.0之前版本都不识别该aof文件,同时由于前部分是RDB格式,阅读性较差</p><p>二进制方式存储  更小</p><p>什么时候下会自动重写</p><p>看</p><p>auto-aof-rewrite-percentage</p><p>auto-aof-rewrite-min-size</p><h2 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h2><p><strong>1.redis提供了rdb持久化方案，为什么还要aof？</strong></p><p>rdb 是跟据save触发持久化，所以会照成数据的丢失</p><p>aof持久化是1秒执行一次</p><p>在数据aof</p><p>在性能rdb高于aof</p><blockquote><p>优化数据丢失问题，rdb会丢失最后一次快照后的数据，aof丢失不会超过2秒的数据</p></blockquote><p><strong>2.如果aof和rdb同时存在，听谁的？</strong></p><p>aof数据准确率更高</p><p><strong>3.rdb和aof优势劣势</strong></p><p>rdb适合大规模的数据恢复,对数据完整性和一致性不高，在一定间隔时间做一次备份,如果redis意外宕机的话,就会丢失最后一次快照后的所有操作</p><p>aof根据配置项而定</p><p>1.官方建议两种持久化机制同时开启,如果两个同时开启优先使用aof久化机制</p><p>在生产环境中用集群，哨兵什么的</p><p>主机开aof</p><p><strong>性能建议（这里只针对单机版redis持久化做性能建议）：</strong></p><p>因为RDB文件只用作后备用途,只要15分钟备份一次就够了,只保留save 900 1这条规则. 因为开启aof持久化安全。</p><p>如果Enalbe AOF, 好处是在最恶劣情况下也只会丢失不超过两秒数据,启动脚本较简单只load自己的AOF文件就可以了.</p><p>代价一是带来了持续的IO,二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p><p>只要硬盘许可,应该尽量减少AOF rewrite的频率, AOF重写的基础大小默认值64M太小了,可以设到5G以上.默认超过原大小100%大小时重写可以改到适当的数值。</p><p>看硬盘</p><img src="C:\Users\Lenovo\Desktop\20191127113644133169.png" alt="20191127113644133169" style="zoom: 50%;"><p>1）AOF持久化开启且存在AOF文件时，优先加载AOF文件。</p><p>2）AOF关闭或者AOF文件不存在时，加载RDB文件。</p><p>3）加载AOF/RDB文件成功后，Redis启动成功。</p><p>4）AOF/RDB文件存在错误时，Redis启动失败并打印错误信息。</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=762237719,3005011713&fm=15&gp=0.jpg" alt="img"></p><p>1.从主进程中fork出子进程，并拿到fork时的AOF文件数据写到一个临时AOF文件中</p><p>2.在重写过程中，redis收到的命令会同时写到AOF缓冲区和重写缓冲区中，这样保证重写不丢失，重写过程中的命令</p><p>3.重写完成后通知主进程，主进程会将AOF缓冲区中的数据追加到子进程生成的文件中</p><p>4.redis会原子的将旧文件替换为新文件，并开始将数据写入到新的aof文件上</p><ul><li>执行bgrewriteaof命令的时候，如果当前有进程正在执行AOF重写，那么直接返回；如果有进程正在执行bgsave，那么等待bgsave执行完毕再执行AOF重</li><li>Redis主进程会fork一个子进程执行AOF重写。</li><li>AOF重写过程中，不影响Redis原有的AOF过程，包括写消息到AOF缓存以及同步AOF缓存中的数据到硬盘。</li><li>AOF重写过程中，主进程收到的写操作还会将命令写到AOF重写缓冲区，注意和AOF缓冲区分开。</li><li>由于AOF重写过程中原AOF文件还在陆续写入数据，所以AOF重写子进程只会拿到fork子进程时的AOF文件进行重写。</li><li>子进程拿到原AOF文件中的数据写道一个临时的AOF文件中。</li><li>子进程完成AOF重写后会发消息给主进程，主进程会把AOF重写缓冲区中的数据写道AOF缓冲区，并且用新的AOF文件替换旧的AOF文件。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Redis 默认开启RDB持久化方式，在指定的时间间隔内，执行指定次数的写操作，则将内存中的数据写入到磁盘中。</li><li>RDB 持久化适合大规模的数据恢复但它的数据一致性和完整性较差。</li><li>Redis 需要手动开启AOF持久化方式，默认是每秒将写操作日志追加到AOF文件中。</li><li>AOF 的数据完整性比RDB高，但记录内容多了，会影响数据恢复的效率。</li><li>Redis 针对 AOF文件大的问题，提供重写的瘦身机制。</li><li>若只打算用Redis 做缓存，可以关闭持久化。</li><li>若打算使用Redis 的持久化。建议RDB和AOF都开启。其实RDB更适合做数据的备份，留一后手。AOF出问题了，还有RDB。</li></ol><h4 id="RDB和AOF的优缺点"><a href="#RDB和AOF的优缺点" class="headerlink" title="RDB和AOF的优缺点"></a>RDB和AOF的优缺点</h4><hr><p>RDB的优缺点：</p><ul><li>一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数 据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。</li><li>相对于 AOF 持久化机制来说，直接基于 RDB 数据文件来重启和恢复 redis 进程，更加快速。</li><li>RDB 对 redis 对外提供的读写服务，影响非常小，可以让 redis 保持高性能，因为 redis 主进程只需要 fork 一个子进程，让子进程执行磁盘 IO 操作来进行 RDB 持久化即可。</li><li>对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。</li><li>如果想要在 redis 故障时，尽可能少的丢失数据，那么 RDB 没有 AOF 好。一般来说，RDB 数据快照文件，都是每隔 5 分钟，或者更长时间生成一次，这个时候就得接受一旦 redis 进程宕机，那么会丢失最近 5 分钟的数据。</li><li>RDB 每次在 fork 子进程来执行 RDB 快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒。</li></ul><p>AOF的优缺点：</p><ul><li>AOF 可以更好的保护数据不丢失，一般 AOF 会每隔 1 秒，通过一个后台线程执行一次fsync操作，最多丢失 1 秒钟的数据。</li><li>AOF 日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损。 如果我们本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据 一致性的问题。</li><li>AOF 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log 的时候，会对其中的指令进行压缩，创建出一份需要恢复数据的最小日志出来。在创建新日志文件的时候，老的日志文件还是照常写入。当新的 merge 后的日志文件 ready 的时候，再交换新老日志文件即可。 因此在进行rewrite切换时可以更好的保证数据安全性。</li><li>AOF以一个格式清晰、易于理解的日志文件用于记录所有的修改操作， 非常适合做灾难性的误删除的紧急恢复。 比如有人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝 AOF 文件，将最后一条flushall命令给删了，然后再将该aof文件放回去，就可以通过恢复机制，自动恢复所有数据。</li><li>对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li><li>AOF 开启后，支持的写 QPS 会比 RDB 支持的写 QPS 低， 因为 AOF 一般会配置成每秒 fsync 一次日志文件。</li><li>类似 AOF 这种较为复杂的基于命令日志 / merge / 回放的方式，比基于 RDB 每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有 bug。</li></ul><h4 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h4><hr><p>RDB和AOF如何选择？</p><ul><li>不要仅仅使用 RDB，因为那样会导致你丢失很多数据；</li><li>也不要仅仅使用 AOF，因为那样有两个问题：第一，你通过 AOF 做冷备，没有 RDB 做冷备来的恢复速度更快；第二，RDB 每次简单粗暴生成数据快照，更加健壮，可以避免 AOF 这种复杂的备份和恢复机制的 bug；</li><li>redis 支持同时开启开启两种持久化方式，我们可以综合使用 AOF 和 RDB 两种持久化机制，用 AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。</li></ul><p>aof-load-truncated yes<br>解决 aof文件同步过程 服务宕机 文件末尾出错 无法再次启动回复数据的问题<br>这个配置可以绕过错误</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么叫持久化？&quot;&gt;&lt;a href=&quot;#什么叫持久化？&quot; class=&quot;headerlink&quot; title=&quot;什么叫持久化？&quot;&gt;&lt;/a&gt;什么叫持久化？&lt;/h2&gt;&lt;p&gt;用一句话可以将持久化概括为：将数据（如内存中的对象）保存到可永久保存的存储设备中。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、 XML 数据文件中等等。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;从应用层与系统层理解持久化&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Redis" scheme="http://laxe.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker 存储</title>
    <link href="http://laxe.top/2019/12/26/docker%E5%AD%98%E5%82%A8/"/>
    <id>http://laxe.top/2019/12/26/docker存储/</id>
    <published>2019-12-26T00:24:45.744Z</published>
    <updated>2019-12-26T00:30:32.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docek"><a href="#Docek" class="headerlink" title="Docek"></a>Docek</h3><h3 id="镜像层的镜像分层结构"><a href="#镜像层的镜像分层结构" class="headerlink" title="镜像层的镜像分层结构"></a>镜像层的镜像分层结构</h3><h5 id="docker的镜像分层结构，如下所示："><a href="#docker的镜像分层结构，如下所示：" class="headerlink" title="docker的镜像分层结构，如下所示："></a>docker的镜像分层结构，如下所示：</h5><p><img src="https://upload-images.jianshu.io/upload_images/13690429-8c66ee3f4b08a970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1056/format/webp" alt="img"></p><ul><li><p>docker镜像中引入层layer概念，镜像的制作过程中的每一步都会生产一个新的镜像层</p></li><li><p>容器读写层的工作原理</p><blockquote><p>我们刚刚在说镜像的分层特性的时候说到镜像是只读的。而事实上当我们使用镜像启动一个容器的时候，我们其实是可以在容器里随意读写的，从结果上看，似乎与镜像的只读特性相悖。</p><p>我们继续看上面的图，其实可以看到在镜像的最上层，还有一个读写层。而这个读写层，即在容器启动时为当前容器单独挂载。每一个容器在运行时，都会基于当前镜像在其最上层挂载一个读写层。而用户针对容器的所有操作都在读写层中完成。一旦容器销毁，这个读写层也随之销毁。</p><blockquote><p>知识点： 容器=镜像+读写层</p></blockquote><p>而我们针对这个读写层的操作，主要基于两种方式：写时复制和用时分配。</p></blockquote></li></ul><a id="more"></a><h4 id="overlay2镜像存储结构"><a href="#overlay2镜像存储结构" class="headerlink" title="overlay2镜像存储结构"></a>overlay2镜像存储结构</h4><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li><p>容器由最上面一个可写的容器层和若干个只读的镜像层组成，容器的数据就存在这些层中。这种分层结构最大的特点是Copy-on-Write。</p><ol><li><p>新数据会直接存放在最上面的容器层</p></li><li><p>修改现有数据会从镜像层复制文件到容器中，再在容器层修改并保存，镜像层的数据不会发生改变</p></li><li><p>若多个层中有命名相同的文件，用户只能看到最上面一层的文件</p></li></ol></li></ul><ul><li>分层结构使镜像和容器的创建、共享以及分发变得非常高效，而这些都要归功于 Docerk stoage driver。<strong>正是 storage driver 实现了多层数据的堆叠并为用户提供一个单一的合并之后的统一视图</strong>。</li></ul><hr><h3 id="Docker-为容器提供了两种存放数据的资源："><a href="#Docker-为容器提供了两种存放数据的资源：" class="headerlink" title="Docker 为容器提供了两种存放数据的资源："></a>Docker 为容器提供了两种存放数据的资源：</h3><ul><li>由storage driver（存储驱动） 管理的镜像层和容器层<ul><li>用来放一些无状态的数据<ul><li><strong>对于某些容器，直接将数据放在由</strong> storage driver <strong>维护的层中是很好的选择，比如那些无状态的应用。无状态意味着容器没有需要持久化的数据，随时可以从镜像直接创建。即存在与否依赖镜像的存在。</strong></li></ul></li></ul></li><li>Data Volume。（数据卷）<ul><li>用来放一些有状态的数据，例如数据库<ul><li><strong>本质上是</strong> Docker Host （主机）<strong>文件系统中的目录或文件，能够直接被 ** mount （挂载）</strong>到容器的文件系统中**。</li></ul></li></ul></li></ul><h4 id="关于docker镜像的三问"><a href="#关于docker镜像的三问" class="headerlink" title="关于docker镜像的三问"></a>关于docker镜像的三问</h4><ul><li>基于镜像A创建镜像B时是否会拷贝A镜像中的所有文件：<code>是不会的</code></li><li>基于镜像创建容器时是否会拷贝镜像中的所有文件至文件层：<code>不会的</code></li><li>容器与镜像在结构上有什么区别：<code>没有区别容器会比镜像多了一个</code> <code>merged</code>文件</li></ul><blockquote><p>在讲原理前，先讲下写时复制和写时分配</p></blockquote><h4 id="写时复制（CoW）"><a href="#写时复制（CoW）" class="headerlink" title="写时复制（CoW）"></a>写时复制（CoW）</h4><blockquote><p>所有驱动都用到的技术——写时复制（CoW）。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景比如基于一个image启动多个Container，如果为每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论多少个容器共享同一个image，所作的写操作都是从image中复制到自己的文件系统中的复制本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离的，相互不影响。使用CoW可以有效的提高磁盘的利用率。</p></blockquote><h4 id="用时分配（allocate-on-demand）"><a href="#用时分配（allocate-on-demand）" class="headerlink" title="用时分配（allocate-on-demand）"></a>用时分配（allocate-on-demand）</h4><blockquote><p>而用时分配是用在原本没有这个文件的场景，只有在要新写入一个文件时才分配空间，这样可以提高存储资源的利用率。比如启动一个容器，并不会为这个容器预分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。</p></blockquote><h4 id="Docker存储驱动的作用"><a href="#Docker存储驱动的作用" class="headerlink" title="Docker存储驱动的作用"></a>Docker存储驱动的作用</h4><blockquote><p>将这些分层的镜像文件堆叠起来，并且提供统一的视图.使container的文件系统看上去和我们普通的文件系统没什么区别。<br>当创建一个新的容器的时候,实际上是在镜像的分层上新添加了一层container layer（容器层）.之后所有对容器产生的修改,实际都只影响这一层。</p><p>注意</p><p>容器层：读写层(可写层)<br>镜像层：只读层</p></blockquote><blockquote><p> Docker 支持多种 storage driver，有 AUFS 、Device Mapper 、Btrfs 、OverlayFS 、VFS 和ZFS。它们都能实现分层的架构，同时又有各自的特性。对于Docker 用户来说，具体选择使用哪个 storage driver 是一个难题，因为：</p></blockquote><p>​            没有哪个driver 能够适应所有的场景。</p><p>​            driver 本身在快速发展和迭代。</p><blockquote><p>优先使用 Linux 发行版默认的 storage driver。Docker 安装时会根据当前系统的配置选择默认的 driver。默认 driver 具有最好的稳定性，因为默认 driver 在发行版上经过了严格的测试。</p></blockquote><blockquote><p>运行<code>docker info</code>可以查看可查看当前系统使用的<code>Storage driver</code>。</p><p><img src="https://img2018.cnblogs.com/blog/1369145/201904/1369145-20190403211618700-1608880157.png" alt="img"></p></blockquote><hr><blockquote><p>Ubuntu 用的 <code>AUFS</code>，底层文件系统是 <code>extfs</code>，各层数据存放在 <code>/var/lib/docker/aufs</code>。<br>centos默认的<code>driver</code>用的是<code>overlay2</code>，底层的文件系统是xfs,各层数据存放在<code>/var/lib/docker</code></p></blockquote><blockquote><p>而写时分配是用在原本没有这个文件的场景，只有在要新写入一个文件时才分配空间，这样可以提高存储资源的利用率。</p><p>比如启动一个容器，并不是为这个容器预分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。</p></blockquote><ul><li>docker提供了多种的存储驱动来实现不同的方式存储镜像</li></ul><h5 id="Docker五种存储驱动原理及应用场景和性能测试对比"><a href="#Docker五种存储驱动原理及应用场景和性能测试对比" class="headerlink" title="Docker五种存储驱动原理及应用场景和性能测试对比"></a>Docker五种存储驱动原理及应用场景和性能测试对比</h5><blockquote><p><code>Docker</code> 最开始采用AUFS作为文件系统，也得益于AUFS分层的概念，实现了多个Container可以共享同一个image。但由于<code>AUFS</code> 为并入 <code>Linux</code>内核，且只支持 <code>Ubuntu</code>，考虑到兼容的问题，在 <code>Docker 0.7</code> 版本中引入了存储驱动，就如Docker官网上说的，没有单一的驱动适应所有的应用场景，要根据不同的场景选择合适的存储驱动，才能有效的提高Docker 的性能。如何选择适合的存储驱动，要先了解存储驱动原理才能更好的判断。</p></blockquote><blockquote><p>接下来我们说说这些分层的镜像是如何在磁盘中存储的。</p></blockquote><ul><li><p><code>docker</code> 提供了多种存储驱动来实现不同的方式存储镜像</p><ul><li><p>下列出了 <code>Docker</code> 中支持的存储驱动程序：</p><table><thead><tr><th align="center">技术</th><th align="center">存储驱动成名称</th></tr></thead><tbody><tr><td align="center"><code>OverlayFS</code></td><td align="center"><code>overlay</code> 或  <code>overlay2</code></td></tr><tr><td align="center"><code>AUFS</code></td><td align="center"><code>aufs</code></td></tr><tr><td align="center"><code>Btrfs</code></td><td align="center"><code>btrfs</code></td></tr><tr><td align="center"><code>Device Mapper</code></td><td align="center"><code>devicemapper</code></td></tr><tr><td align="center"><code>VFS</code></td><td align="center"><code>vfs</code></td></tr><tr><td align="center"><code>ZFS</code></td><td align="center"><code>zfs</code></td></tr></tbody></table></li></ul></li></ul><h5 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h5><blockquote><p>AUFS（AnotherUnionFS）是一种 Union FS ，是文件级的存储驱动。AUFS 是一个能透明覆盖一个或多个县有文件系统的层状文件系统，把多层合并成文件系统的单层表示。简单来说就是支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件可以一层一层地叠加修改文件。无论低下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改文件时，AUFS创建该文件的一个副本，使用CoW将文件从只读层复制到可写层进行修改，结果保存在可写层。在Docker中，低下的只读层就是image，可写层就是Container。结构如下图所示：</p></blockquote><p>  <a href="http://dockone.io/uploads/article/20190702/87af417e9f80a3eb8ae9716ae07b3dc1.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/87af417e9f80a3eb8ae9716ae07b3dc1.jpg" alt="1.jpg"></a></p><blockquote><p><strong>历史</strong>：aufs驱动老早就在Docker中存在了！其实，他在使用<code>graphdriver</code>这个名字之前久存在了。如果你查看项目在那（即首次使用graphdriver名称）提交之前的历史，之前项目中当时只有一个aufs的实现。下边devicemapper部分会讲到更多关于graphdriver这个名称诞生的历史。</p><p><strong>实现</strong>：Aufs最初代表的意思“另一个联合文件系统（another union filesystem）”，试图对当时已经存在的UnionFS实现进行重写。正如你期望的那样，它是一个传统意义的上层覆盖，通过利用aufs称作为“分支（branch）”的特性，让堆叠的目录合并成一个堆叠内容单一挂载点视图。此驱动会将父级信息组合一个有序列表，并把它作为挂载参数，然后把重活移交给aufs来把这些分层组装成一个联合视图。更多的细节信息可以在aufs的<a href="http://aufs.sourceforge.net/aufs3/man.html" target="_blank" rel="noopener">帮助文档</a>上看到。</p><p><strong>优点</strong>：这可能是历史最久且测试最完善的graphdriver后端了。它拥有不错的性能，也比较稳定，适用于广泛的场景。尽管它只在Ubuntu或者Debian的内核上才可以启用（下边有说明），但是这两个发行版和Docker一起使用的场景已经非常多，这让它在广阔的环境中得到了验证。同时，通过让不同的容器从同一个分层里面加载相同的库（因为他们在磁盘上是相同的inode）达到了共享内存页的效果。</p><p><strong>缺点</strong>：Aufs从来没有被上游Linux内核社区接受。多年来Ubuntu和Debian都需要往内核集成一个历史久远的补丁包，且原作者已经放弃了让它被内核采纳的努力。可能与IPV4和IPv6的辩论有些类似，人们担心某一天内核更新后会出现难以整合aufs的补丁的情况，从而导致aufs没得玩。但是就如IPv6，替换aufs势在必行的决心讲了一年又一年。除此之外，它面临着很多其他比较棘手的问题。其中一个最麻烦的、也是比较有历史的问题（尽管某种程度上这是一个安全的特性），是关于在高层更改向上拷贝的文件的权限的，这个问题困扰了不少用户。最终在2015年早期的时候通过编号为<a href="http://dockone.io/docker/docker#11799" target="_blank" rel="noopener">#11799</a>的PR使用aufs的<code>dirperm1</code>特性修复了。自然，这需要内核中有具有<code>dirperm1</code>能力aufs，然而这在今天任何较新版本的Ubuntu或者Debian上都已经不成问题了。</p><p><strong>总结</strong>：如果你在使用Ubtuntu或者Debian，那默认的graphdriver就是aufs，它能满足你绝大多数需求。有人期望有一天它能被overlay的实现取代，但是考虑到overlay文件系统的诸多问题，以及在上游内核中的成熟程度等挑战，这尚未实现。最后，aufs中没有配额的支持。</p></blockquote><h5 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h5><blockquote><p>Overlay 是Linux内核3.18后支持的，也是一种Union FS，和AUFS的多层不同的是Overlay只有两层：一个upper文件系统和一个lower文件系统，分别代表Docekr的镜像层和容器层。当需要修改一个文件时，使用CoW将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。在Docekr中，底下的只读层就是image，可写层就是Container。目前最新的OverlayFS为Overlay2。结构图如下所示：</p></blockquote><p>  <a href="http://dockone.io/uploads/article/20190702/c12e244abea02f7ed1eb42f0ccdbcf1d.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/c12e244abea02f7ed1eb42f0ccdbcf1d.jpg" alt="2.jpg"></a></p><blockquote><p><strong>历史</strong>：<strong>2014年8月</strong>，Red Hat的 Alex Larsson在编号为<a href="https://github.com/docker/docker/commit/453552c8384929d8ae04dcf1c6954435c0111da0" target="_blank" rel="noopener">453552c8384929d8ae04dcf1c6954435c0111da0</a>的代码提交中添加了针对OverlayFS（最初的上游内核的名称）的graphdriver。</p><p><strong>实现</strong>：Overlay是一个联合文件系统，它的概念较之aufs的分支模型更为简单。Overlay通过三个概念来实现它的文件系统：一个“下层目录（lower-dir）”，一个“上层目录（upper-dir）”，和一个做为文件系统合并视图的“合并（merged）”目录。受限于只有一个“下层目录”，需要额外的工作来让“下层目录”递归嵌套（下层目录自己又是另外一个overlay的联合），或者按照Docker的实现，将所有位于下层的内容都硬链接到“下层目录”中。正是这种可能潜在的inode爆炸式增长（因为有大量的分层和硬连接）阻碍了很多人采用Overlay。Overlay2通过利用更高内核（4.0以及以上的版本）中提供了的更优雅处理多个位于下层分层的机制解决了这个问题。</p><p><strong>优点</strong>：Overlay作为一个合并进主线Linux内核的一个有完整支持的联合文件系统有望成为人们的焦点。与aufs类似，通过使用磁盘上相同的共享库，它也能让分散的容器实现内存共享。Overlay同时有很多的上游Linux内核基于现代的应用场景，如Docker，被持续开发（参看overlay2）。</p><p><strong>缺点</strong>：硬链接的实现方式已经引发了 <a href="http://dockone.io/docker/docker#10613" target="_blank" rel="noopener">inode耗尽</a>的问题，这阻碍了它的大规模采用。inode耗尽并不是唯一的问题，还有其他一些与用户命名空间、SELinux支持有关的问题，且整体的成熟状况不足也阻碍着overlay直接取代aufs成为Docker默认的graphdriver。随着很多问题的解决，特别是在最新的内核发新版中，overlay的可用度越来越高了。如今出现的Overlay2修复了inode耗尽的问题，应该是从Docker 1.12版本之后的焦点，成为overlay驱动的后续开发对象。出于向后兼容的原因，<code>overlay</code>驱动将会继续留在Docker引擎中继续支持现有的用户。</p><p><strong>总结</strong>：考虑到aufs没有足够多的发行版的支持，能有一个上游集成的联合文件系统且拥有Linux内核文件系统社区的支持，overlay驱动的加入是一个重大进步。Overlay在过去的18-24个月已经成熟了很多，并且随着overlay2的出现，它之前一些麻烦的问题已经解决了。希望overlay（或者更具可能性的overlay2）会成为未来默认的graphdriver。为了overlay最好的体验，上游内核社区在4.4.x的内核系列里面修复了很多overlay实现中存在的问题；选择该系列中更新的版本可以获得overlay更好的性能和稳定性。</p></blockquote><h5 id="Overlay2"><a href="#Overlay2" class="headerlink" title="Overlay2"></a>Overlay2</h5><blockquote><p><strong>历史</strong>：<a href="https://github.com/dmcgowan" target="_blank" rel="noopener">Derek McGowan</a>在编号为<a href="https://github.com/docker/docker/pull/22126" target="_blank" rel="noopener">#22126</a>的PR中添加了overlay2的graphdriver，在<strong>2016年6月</strong>被合并进Docker 1.12版本，正如该PR的标题注明的，要取代之前overlay的主要原因是它能“支持多个下层目录”，能解决原先驱动中inode耗尽的问题。</p><p><strong>实现</strong>：在上面的overlay部分已经讲述了Linux内核中的Overlay的框架。上面链接的PR中改进了原有的设计，基于Linux内核4.0和以后版本中overlay的特性，可以允许有多个下层的目录。</p><p><strong>优点</strong>：overlay2解决了一些因为最初驱动的设计而引发的inode耗尽和一些其他问题。Overlay2继续保留overlay已有的优点，包括在同一个引擎的多个容器间从同一个分层中加载内库从而达到内存共享。</p><p><strong>缺点</strong>：现在可能唯一能挑出overlay2的问题是代码库还比较年轻。很多早期的问题已经在早期测试过程中发现并被及时解决了。但是Docker 1.12是第一个提供overlay2的发行版本，随着使用量的增长，相信可能还会发现其他问题。</p><p><strong>总结</strong>：将Linux内核中的一个现代的、广受支持的联合文件系统，和一个和Docker中一个性能优秀的graphdriver结合起来，这应该是Docker引擎未来打造默认的graphdriver最好的道路，只有这样才能获得各种Linux发行版广泛的支持。</p></blockquote><h5 id="Device-mapper"><a href="#Device-mapper" class="headerlink" title="Device mapper"></a>Device mapper</h5><blockquote><p>Device mapper 是Linux 内核 2.6.9 后支持的，提供的一种从逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便的根据自己的需要制定实现存储资源的管理策略。前面讲的 AUFS 和 OverlayFS 都是文件级存储，而 Device mapper 是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper 驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照，并不有为容器分配空间。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据，这个用时分配。当要修改已有文件时，再使用 CoW 为容器快照分配块空间，将要修改的数据复制在容器快照中新的块里在进行修改。Device mapper 驱动默认会创建一个 100 G 的文件包含镜像和容器。每个容器被限制在 10G 大小的卷内，可以自己设置调整。结构如下图所示：</p></blockquote><p>  <a href="http://dockone.io/uploads/article/20190702/0ef920a30190955999076f524229f321.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/0ef920a30190955999076f524229f321.jpg" alt="3.jpg"></a></p><blockquote><p> <strong>历史</strong>：Devicemapper很早就以Ｃ代码的包装器面貌存在了，用来和libdevmapper进行交互； 是2013的９月Alex Larsson在编号为<a href="https://github.com/docker/docker/commit/739af0a17f6a5a9956bbc9fd1e81e4d40bff8167" target="_blank" rel="noopener"> 739af0a17f6a5a9956bbc9fd1e81e4d40bff8167</a>的代码提交中添加的。几个月后的重构了才诞生了我们现在所知道的“graphdriver”这个词；Solomon Hykes在2013年10月份早期代码合并的注释中说：将devmapper和aufs整合进通用的“graphdriver”框架。</p><p>  <strong>实现</strong>：devicemapper这个graphdriver利用了Linux中devicemapper代码中众多特性之一，“轻配置（thin provisioning）”，或者简称为“thinp”。<em>（译注：根据Wikipedia，“thin provisioning是利用虚拟化技术，让人觉得有比实际可用更多的物理资源。如果系统的资源足够，能同时满足所有的虚拟化的资源，那就不能叫做thin-provisioned。”）</em> 这与之前提到的联合文件系统不同，因为devicemapper是基于块设备的。这些“轻配置（thin-provisioned）”的块设备带来的是如联合文件系统所提供的一样轻量的行为，但是最重要的一点是，他们不是基于文件的（而是基于块设备的）。正如你能推测的，这让计算分层之间的差别变得不再容易，也丧失了通过在容器间使用同样的库片段而共享内存的能力。</p><p>  <strong>优点</strong>：Devicemapper在过去的年间也被一些人感到不屑，但是它提供的一个非常重要的能力让红帽系（Fedora,RHEL，Project Atomic）也有了一个graphdriver。因为它是基于块设备而不是基于文件的，它有一些内置的能力如配额支持，而这在其他的实现中是不容易达到的。</p><p>  <strong>缺点</strong>：使用devicemapper没有办法达到开箱立即唾手可得很好的性能。你必须遵循<a href="https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#/configure-direct-lvm-mode-for-production" target="_blank" rel="noopener">安装和配置指示</a>才能得到性能还可以的配置。并且最重要的是，在任何需要用Docke引擎来做点正事的地方，都不要使用“虚拟设备（loopback）”模式（对于运行有devicemapper且负载高的系统，如延迟删除（ deferred removal）这样的特性绝对有必要的，这能减少引擎看起来好似夯住了一样的悲剧。）。它的一些特性依赖libdevmaper特定的版本，并且需要比较高级的技能来验证系统上所有的设置。同时，如果Docker Engine的二进制是静态编译的话，devicemapper会完全无法工作，因为它需要<a href="http://dockone.io/docker/docker#11412" target="_blank" rel="noopener">udev sync</a>的支持，而这不能被静态编译进引擎中。</p><p>  <strong>总结</strong>：对于红帽类发行版本来说，devicemapper已经成为“可以直接用”的选择，并且在过去几年间里得到了红帽团队的大力支持和改进。它质量上有优点也有缺点，如果安装/配置过程中没有特别格外注意的话，可能导致和其他选项比较起来性能低下、质量不高。鉴于overlay和overlay2受到了Fedora和RHEL最新的内核的支持，并且拥有SELinux的支持，除非在Red Hat场景中有某种必须使用devicemapper的需求，我想随着用户的成熟他们会转向overlay的怀抱。</p></blockquote><h5 id="Btrfs"><a href="#Btrfs" class="headerlink" title="Btrfs"></a>Btrfs</h5><blockquote><p>Btrfs 被称为下一代写时复制文件系统，并入Linux内核，也是文件级存储，但可以向 Device mapper 一直操作底层设备。 Btrfs 把文件系统的一部分配置为一个完整的子文件系统，称为 subvolume。那么采用 subvolume ，一个大的文件系统可以被划分为很多个子文件系统，这些子文件系统共享底层的设备空间，在需要磁盘空间使用时便从底层设备中分配，类似应用程序调用 malloc（）分配内存一样。为了灵活利用设备空间， Btrfs 将磁盘空间划分为多个 chunk。每个 chunk 可以使用不同的磁盘空间分配策略。比如某些 chunk 只存放 metadata ，某些chunk 只存放数据。这种模型有很多优点，比如 Btrfs 支持动态添加设备。用户在系统中添加新的磁盘之后，可以使用 Btrfs 的命令将该设备添加到文件系统中。Btrfs 把一个大的文件系统当成一个资源池，配置成多个完整的子文件系统，还可以往资源池里加新的子文件系统，而基础镜像则是子文件系统的快照，每个子镜像和容器都有自己的快照，这些快照都是 subvolume 的快照。</p></blockquote><p>   <a href="http://dockone.io/uploads/article/20190702/99ab3acda52806a948625219d9e96a0b.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/99ab3acda52806a948625219d9e96a0b.jpg" alt="4.jpg"></a></p><blockquote><p>当写入一个新文件时，为在容器的快照里为其分配一个新的数据块，文件写在这个空间里，这个叫做分配。而当要修改已有文件时，使用 CoW 复制分配一个新的原始数据和快照，在这个新分配的空间变更数据，变结束再跟新相关的数据结构指向新子文件系统和快照，原来的原始数据和快照没有指针指向，被覆盖。</p></blockquote><blockquote><p><strong>历史</strong>：<strong>2013年12月</strong>较晚的时候，Red Hat公司的Alex Larsson在编号为<a href="https://github.com/docker/docker/commit/e51af36a85126aca6bf6da5291eaf960fd82aa56" target="_blank" rel="noopener">e51af36a85126aca6bf6da5291eaf960fd82aa56</a>的提交中，让使用btrfs作为管理<code>/var/lib/docker</code>的文件系统成为可能。</p><p><strong>实现</strong>：Btrfs的原生特性中，有两个是“子卷（subvolumes）”和“快照（snapshots）”。<em>（译注：根据Wikipedia，“子卷在btrfs中不是一个块设备，也不应该被当做是一个块设备。相反，子卷可以被想象成POSIX文件的命名空间。这个命名空间可以通过顶层的子卷来访问到，也可以独立地被挂载。快照在Btrfs中实际上是一个子卷，通过使用Btrfs的写时复制来和其他的子卷共享数据，对快照的更改不会影响原先的子卷。” ）</em> graphdriver实现中主要结合了这两个能力，从而提供了堆叠和类似写时复制的特性。当然，graphdriver的根（默认情况下是：<code>/var/lib/docker</code>）需要是一个被btrfs文件系统格式化的磁盘。</p><p><strong>优点</strong>：Btrfs几年前发布的时候（2007-2009时代），它被视作一个未来的Linux文件系统并<a href="https://lwn.net/Articles/342892/" target="_blank" rel="noopener">受到了大量的关注</a>。如今在上游Linux内核中，该文件系统已经比较健壮，并受到良好的支持，是众多可选的文件系统之一。</p><p><strong>缺点</strong>：但是Btrfs并没有成为Linux发行版的主流选择，所以你不大可能已经有一个btrfs格式化的磁盘。因为这种在Linux发行版中采用不足的原因，它并没有受到类似其他graphdriver一样的关注和采用。</p><p><strong>总结</strong>：如果你正在使用btrfs，那很显然的这个graphdriver应该迎合了你的需求。在过去几年有过很多Bug，并且有一段时间缺乏对SELinux的支持，但是这已经<a href="http://dockone.io/docker/docker#16452" target="_blank" rel="noopener">被修复</a>了。同时，对btrfs配额的支持也直接加进了docker守护进程中，这是<a href="https://github.com/zhuguihua" target="_blank" rel="noopener">Zhu Guihua</a>在编号为<a href="http://dockone.io/docker/docker#19651" target="_blank" rel="noopener">#19651</a>的PR中添加的，这个特性包含在了Docker 1.12版本中。</p></blockquote><h5 id="ZFS"><a href="#ZFS" class="headerlink" title="ZFS"></a>ZFS</h5><blockquote><p>ZFS 文件系统是一个革命性的全新的文件系统，它从根本上改变了文件系统的管理方式， ZFS 完全抛弃了 “ 卷管理 ” ，不再创建虚拟的卷，而是把所有设备集中到一个存储池中进行管理，用 “ 存储池 ”  的概念来管理物理存储空间。过去，文件系统都是构建在物理设备之上的，为了管理这些物理设备，并为数据提供冗余，“ 卷管理 ” 的概念提供了一个单设备的映射。而 ZFS 创建在虚拟的，被称为 “ zpools ” 的存储池之上。每个存储池由若干虚拟设备（ virtual devices ，vdevs ）组成。这些虚拟设备可以是原始磁盘，也节能是一个RAID1 镜像设备，或是非标准 RAID 等级的多磁盘组。  于是 zpool 上的文件系统可以使用这些虚拟设备的总存储容量。</p></blockquote><p>  <a href="http://dockone.io/uploads/article/20190702/d6daba2b7adfe96daca62f9ed90bf0c4.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/d6daba2b7adfe96daca62f9ed90bf0c4.jpg" alt="5.jpg"></a></p><blockquote><p>下面看一下Docker 里ZFS的使用。首先从 zpool里分配一个ZFS 文件系统给镜像的基础层，而其他镜像层则是这个 ZFS 文件系统快照的克隆，快照是只读的，而克隆是可写的，当容器启动时则在镜像的顶层生成一个可写层。如下图所示：</p></blockquote><p>  <a href="http://dockone.io/uploads/article/20190702/34cc4c9ea6c96b6f83dabb961ed8950e.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/34cc4c9ea6c96b6f83dabb961ed8950e.jpg" alt="6.jpg"></a></p><blockquote><p>d当要写一个新文件时，使用按需分配，一个新的数据块从 zpool 里生成新的数据写入这个块，而这个新空间存于容器（ ZFS 的克隆 ）里。</p><p>当要修改一个已存在的文件时，使用写时复制，分配一个新空间并把原始数据复制到新空间完成修改。</p></blockquote><blockquote><p><strong>历史</strong>：ZFS的graphdriver是由Arthur Gautier和Jörg Thalheim一起在<a href="http://dockone.io/docker/docker#9411" target="_blank" rel="noopener">#9411</a>的PR中实现的，在<strong>2014年的5月</strong>被合并进了Docker引擎里面，并且从Docker 1.7版本开始用户可以使用。该实现依赖Go的一个三方包<a href="https://github.com/mistifyio/go-zfs" target="_blank" rel="noopener">go-zfs</a>进行相关zfs命令的交互。</p><p><strong>实现</strong>：与btrfs和devicemapper类似，要使用zfs驱动必需要有一个ZFS格式化的块设备挂载到graphdriver路径（默认是/var/lib/docker）。同时也需要安装好zfs工具（在绝大多数的发行版上是一个名为zfs-utils的包）供zfs Go库调用来执行相关操作。ZFS有能力创建快照（与btrfs类似），然后以快照的克隆作为分享层的途径（在ZFS的实现中成了一个快照）。因为ZFS不是一个基于文件的实现，aufs和overlay中所拥有的内存共享能力在ZFS是没有的。</p><p><strong>优点</strong>：ZFS正在受到越来越多的欢迎，在Ubuntu 16.04中，在Ubuntu的LXC/LXD中已经被使用。最初由Sun创建，ZFS已经存在很长的时间了，并且在Solaris和很多BSD的衍生版中使用，并且它的Linux移植版实现看起来也比较稳定，对于容器文件系统的场景也有足够合理性能。<code>ZFS</code>graphdriver也很及时的在Dockr 1.12中通过PR <a href="http://dockone.io/docker/docker#21946" target="_blank" rel="noopener">#21946</a>添加了配额的支持，这让它在配额支持方面和btrfs、devicemapper站在了同一起跑线上。</p><p><strong>缺点</strong>：除了没有基于文件（inode）的共享达到内库共享之外，很难说ZFS和其它同样基于块设备的实现相比有什么缺点。通过比较，ZFS看起来欢迎程度越来越高。对于那些完全支持或者正在使用ZFS的Linux发行版或者UNIX衍生版而言，zfs graphdriver可以是一个非常好的选择。</p><p><strong>总结</strong>：ZFS的支持为Docker引擎中稳定的graphdriver加了分。对于那些ZFS的使用者，或者那些ZFS扮演了更要角色的发行版来说，Docker能直接支持该文件系统，对这些社区来说是一个好消息。对于那些默认文件系统是ext4和xfs的发行版，默认采用overlay驱动的用户来说，时间会告诉我们他们是否会对zfs驱动产生更多的兴趣。</p></blockquote><h4 id="存储驱动的对比及适应场景"><a href="#存储驱动的对比及适应场景" class="headerlink" title="存储驱动的对比及适应场景"></a>存储驱动的对比及适应场景</h4><table><thead><tr><th><strong>存储驱动</strong></th><th><strong>特点</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td>AUFS</td><td>联合文件系统、未并入内核主线、文件级存储</td><td>作为docker的第一个存储驱动，已经有很长的历史，比较稳定，且在大量的生产中实践过，有较强的社区支持</td><td>有多层，在做写时复制操作时，如果文件比较大且存在比较低的层，可能会慢一些</td><td>大并发但少IO的场景</td></tr><tr><td>overlayFS</td><td>联合文件系统、并入内核主线、文件级存储</td><td>只有两层</td><td>不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件消耗更多的时间</td><td>大并发但少IO的场景</td></tr><tr><td>Devicemapper</td><td>并入内核主线、块级存储</td><td>块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件</td><td>不支持共享存储，当有多个容器读同一个文件时，需要生成多个复本，在很多容器启停的情况下可能会导致磁盘溢出</td><td>适合io密集的场景</td></tr><tr><td>Btrfs</td><td>并入linux内核、文件级存储</td><td>可以像devicemapper一样直接操作底层设备，支持动态添加设备</td><td>不支持共享存储，当有多个容器读同一个文件时，需要生成多个复本</td><td>不适合在高密度容器的paas平台上使用</td></tr><tr><td>ZFS</td><td>把所有设备集中到一个存储池中来进行管理</td><td>支持多个容器共享一个缓存块，适合内存大的环境</td><td>COW使用碎片化问题更加严重，文件在硬盘上的物理地址会变的不再连续，顺序读会变的性能比较差</td><td>适合paas和高密度的场景</td></tr></tbody></table><p><a href="http://dockone.io/uploads/article/20190702/747be895d53add6ea9ddf868f95ff8ec.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/747be895d53add6ea9ddf868f95ff8ec.jpg" alt="7.jpg"></a></p><h5 id="AUFS-VS-Overlay"><a href="#AUFS-VS-Overlay" class="headerlink" title="AUFS VS  Overlay"></a>AUFS VS  Overlay</h5><blockquote><p>AUFS和Overlay都是联合文件系统，但AUFS有多层，而Overlay只有两层，所以在做写时复制操作时，如果文件比较大且存在比较低的层，则AUSF可能会慢一些。而且Overlay并入了linux kernel mainline，AUFS没有，所以可能会比AUFS快。但Overlay还太年轻，要谨慎在生产使用。而AUFS做为docker的第一个存储驱动，已经有很长的历史，比较的稳定，且在大量的生产中实践过，有较强的社区支持。目前开源的DC/OS指定使用Overlay。</p></blockquote><h5 id="Overlay-VS-Device-mapper"><a href="#Overlay-VS-Device-mapper" class="headerlink" title="Overlay VS Device mapper"></a>Overlay VS Device mapper</h5><blockquote><p>Overlay是文件级存储，Device mapper是块级存储，当文件特别大而修改的内容很小，Overlay不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件要消耗更多的时间，而块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件，在这种场景下，显然device mapper要快一些。因为块级的是直接访问逻辑盘，适合IO密集的场景。而对于程序内部复杂，大并发但少IO的场景，Overlay的性能相对要强一些。</p></blockquote><h5 id="Device-mapper-VS-Btrfs-Driver-VS-ZFS"><a href="#Device-mapper-VS-Btrfs-Driver-VS-ZFS" class="headerlink" title="Device mapper VS Btrfs Driver VS ZFS"></a>Device mapper VS Btrfs Driver VS ZFS</h5><blockquote><p>Device mapper和Btrfs都是直接对块操作，都不支持共享存储，表示当有多个容器读同一个文件时，需要生活多个复本，所以这种存储驱动不适合在高密度容器的PaaS平台上使用。而且在很多容器启停的情况下可能会导致磁盘溢出，造成主机不能工作。Device mapper不建议在生产使用。Btrfs在docker build可以很高效。<br>ZFS最初是为拥有大量内存的Salaris服务器设计的，所在在使用时对内存会有影响，适合内存大的环境。ZFS的COW使碎片化问题更加严重，对于顺序写生成的大文件，如果以后随机的对其中的一部分进行了更改，那么这个文件在硬盘上的物理地址就变得不再连续，未来的顺序读会变得性能比较差。ZFS支持多个容器共享一个缓存块，适合PaaS和高密度的用户场景。</p></blockquote><h4 id="IO性能对比"><a href="#IO性能对比" class="headerlink" title="IO性能对比"></a>IO性能对比</h4><blockquote><p>测试工具：IOzone（是一个文件系统的benchmark工具，可以测试不同的操作系统中文件系统的读写性能）<br>测试场景：从4K到1G文件的顺序和随机IO性能<br>测试方法：基于不同的存储驱动启动容器，在容器内安装IOzone，执行命令：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./iozone -<span class="selector-tag">a</span> -n <span class="number">4</span>k -g <span class="number">1</span>g -<span class="selector-tag">i</span> <span class="number">0</span> -<span class="selector-tag">i</span> <span class="number">1</span> -<span class="selector-tag">i</span> <span class="number">2</span> -f /root/test<span class="selector-class">.rar</span> -Rb ./iozone.xls</span><br></pre></td></tr></table></figure><h5 id="测试项的定义和解释"><a href="#测试项的定义和解释" class="headerlink" title="测试项的定义和解释"></a>测试项的定义和解释</h5><blockquote><p>Write：测试向一个新文件写入的性能。<br>Re-write：测试向一个已存在的文件写入的性能。<br>Read：测试读一个已存在的文件的性能。<br>Re-Read：测试读一个最近读过的文件的性能。<br>Random Read：测试读一个文件中的随机偏移量的性能。<br>Random Write：测试写一个文件中的随机偏移量的性能。</p></blockquote><h5 id="测试数据对比"><a href="#测试数据对比" class="headerlink" title="测试数据对比"></a>测试数据对比</h5><blockquote><p>Write：</p><p><a href="http://dockone.io/uploads/article/20190702/f592fe0e47c24441541b3970f6775674.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/f592fe0e47c24441541b3970f6775674.jpg" alt="8.jpg"></a></p><p>Re-write:</p><p><a href="http://dockone.io/uploads/article/20190702/778f51a47542033e0ded1b1b1d0edd63.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/778f51a47542033e0ded1b1b1d0edd63.jpg" alt="9.jpg"></a></p><p>Read：</p><p><a href="http://dockone.io/uploads/article/20190702/3028c70ce9a0abcfa673459b199612a3.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/3028c70ce9a0abcfa673459b199612a3.jpg" alt="10.jpg"></a></p><p>Re-Read：</p><p><a href="http://dockone.io/uploads/article/20190702/fb9fe60305c941fbfbc564cb2351e588.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/fb9fe60305c941fbfbc564cb2351e588.jpg" alt="11.jpg"></a></p><p>Random Read：</p><p><a href="http://dockone.io/uploads/article/20190702/ef273f23ee51927344a224ef3798e75a.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/ef273f23ee51927344a224ef3798e75a.jpg" alt="12.jpg"></a></p><p>Random Write：</p><p><a href="http://dockone.io/uploads/article/20190702/3a07e8a8a9b4de99602d02dc849b771b.jpg" target="_blank" rel="noopener"><img src="http://dockone.io/uploads/article/20190702/3a07e8a8a9b4de99602d02dc849b771b.jpg" alt="13.jpg"></a></p></blockquote><ul><li>通过以上的性能数据可以看到：<ul><li>AUFS在读的方面性能相比Overlay要差一些，但在写的方面性能比Overlay要好。</li><li>device mapper在512M以上文件的读写性能都非常的差，但在512M以下的文件读写性能都比较好。</li><li>btrfs在512M以上的文件读写性能都非常好，但在512M以下的文件读写性能相比其他的存储驱动都比较差。</li><li>ZFS整体的读写性能相比其他的存储驱动都要差一些。 简单的测试了一些数据，对测试出来的数据原理还需要进一步的解析。</li></ul></li></ul><blockquote><p><code>Docker</code> 提供了可插拔的存储驱动程序架构。它使我们能够灵活地 <code>插入</code> <code>Docker</code>中的存储驱动程序。他完全基于<code>Linux</code>文件系统 。</p></blockquote><blockquote><p>要实现这一功能，我们必须 在<code>docker</code> 守护进程的开始时就设置驱动程序。 <code>Docker</code> 守护程序只能运行一个存储驱动程序，并且该守护程序实例创建的所有容器使用相同的存储驱动程序。</p></blockquote><ul><li><p>当前存储驱动</p><ul><li>查看守护程序使用哪个存储驱动程序，可以使用一下命令。</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="meta">info</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到上面的命令显示了守护进程使用的存储驱动程序。备份文件系统 <code>extfs</code> 。 <code>extfs</code> 表示覆盖存储驱动程序在文件系统的顶部运行。</p><p>后备文件系统实质用于在 <code>/var/lib/docker</code> 录下创建 <code>Docker</code> 主机的本地存储区域的文件系统。</p></blockquote><ul><li><p>下表包含必须与主机备份文件系统相匹配的存储驱动程序。</p><table><thead><tr><th align="center">存储驱动</th><th align="center">常用</th><th align="center">已禁用</th></tr></thead><tbody><tr><td align="center">overlay</td><td align="center">ext4xfs</td><td align="center">btrfs  aufs  overlayzfs  eCryptfs</td></tr><tr><td align="center">overlay2</td><td align="center">ext4xfs</td><td align="center">btrfs  aufs  overlayzfs  eCryptfs</td></tr><tr><td align="center">aufs</td><td align="center">ext4xfs</td><td align="center">btrfs  aufs  eCryptfs</td></tr><tr><td align="center">aufs</td><td align="center">btrfsonly</td><td align="center">N/A</td></tr><tr><td align="center">devicemapper</td><td align="center">Direct-lvm</td><td align="center">N/A</td></tr><tr><td align="center">vfs</td><td align="center">debugging only</td><td align="center">N/A</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">N/A</td></tr></tbody></table></li></ul><blockquote><p>注意 ：- “已禁用/Disabled on” 表示某些存储驱动程序无法在某些后台文件系统上运行</p></blockquote></li></ul><h4 id="设置存储驱动程序"><a href="#设置存储驱动程序" class="headerlink" title="设置存储驱动程序"></a>设置存储驱动程序</h4><blockquote><p>可以通过 <code>dockersd</code>命令按指定名称来设置存储驱动程序。以下命令启动守护程序并设置新的驱动程序。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dockerd <span class="attribute">--storage-driver</span>=devicemapper</span><br></pre></td></tr></table></figure><blockquote><p>稍后，可以通过 <code>docker info</code> 命令检查 <code>docker</code> 服务驱动程序</p></blockquote><hr><p><strong>对于某些容器，直接将数据放在由</strong> storage driver <strong>维护的层中是很好的选择，比如那些无状态的应用。无状态意味着容器没有需要持久化的数据，随时可以从镜像直接创建。即存在与否依赖镜像的存在。</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如一些工具箱，启动是为了执行命令，不需要保存数据供以后使用，使用完直接退出，容器删除时存在容器层的工作数据也一起删除，这没问题，下次启动新容器即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但对于另一类应用这种方式就不合适了，它们有持久化数据的需求，容器启动时需要加载已有的数据，容器销毁时希望保留产生的新数据，也就是说，这类容器是有状态的，例如数据库。</span></span><br><span class="line">这就要用到docker 的另一个存储机制：data <span class="keyword">volume</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h3 id="Data-Volume（数据卷）"><a href="#Data-Volume（数据卷）" class="headerlink" title="Data Volume（数据卷）"></a>Data Volume（数据卷）</h3><hr><blockquote><p>对于有些容器，我们可能会持久化数据的需求，也就是容器启动时需要加载已有的数据，容器销毁时希望保留产生的数据，也就是说这类容器是有状态的。</p><p>这就需要用到 <code>Docker</code> 的 <code>Data Volume</code> 存储机制。<code>Data Volume</code>本质上是 <code>Docker host</code>文件系统中的目录或文件，能够直接被 <code>mount</code> 到容器的文件系统。</p><p>在具体的使用上，<code>Docekr</code> 提供了两种类型的Volume：bind mount 和docker managed volume。</p></blockquote><h5 id="附：bind-mount-与-docker-managed-volume-的区别"><a href="#附：bind-mount-与-docker-managed-volume-的区别" class="headerlink" title="附：bind mount 与 docker managed volume 的区别"></a>附：bind mount 与 docker managed volume 的区别</h5><ul><li>这两种 <strong>data volume</strong> 实际上都是使用 <strong>host</strong> 文件系统的中的某个路径作为 <strong>mount</strong> 源。它们不同之处在于：</li></ul><table><thead><tr><th><strong>不同点</strong></th><th><strong>bind mount</strong></th><th><strong>docker managed volume</strong></th></tr></thead><tbody><tr><td><strong>volume 位置</strong></td><td>可任意指定</td><td><strong>/var/lib/docker/volumes/…</strong></td></tr><tr><td><strong>对已有mount point 影响</strong></td><td>隐藏并替换为 <strong>volume</strong></td><td>原有数据复制到 <strong>volume</strong></td></tr><tr><td><strong>是否支持单个文件</strong></td><td>支持</td><td>不支持，只能是目录</td></tr><tr><td><strong>权限控制</strong></td><td>可设置为只读，默认为读写权限</td><td>无控制，均为读写权限</td></tr><tr><td><strong>移植性</strong></td><td>移植性弱，与 <strong>host path</strong> 绑定</td><td>移植性强，无需指定 <strong>host</strong> 目录</td></tr></tbody></table><h5 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h5><ul><li><p>Data Volume 数据卷 ：是可以存放在一个或多个容器内的 <strong>特定的目录</strong>，提供独立于容器之外的<strong>持久化存储</strong>；是经过<strong>特殊设计的目录</strong>，可以绕过联合文件系统（UFS），为一个或多个容器提供访问；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Docker</span> Contrainer</span><br><span class="line">面向对象中的对象</span><br><span class="line"></span><br><span class="line">对象一旦被销毁，数据就不存在了</span><br><span class="line"></span><br><span class="line">容器一旦被销毁，则容器内的数据将一并被删除</span><br><span class="line"></span><br><span class="line">服务器中的图案也会一并销毁</span><br><span class="line"></span><br><span class="line">容器中的数据不是持久化状态的</span><br></pre></td></tr></table></figure><blockquote><p>不使用 <code>volume</code>的时候，对容器进行的改动是不会被保存的，使用 <code>volume</code>可以实现持久化存储；比如运行一个数据的操作，数据库的一个容器，数据库的数据应该被持久化存储的，<code>volume</code>就可以实现这个，并且 <code>volume</code>可以提供容器与容器之间的共享数据；</p></blockquote></li></ul><h5 id="Docker-的理念之一："><a href="#Docker-的理念之一：" class="headerlink" title="Docker 的理念之一："></a>Docker 的理念之一：</h5><blockquote><p>就是将其应用于其运行的环境打包，因此，通过<code>Docker</code> 容器的生存周期，都是与容器中运行的程序相一致的，而我们对数据的要求通常是持久化的；另一方面，<code>docker</code>容器之间也需要有一个 <strong>共享数据的渠道</strong> ，而这些需求就催生出了<code>docker</code>数据卷的产生；</p></blockquote><h5 id="数据卷的设计的目的："><a href="#数据卷的设计的目的：" class="headerlink" title="数据卷的设计的目的："></a>数据卷的设计的目的：</h5><blockquote><p>在于 <strong>数据的永久化</strong> ，它完全独立于容器的生存周期，因此，<code>Docekr</code>不会在容器删除时删除其挂载的数据卷，也不会存在类似垃圾收集机制，对容器引用的数据卷进行处理了；</p></blockquote><h5 id="数据卷特点："><a href="#数据卷特点：" class="headerlink" title="数据卷特点："></a>数据卷特点：</h5><ul><li><ol><li><code>Docker</code>数据卷是独立于<code>Docker</code>的存在，它存在于<code>Docker host</code>（宿主机）中，因此，它与容器的生存周期是分离的；</li><li><code>Docker</code>数据卷本质上是存在于<code>Docker</code>宿主机的本地文件系统中；</li><li><code>Docker</code> 数据卷可以是目录也可以是文件；（不是块设备）</li><li><code>Docker</code> 容器可以利用数据卷的技术与容器宿主机进行数据共享；</li><li>同一个目录或者文件，可以支持多个容器进行访问，这样其实实现了容器的数据共享和交换；</li><li>数据卷是在容器启动是进行初始化的，那么如果容器使用的镜像包含了的数据也会在容器启动时拷贝到容器的数据卷中；</li><li><code>数据卷可以在容器之间共享和重用</code>；</li><li><code>数据卷的修改会立马生效</code>；容器可以对数据卷里的内容直接修改；容器对数据卷进行的修改是及时的，所有的修改都会直接体现在数据卷中；</li><li><code>数据卷的更新不会影响镜像</code>；因为文件不会写到镜像中去，数据卷是独立于联合文件系统的，而镜像本身基于联合文件系统，so镜像与数据卷之间不会有相互影响的情况；</li><li><code>数据卷会一直存在，即使挂载数据卷的容器已经删除</code>因为数据均本质上是宿主机上的一个目录，同时为了提供数据的永久化，它的生存周期与容器是完全隔离的；</li></ol><p><img src="https://img-blog.csdnimg.cn/20190617160156293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTQ2ODkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><blockquote><p>Docker 容器中的数据操作经过了UFS 的，UFS 会在宿主机中写一次文件，这个文件在宿主机上是临时的，这时候就出现了重复写的情况，会影响系统的性能；此外，删除容器的时候，就没有人能够通过UFS 在访问到宿主机中的文件了；</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190617160937555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTQ2ODkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>容器卷可以绕过 UFS 直接操作主机上的文件，当容器删除的时候，宿主机上的文件还在，就在指定的目录下，在重新创建容器的时候们可以指定容器继续读取宿主机上的文件；</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190617161045446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTQ2ODkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h5><blockquote><p>包含数据卷挂载的容器在容器关闭时，如果修改了宿主机下的数据卷会，容器里面会产生改变吗？ </p></blockquote><ul><li><strong>bind mount 数据卷</strong></li></ul><blockquote><p>使用docker run –name nginx-test -p 8080:80 -d -v ~/myvolume:/usr/share/nginx/html nginx  创建一个bind mount 数据卷 是宿主机的存储位置必须是绝对路径。目录不存在则会生成</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两种情况创建的数据卷如果浏览器访问宿主机的ip:8080 会出现报错，因为这是创建的时候清空了容器数据卷下index.html</span></span><br><span class="line"><span class="comment"># 创建的宿主机和容器的数据卷都有读写的权限</span></span><br><span class="line">$ docker run <span class="params">--name</span> nginx-test -p 8080<span class="function">:80</span> -d -v ~<span class="string">/myvolume</span>:<span class="string">/usr/share/nginx/html</span> nginx</span><br><span class="line"><span class="comment"># 这样执行后的文件宿主机的~/myvolume 文件如果不存在直接创建，容器的文件路径不存在也会直接创建，如果/usr/share/nginx/html文件存在里面内容会清空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给容器里面的数据卷加权限</span></span><br><span class="line">$ docker run <span class="params">--name</span> nginx-test -p 8080<span class="function">:80</span> -d -v ~<span class="string">/myvolume</span>:<span class="string">/usr/share/nginx/html</span><span class="function">:ro</span> nginx</span><br><span class="line"><span class="comment"># 如果执行这个 :/usr/share/nginx/html:ro这个地方加的是 :ro 是设置的只有读取权限</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行dockers inspect 容器名称或容器（ID） 是将容器的配置文件已json字符串的形式返回</span></span><br><span class="line"><span class="string">"Binds"</span>: [</span><br><span class="line">                <span class="string">"/root/myvolume:/usr/share/nginx/html"</span>   <span class="comment"># 宿主机数据卷位置: 容器的目录位置</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line"><span class="string">"Mounts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="string">"Source"</span>: <span class="string">"/root/myvolume"</span>,   <span class="comment"># 是宿主机数据卷的存储位置</span></span><br><span class="line">                <span class="string">"Destination"</span>: <span class="string">"/usr/share/nginx/html"</span>,</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="string">"RW"</span>: <span class="literal">true</span>,   <span class="comment"># 权限 true是可以读写 fales 是只读</span></span><br><span class="line">                <span class="string">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 在宿主机的数据卷下执行:</span></span><br><span class="line">vim index.html </span><br><span class="line"><span class="meta"># 在文件里写入hello ， 你在访问的时候就可以在页面上看到你写入得数据了</span></span><br></pre></td></tr></table></figure><blockquote><p>执行 docker exec -it 容器名称（容器ID） bahs进入到容器里面，每个容器都会包含一个迷你版的linux系统</p><p>执行 cd /usr/share/nginx/html  </p><p>执行 ls</p><p>你会看到容器目录里会有我们刚才创建好的文件</p><p>index.html</p><p>执行 cat index.html  可以看到里面我们加入的数据</p><p>如果是挂载数据卷的时候加 <code>:ro</code> 容器内修改文件，发现会提示该文件是只读的  </p></blockquote><hr><ul><li><strong>docker managed volume 数据卷</strong><ul><li>创建出来的两个都是有读写权限的</li></ul></li></ul><blockquote><p>使用docker run –name nginx-test2 -p 8080:80 -d -v /usr/share/nginx/html nginx 创建一个<strong>docker managed volume 数据卷</strong> </p><p>这种命令创建是不用指定宿主机数据卷存储位置的默认在 /var/lib/docker/volumes/ 下的文件名是经过<code>sha256</code> 摘要过的</p></blockquote><ul><li>查看宿主机创建出来的数据卷</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd  /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">volumes</span>/</span></span><br><span class="line">$ ls </span><br><span class="line"><span class="number">8</span>d668720aaeccee44b5fb554571912a6a257eb3a28cecf334203805a0c9b6fd3  <span class="comment">#这是自己创建出来的数据卷</span></span><br><span class="line"><span class="comment"># 执行 cd _data 进入这这个文件夹里面</span></span><br><span class="line">$ ls</span><br><span class="line"><span class="number">50</span>x.html  index.html   <span class="comment"># 这两个文件是把容器里文件给拷贝了出来</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在宿主机或者容器里面都可以对文件进行读写操作</p></blockquote><h5 id="挂载多个目录"><a href="#挂载多个目录" class="headerlink" title="挂载多个目录"></a>挂载多个目录</h5><ul><li>就是执行多个 <code>-v</code> 就可以</li></ul><h5 id="容器间挂载"><a href="#容器间挂载" class="headerlink" title="容器间挂载"></a>容器间挂载</h5><blockquote><p>创建数据卷，只要在<code>docker run</code>命令后面跟上<code>-v</code>参数即可创建一个数据卷，当然也可以跟多个<code>-v</code>参数来创建多个数据卷，当创建好带有数据卷的容器后，就可以在其他容器中通过<code>--volumes-from</code>参数来挂载该数据卷了，而不管该容器是否运行。</p></blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">tid</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">volumes</span><span class="literal">-</span><span class="comment">from</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">test</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">test3</span> <span class="comment">nginx</span></span><br></pre></td></tr></table></figure><blockquote><p>-i  : 以交互模式运行容器，通常与 -t 同时使用；</p><p>-t  : 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>-d : 后台运行容器，并返回容器ID；</p></blockquote><ul><li>再创建一个nginx-test4，挂载nginx-test3中从nginx-test挂载的数据卷，当然也可以直接挂载初识的nginx-test容器的数据卷</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>即使删除了初始的数据卷容器 nginx-test，或者是删除了其他容器，但只要是有容器在使用该数据卷，那么它里面的数据就不会丢失</span><br><span class="line"><span class="bullet">* </span>命令中的rm表示当容器退出即停止的时候，会自动删除该容器</span><br></pre></td></tr></table></figure><hr><h5 id="备份数据卷"><a href="#备份数据卷" class="headerlink" title="备份数据卷"></a>备份数据卷</h5><ul><li>创建一个容器container1，包含两个数据卷/usr/share/nginx/html1和/usr/share/nginx/html2（这两个目录是在容器里的数据卷路径）</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -tid -v /usr/share/nginx/html1 -v /usr/share/nginx/html2 --name container1</span><br><span class="line">nginx   <span class="comment"># 创建容器container1</span></span><br><span class="line"></span><br><span class="line">$ docker exec -it container1 bash   <span class="comment">#进入创建好的容器里面</span></span><br><span class="line"></span><br><span class="line">$ cd html1/  <span class="comment"># 进入到html1数据卷中</span></span><br><span class="line">$ echo html1 <span class="meta">&gt;&gt; </span><span class="number">1</span>.text <span class="comment"># 向 1.text 文件中追加数据，文件不存在则会创建文件</span></span><br><span class="line"></span><br><span class="line">$ cd html2/  <span class="comment"># 进入到html2数据卷中</span></span><br><span class="line">$ echo html2 <span class="meta">&gt;&gt; </span><span class="number">2</span>.text <span class="comment"># 向 2.text 文件中追加数据，文件不存在则会创建文件</span></span><br></pre></td></tr></table></figure><ul><li>接下来进行数据卷的备份操作</li></ul><blockquote><p>使用  - -volumes-from 来创建一个加载 container1 容器卷的容器，并从宿主机挂载当前所在目录到容器的 /backup 目录，容器内会 tar 压缩 /var/colume1 目录下的文件到 /backup/backup1.tar，因为宿主机当前目录已经映射到 /backup 目录了，因此会在宿主机当前目录也存在该压缩包。备份完毕后 -rm 自动删除该创建的容器。</p></blockquote><h5 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">volume</span><span class="bash"> ls     列出所有的数据卷</span></span><br><span class="line">docker <span class="keyword">volume</span><span class="bash"> ls --filter dangling=<span class="literal">true</span>     过滤不在使用的数据卷</span></span><br><span class="line">docker <span class="keyword">volume</span><span class="bash"> rm [volume name]     删除一个数据卷，容器正在使用的数据卷不能删除，绑定挂载的数据卷无法删除</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm <span class="keyword">my</span>-volio  删除数据卷 <span class="keyword">my</span>-volio</span><br></pre></td></tr></table></figure><blockquote><p>数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。</p></blockquote><ul><li>无主的数据卷可能会占据很多空间，要清理请使用以下命令</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">volume</span><span class="bash"> prune</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docek&quot;&gt;&lt;a href=&quot;#Docek&quot; class=&quot;headerlink&quot; title=&quot;Docek&quot;&gt;&lt;/a&gt;Docek&lt;/h3&gt;&lt;h3 id=&quot;镜像层的镜像分层结构&quot;&gt;&lt;a href=&quot;#镜像层的镜像分层结构&quot; class=&quot;headerlink&quot; title=&quot;镜像层的镜像分层结构&quot;&gt;&lt;/a&gt;镜像层的镜像分层结构&lt;/h3&gt;&lt;h5 id=&quot;docker的镜像分层结构，如下所示：&quot;&gt;&lt;a href=&quot;#docker的镜像分层结构，如下所示：&quot; class=&quot;headerlink&quot; title=&quot;docker的镜像分层结构，如下所示：&quot;&gt;&lt;/a&gt;docker的镜像分层结构，如下所示：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13690429-8c66ee3f4b08a970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1056/format/webp&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker镜像中引入层layer概念，镜像的制作过程中的每一步都会生产一个新的镜像层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容器读写层的工作原理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们刚刚在说镜像的分层特性的时候说到镜像是只读的。而事实上当我们使用镜像启动一个容器的时候，我们其实是可以在容器里随意读写的，从结果上看，似乎与镜像的只读特性相悖。&lt;/p&gt;
&lt;p&gt;我们继续看上面的图，其实可以看到在镜像的最上层，还有一个读写层。而这个读写层，即在容器启动时为当前容器单独挂载。每一个容器在运行时，都会基于当前镜像在其最上层挂载一个读写层。而用户针对容器的所有操作都在读写层中完成。一旦容器销毁，这个读写层也随之销毁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知识点： 容器=镜像+读写层&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们针对这个读写层的操作，主要基于两种方式：写时复制和用时分配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="http://laxe.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>彻底卸载mysql</title>
    <link href="http://laxe.top/2019/12/26/centos7%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql%E5%92%8C%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://laxe.top/2019/12/26/centos7彻底卸载mysql和通过yum安装mysql/</id>
    <published>2019-12-26T00:24:21.232Z</published>
    <updated>2019-12-26T00:29:20.662Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>查看是否有安装的mysql</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql <span class="comment">// 查看命令1</span></span><br><span class="line">yum <span class="built_in">list</span> install mysql* <span class="comment">// 查看命令2         二选一查看</span></span><br></pre></td></tr></table></figure></li><li><p><strong>卸载mysql安装包</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql</span> <span class="selector-tag">mysql-server</span> <span class="selector-tag">mysql-libs</span> <span class="selector-tag">compat-mysql51</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-release</span></span><br><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">mysql-community-libs-5</span><span class="selector-class">.7</span><span class="selector-class">.22-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-e</span> –<span class="selector-tag">nodeps</span> <span class="selector-tag">mysql57-community-release-el7-11</span><span class="selector-class">.noarch</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总之删到通过上面两种命令查不出来任何有关<span class="selector-tag">mysql</span>的东西。</span><br></pre></td></tr></table></figure></li><li><p><strong>删除残留的mysql目录或文件：</strong> </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查询mysql安装目录</span><br><span class="line">whereis mysql  或   find / -name mysql</span><br><span class="line"></span><br><span class="line">删除查询出的目录</span><br><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line">rm -rf /usr/bin/mysql</span><br><span class="line">rm -rf /etc/logrotate.d/mysql</span><br><span class="line">rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span></span></span><br><span class="line">rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/<span class="title">mysql</span></span></span><br><span class="line"></span><br><span class="line">总之删到通过上面两种命令查不出来任何有关mysql的东西。</span><br></pre></td></tr></table></figure></li><li><p>继续删除</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">删除mysql 配置文件</span><br><span class="line"></span><br><span class="line">rm –rf <span class="string">/usr/my.cnf</span></span><br><span class="line">rm -rf <span class="string">/root/.mysql_sercret</span></span><br><span class="line"></span><br><span class="line">删除mysql开机自启动服务</span><br><span class="line">chkconfig <span class="params">--list</span> | grep -i mysql</span><br><span class="line">chkconfig <span class="params">--del</span> mysqld  <span class="string">//</span> 服务名为你设置时候自己设置的名字</span><br></pre></td></tr></table></figure></li><li><p>至此就卸载干净了 </p></li></ul><a id="more"></a><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><ul><li><p><strong>下载并安装mysql的YUM源：</strong> </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择一个目录下载并安装</span><br><span class="line"></span><br><span class="line">mkdir soft</span><br><span class="line">cd soft</span><br><span class="line"></span><br><span class="line">wget http:<span class="comment">//dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm // 下载mysql yum源</span></span><br><span class="line">rpm -ivh mysql57-community-release-el7-<span class="number">11</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span> <span class="comment">// 安装yum源</span></span><br></pre></td></tr></table></figure></li><li><p><strong>接下在就是正式安装mysql了</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动mysql</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">如果出现以下错误：</span><br><span class="line"><span class="builtin-name">ERROR</span> 1045 (28000): Access denied <span class="keyword">for</span><span class="built_in"> user </span>‘root’@’localhost’ (using password: <span class="literal">NO</span>)</span><br><span class="line"></span><br><span class="line">首先停止mysql服务</span><br><span class="line">service mysqld stop</span><br><span class="line"></span><br><span class="line">再以不检查权限的方式启动</span><br><span class="line">mysqld --skip-grant-tables &amp;</span><br><span class="line"></span><br><span class="line">又出现以下错误：</span><br><span class="line">[<span class="builtin-name">ERROR</span>] Fatal error: Please read “Security” section of the<span class="built_in"> manual </span><span class="keyword">to</span> <span class="builtin-name">find</span> out how <span class="keyword">to</span> <span class="builtin-name">run</span> mysqld as root!</span><br><span class="line"></span><br><span class="line">执行命令以root权限启动</span><br><span class="line">mysqld <span class="attribute">--user</span>=root --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure></li><li><p><strong>如果没有报错，登录 mysql</strong> ：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">–uroot </span></span><br><span class="line"><span class="attr">如果报错试一下</span></span><br><span class="line"><span class="attr">mysql</span> <span class="string">–uroot -p直接回车</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置密码</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> root=<span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; // 刷新设置立即生效</span><br><span class="line"></span><br><span class="line">exit  // 退出,或者使用 quit 命令</span><br></pre></td></tr></table></figure></li><li><p>再次进入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot –<span class="selector-tag">p</span> <span class="comment">// 会提示输入密码</span></span><br><span class="line">输入密码，成功则密码设置完成了</span><br></pre></td></tr></table></figure></li><li><p><strong>设置root权限的远程访问</strong> </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -pvmware</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;update <span class="keyword">user</span> <span class="title">set</span> host = '%' where <span class="keyword">user</span> <span class="title">= 'root</span>';</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;select host, <span class="keyword">user</span> <span class="title">from</span> user</span><br><span class="line"></span><br><span class="line">然后就可以通过navicat(或者其他工具)远程连接了</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看是否有安装的mysql&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -qa | grep -i mysql &lt;span class=&quot;comment&quot;&gt;// 查看命令1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; install mysql* &lt;span class=&quot;comment&quot;&gt;// 查看命令2         二选一查看&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;卸载mysql安装包&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql-server&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql-libs&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;compat-mysql51&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql-community-release&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;--nodeps&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql-community-libs-5&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.22-1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.el7&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-e&lt;/span&gt; –&lt;span class=&quot;selector-tag&quot;&gt;nodeps&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mysql57-community-release-el7-11&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.noarch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总之删到通过上面两种命令查不出来任何有关&lt;span class=&quot;selector-tag&quot;&gt;mysql&lt;/span&gt;的东西。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;删除残留的mysql目录或文件：&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查询mysql安装目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;whereis mysql  或   find / -name mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;删除查询出的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /usr/lib64/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /usr/share/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /usr/bin/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /etc/logrotate.d/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;mysql&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;mysql&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;mysql&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总之删到通过上面两种命令查不出来任何有关mysql的东西。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继续删除&lt;/p&gt;
&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;删除mysql 配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm –rf &lt;span class=&quot;string&quot;&gt;/usr/my.cnf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;string&quot;&gt;/root/.mysql_sercret&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;删除mysql开机自启动服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chkconfig &lt;span class=&quot;params&quot;&gt;--list&lt;/span&gt; | grep -i mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chkconfig &lt;span class=&quot;params&quot;&gt;--del&lt;/span&gt; mysqld  &lt;span class=&quot;string&quot;&gt;//&lt;/span&gt; 服务名为你设置时候自己设置的名字&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;至此就卸载干净了 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="http://laxe.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Django 利用zipstream压缩下载多文件夹</title>
    <link href="http://laxe.top/2019/12/26/Django%20%E5%88%A9%E7%94%A8zipstream%E5%8E%8B%E7%BC%A9%E4%B8%8B%E8%BD%BD%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://laxe.top/2019/12/26/Django 利用zipstream压缩下载多文件夹/</id>
    <published>2019-12-26T00:24:12.102Z</published>
    <updated>2019-12-26T00:29:48.840Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipstream</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZipUtilities</span>:</span></span><br><span class="line">    zip_file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.zip_file = zipstream.ZipFile(mode=<span class="string">'w'</span>, compression=zipstream.ZIP_DEFLATED)</span><br><span class="line">        <span class="comment"># 写模式打开二进制压缩文件对象，这个对象是在内存中的而不是在磁盘上的</span></span><br><span class="line">        <span class="comment"># 第一个参数写模式    第二个参数写压缩格式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toZip</span><span class="params">(self, file, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">            <span class="comment"># 判断是否是文件</span></span><br><span class="line">            self.zip_file.write(file, arcname=os.path.basename(file))</span><br><span class="line">            <span class="comment"># 将文件加入加入压缩文件对象里</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 此处判断到非文件对象 用添加目录方式添加到压缩文件</span></span><br><span class="line">            self.addFolderToZip(file, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addFolderToZip</span><span class="params">(self, folder, name)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(folder):</span><br><span class="line">            <span class="comment"># 遍历目录下所有文件</span></span><br><span class="line">            full_path = os.path.join(folder, file)</span><br><span class="line">            <span class="comment"># 拼接绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(full_path):</span><br><span class="line">                <span class="comment"># 如果从目录下取出来的是文件 </span></span><br><span class="line">                self.zip_file.write(full_path, arcname=os.path.join(name, os.path.basename(full_path)))</span><br><span class="line">                <span class="comment"># 将文件加入加入压缩文件对象里</span></span><br><span class="line">            <span class="keyword">elif</span> os.path.isdir(full_path):</span><br><span class="line">                <span class="comment"># 如果从目录下取出来的是目录递归调用本函数</span></span><br><span class="line">                self.addFolderToZip(full_path, os.path.join(name, os.path.basename(full_path)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.zip_file:</span><br><span class="line">            self.zip_file.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【压力测试】使用mysqlslap进行mysql基准测试</title>
    <link href="http://laxe.top/2019/12/26/%E3%80%90%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E3%80%91%E4%BD%BF%E7%94%A8mysqlslap%E8%BF%9B%E8%A1%8Cmysql%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <id>http://laxe.top/2019/12/26/【压力测试】使用mysqlslap进行mysql基准测试/</id>
    <published>2019-12-26T00:22:22.344Z</published>
    <updated>2019-12-26T00:28:54.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要进行压力测试？"><a href="#为什么要进行压力测试？" class="headerlink" title="为什么要进行压力测试？"></a>为什么要进行压力测试？</h1><p><strong>PS：在运维工作中，压力测试是一项很重要的工作。比如在一个网站上线之前，能承受多大访问量、在大访问量情况下性能怎样，这些数据指标好坏将会直接影响用户体验。但是，在压力测试中存在一个共性，那就是压力测试的结果与实际负载结果不会完全相同，就算压力测试工作做的再好，也不能保证100%和线上性能指标相同。面对这些问题，我们只能尽量去想方设法去模拟。所以，压力测试非常有必要，有了这些数据，我们就能对自己做维护的平台做到心中有数。</strong></p><a id="more"></a><p>压力测试考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在。压测都是为了系统在线上的处理能力和稳定性维持在一个标准范围内，做到心中有数。 </p><h2 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h2><p>1、对新的或调整后的数据库服务器进行测试，验证或比较配置结果；<br>2、建立Mysql服务器的性能基准线，即得到健康环境下的指标，协助后续实际使用中的监控、优化；<br>3、模拟多用户并发访问MySQL来进行压力测试，找出系统的扩张瓶颈，增加数据库的并发，观察QPS、TPS变化，确定并发量与性能最优的关系；<br>4、对比多个存储引擎（MyISAM，InnoDB等）在相同环境下的相同并发压力下的性能差别。</p><h2 id="二、测试计划"><a href="#二、测试计划" class="headerlink" title="二、测试计划"></a>二、测试计划</h2><p>1、确定测试工具，根据测试目标和业务制定测试计划、测试场景、测试命令；<br>2、使用生产环境的数据库备份，根据测试用例进行测试；<br>3、分析测试结果。</p><h2 id="三、简介mysqlslap"><a href="#三、简介mysqlslap" class="headerlink" title="三、简介mysqlslap"></a>三、简介mysqlslap</h2><p>mysqlslap是版本高于5.1的mysql自带的工具。</p><p>【参数说明】<br>-a<br>//若命令中没通过语句或文件提供SQL表和数据，则将自动创建SQL表和数据</p><p>–auto-generate-sql-add-autoincrement<br>//给自动创建的表添加一个auto_increment列</p><p>–auto-generate-sql-execute-number=N<br>//对每个模拟用户的自动生成N次查询</p><p>–auto-generate-sql-guid-primary<br>//给自动创建的表添加基于GUID的主键</p><p>–auto-generate-sql-load-type=name<br>//指定测试语句类型：mixed（查询与插入对半）,update（更新主键）,write（插入）,key（读主键）或read（查询），默认为mixed</p><p>–auto-generate-sql-secondary-indexes=N<br>//给自动创建的表增加N个二级索引，默认为0</p><p>–auto-generate-sql-unique-query-number=N<br>//指定自动创建的表中不同查询的数量</p><p>–auto-generate-sql-unique-write-number=N<br>//指定自动创建的表中不同插入的数量</p><p>–auto-generate-sql-write-number=N<br>//自动创建的表中，对每个线程插入N行数据（默认N为100）</p><p>–commit=N<br>//每N条DML提交一次（即一次事务）</p><p>-C，–compress<br>//若server和client的协议都支持压缩，则压缩信息后传送</p><p>-c N,–concurrency-name<br>/模拟N个用户并发执行查询</p><p>–create=”字符串或.sql文件路径”<br>//指定用来创建表的字符串或 .sql文件</p><p>–create-schema=”数据库名”<br>指定测试用的数据库（mysql中的database就是schema）</p><p>-#，–debug<br>–debug-check<br>-T,–debug-info //输出CPU以及内存的相关信息<br>【遇到 [Error]mysqlslap：option ‘…’ used,but is disabled，暂时无法解决】</p><p>-F,–delimiter=name<br>此参数指定的值作为sql语句中使用的分隔符</p><p>–detach=N<br>每执行完N条请求，就断开重连一次</p><p>-e,–engine=name<br>指定测试表使用的存储引擎</p><p>-h,–host=name<br>连接指定host</p><p>-i,–iterations=N<br>指定测试迭代次数</p><p>-x,–number-char-cols=N<br>指定自动创建的表中含N个char类型的字段，默认值为1</p><p>-y,–number-int-cols=N<br>指定自动创建的表中含N个int类型的字段，默认值为1</p><p>–number-of-queries=N<br>生成N次总查询（平均每个用户查询次数=总查询次数/并发数）</p><p>–only-print<br>不实际执行，打印模拟执行的过程</p><p>-u,–user=name<br>连接server用的用户名</p><p>-p,–password[=name]<br>连接server用的密码，参数与值之间没有空格，如-p123</p><p>-P，–port=端口号<br>指定连接server的端口</p><p>–post（/pre）-query=name<br>指定测试完成后（/前）执行的含sql语句的字符串或.sql文件</p><p>–post（/pre）-system=name<br>指定测试完成后（/前）执行的系统语句</p><p>–protocol=name<br>指定用来连接的协议：tcp,socket,pipe,memory</p><p>-q “查询语句或包含查询语句的sql文件”,–query=”查询语句或包含查询语句的sql文件”<br>自定义要运行的查询语句</p><p>–defaults-file=”配置文件路径”<br>指定.cnf配置文件</p><p>【注意】<br>不用-a自动生成数据表或自定义指定，就会报1049 error；<br>命令行中，参数–number-of-queries=N（N为总查询次数）和–auto-generate-sql-execute-number=N（N为每个并发的查询次数）只能存在1个。</p><p><strong>常用参数</strong> </p><p>-a  若命令中没通过语句或文件提供SQL表和数据，则将自动创建SQL表和数据</p><h5 id="–concurrency：代表并发数量，多个用逗号隔开，concurrency-10-50-100-并发连接线程数分别是10、50、100个并发"><a href="#–concurrency：代表并发数量，多个用逗号隔开，concurrency-10-50-100-并发连接线程数分别是10、50、100个并发" class="headerlink" title="–concurrency：代表并发数量，多个用逗号隔开，concurrency=10,50,100, 并发连接线程数分别是10、50、100个并发"></a>–concurrency：代表并发数量，多个用逗号隔开，concurrency=10,50,100, 并发连接线程数分别是10、50、100个并发</h5><p>–engines：代表要测试的引擎，可以有多个，用分隔符隔开<br>–iterations：代表要运行这些测试多少次<br>–commit=N：执行N条DML后提交一次<br>–auto-generate-sql：代表用系统自己生成的SQL脚本来测试<br>–auto-generate-sql-load-type：代表要测试的是读还是写还是两者混合的（read,write,update,mixed）</p><h5 id="–number-of-queries：代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数-并发数来计算"><a href="#–number-of-queries：代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数-并发数来计算" class="headerlink" title="–number-of-queries：代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算"></a>–number-of-queries：代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算</h5><p>–debug-info：代表要额外输出CPU以及内存的相关信息<br>–number-int-cols ：创建测试表的 int 型字段数量<br>–auto-generate-sql-add-autoincrement ：代表对生成的表自动添加auto_increment列，从5.1.18版本开始<br>–number-char-cols：创建测试表的 char 型字段数量<br>–create-schema：测试的schema，MySQL中schema也就是database<br>–query：使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试<br>–only-print：如果只想打印看看SQL语句是什么，可以用这个选项</p><h2 id="四、测试执行：一些栗子"><a href="#四、测试执行：一些栗子" class="headerlink" title="四、测试执行：一些栗子"></a>四、测试执行：一些栗子</h2><p>1）指定数据库‘test’，自定义sql语句，模拟50个并发用户进行测试：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlslap -uroot -p000000 -c 50  <span class="attribute">--create-schema</span>=wzw -q <span class="string">"select * from wzwapp_user;"</span></span><br></pre></td></tr></table></figure><p>2) 自动设置默认查询语句</p><p><code>mysqlslap -uroot -p -a --concurrency=200 --number-of-queries=10000</code> </p><p>当我加大查询量的时候出现下面的错误 mysqlslap: Error when connecting to server: 1040 Too many connections</p><p><strong>参考</strong><a href="https://www.cnblogs.com/phpper/p/9570792.html" target="_blank" rel="noopener">https://www.cnblogs.com/phpper/p/9570792.html</a> </p><p> 解决步骤： 可能是如下两种情况 </p><p>一.查看系统最大限制# ulimit -n 系统的/etc/security/limits.conf 这里面的限制，把限制增大就可以了，前提不能超过系统的最大限制cat /proc/sys/fs/file-max</p><p> 二。mysql&gt; show variables like ‘%connections%’; 临时修改变量（重启mysql后失效，永久的话请修改my.cnf增加max_connections = 100000） mysql&gt; set global max_connections=100000; </p><h1 id="五，mysql优化技巧"><a href="#五，mysql优化技巧" class="headerlink" title="五，mysql优化技巧"></a>五，mysql优化技巧</h1><p>查看mysql存储引擎：show variables like ‘%storage_engine%’; </p><p>​        <a href="https://www.cnblogs.com/sharpest/p/10390035.html" target="_blank" rel="noopener">https://www.cnblogs.com/sharpest/p/10390035.html</a> </p><p>​        <a href="https://blog.csdn.net/skiwnc/article/details/87351038" target="_blank" rel="noopener">https://blog.csdn.net/skiwnc/article/details/87351038</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要进行压力测试？&quot;&gt;&lt;a href=&quot;#为什么要进行压力测试？&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行压力测试？&quot;&gt;&lt;/a&gt;为什么要进行压力测试？&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;PS：在运维工作中，压力测试是一项很重要的工作。比如在一个网站上线之前，能承受多大访问量、在大访问量情况下性能怎样，这些数据指标好坏将会直接影响用户体验。但是，在压力测试中存在一个共性，那就是压力测试的结果与实际负载结果不会完全相同，就算压力测试工作做的再好，也不能保证100%和线上性能指标相同。面对这些问题，我们只能尽量去想方设法去模拟。所以，压力测试非常有必要，有了这些数据，我们就能对自己做维护的平台做到心中有数。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="http://laxe.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-PlayBook</title>
    <link href="http://laxe.top/2019/12/10/Ansible-PlayBook/"/>
    <id>http://laxe.top/2019/12/10/Ansible-PlayBook/</id>
    <published>2019-12-10T08:28:11.421Z</published>
    <updated>2019-12-10T08:28:52.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h2><blockquote><p>在之前的<code>ansible</code>使用中，我们都是通过命令行的形式实现对应远程主机的响应管理</p><p>但这样的工作方式功能上来说还是有一定的局限性，并且维护并不方便，引入<code>playbook</code>可以更加方便我们对于功能的编写维护，并且具有良好的灵活性</p><p><code>playbook</code>也可以理解为命令行功能的一个合集脚本，用来编写更加复杂的业务</p></blockquote><a id="more"></a><h3 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h3><blockquote><p><code>Yaml</code>为通用数据串行化格式语法，简洁而强大</p><p><code>ansible</code>中的配置文件就采用了<code>Yaml</code>格式语法存在，以下就是对<code>Yaml</code>语法的介绍</p></blockquote><ul><li><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yaml</span></span><br></pre></td></tr></table></figure><p>基本语法规则如下</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进的空格数目不唯一，只要相同层级元素左侧对齐即可</li><li><code>#</code>号表示注释</li></ul></li><li><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yaml</span></span><br></pre></td></tr></table></figure><p>语法支持的数据结构有三种：</p><ul><li>键值对：相当于<code>hash</code>表映射关系，字典</li><li>序列：相当于数组或列表</li><li>纯量（标量）：单独的值，无法继续拆分，比如字符串、整数、浮点数、<code>Null</code>、布尔值（<code>true</code>、<code>false</code>）</li></ul></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>字符串定义时，默认可以不使用引号标注</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str_1: abc</span><br><span class="line">&#123;'str_1': 'abc',&#125; <span class="meta"># 对应Python中数据类型</span></span><br></pre></td></tr></table></figure><ul><li>如字符串中出现特殊字符或包含空格，需要使用引号标注</li></ul><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str_2: <span class="symbol">'abc</span>: bbb'</span><br><span class="line">&#123;<span class="symbol">'str_2'</span>: <span class="symbol">'abc</span>: bbb'&#125; # 对应<span class="type">Python</span>中数据类型</span><br></pre></td></tr></table></figure><ul><li>双引号不会对字符串中特殊字符进行转义</li></ul><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_3: <span class="symbol">'abc</span>: \n bbb'</span><br><span class="line">str_4: <span class="string">"abc: \n bbb"</span></span><br><span class="line">&#123;<span class="symbol">'abc</span>: \\n bbb', <span class="symbol">'str_4'</span>: <span class="symbol">'abc</span>: \n bbb'&#125; # 对应<span class="type">Python</span>中数据类型</span><br></pre></td></tr></table></figure><ul><li>单引号字符串还有引号，需要使用两个单引号进行转义</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str_5: 'a''b'</span><br><span class="line">&#123;'str_5': <span class="string">"a'b"</span>&#125; <span class="meta"># 对应Python中数据类型</span></span><br></pre></td></tr></table></figure><ul><li>当字符串需要换行时，从第二行开始的下面几行，需要有对齐缩进，换行会被解释为空格，其余缩进前空格会忽略</li></ul><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str_6: <span class="symbol">'abc</span></span><br><span class="line">    aaa</span><br><span class="line">    bbb</span><br><span class="line">    ccc'</span><br><span class="line">&#123;<span class="symbol">'str_6'</span>: <span class="symbol">'abc</span> aaa bbb ccc'&#125; # 对应<span class="type">Python</span>中数据类型</span><br></pre></td></tr></table></figure><ul><li>多行字符串可以使用 <code>|</code>保留换行符形成段落，或使用<code>&gt;</code>将换行符替换为空格</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str_7: &gt;</span><br><span class="line">  bbb</span><br><span class="line">  aaa</span><br><span class="line"></span><br><span class="line">str_8: <span class="string">|</span></span><br><span class="line">  bbb</span><br><span class="line">  aaa</span><br><span class="line">&#123;'str_7': 'bbb aaa\n', 'str_8': 'bbb\naaa\n'&#125; <span class="meta"># 对应Python中数据类型</span></span><br></pre></td></tr></table></figure><ul><li><code>+</code>表示保留字符串末位的换行，<code>-</code>表示删除字符串末位的换行</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str_9: <span class="string">|+</span></span><br><span class="line">  aaabbb</span><br><span class="line"></span><br><span class="line">str_10: <span class="string">|-</span></span><br><span class="line">  aaabbb</span><br><span class="line">'str_9': 'aaabbb\n', 'str_10': 'aaabbb'&#125; <span class="meta"># 对应Python中数据类型</span></span><br></pre></td></tr></table></figure><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><ul><li>Yaml中的键值对数据通过冒号定义，冒号后的数据与冒号之间存在一个空格</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict_1: <span class="keyword">a</span></span><br><span class="line">dict_2: &#123; <span class="number">1</span> : <span class="keyword">a</span> &#125;</span><br><span class="line">dict_3:</span><br><span class="line">  <span class="variable">a:</span> <span class="number">1</span></span><br><span class="line">  <span class="variable">b:</span> <span class="number">2</span></span><br><span class="line">&#123;<span class="string">'dict_1'</span>: <span class="string">'a'</span>, <span class="string">'dict_2'</span>: &#123;<span class="number">1</span>: <span class="string">'a'</span>&#125;, <span class="string">'dict_3'</span>: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;&#125; # 对应Python中数据类型</span><br></pre></td></tr></table></figure><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- list_1</span><br><span class="line">- list_2</span><br><span class="line">-</span><br><span class="line"> - a_1</span><br><span class="line"> - a_2</span><br><span class="line">[<span class="string">'list_1'</span>, <span class="string">'list_2'</span>, [<span class="string">'a_1'</span>, <span class="string">'a_2'</span>]] # 对应<span class="symbol">Python</span>中数据类型</span><br></pre></td></tr></table></figure><h4 id="数据嵌套使用"><a href="#数据嵌套使用" class="headerlink" title="数据嵌套使用"></a>数据嵌套使用</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- test_1:</span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">- test_2:</span><br><span class="line">    var_1: <span class="literal">true</span></span><br><span class="line">    var_2: <span class="number">0.2</span></span><br><span class="line">[&#123;<span class="string">'test_1'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>]&#125;, &#123;<span class="string">'test_2'</span>: &#123;<span class="string">'var_1'</span>: <span class="literal">True</span>, <span class="string">'var_2'</span>: <span class="number">0.2</span>&#125;&#125;] <span class="meta"># 对应Python中数据类型</span></span><br></pre></td></tr></table></figure><h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><ul><li><code>playbook</code>的编写使用<code>yaml</code>语法规则，先来看一下最简单的<code>playbook</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Yum Install Apache</span><br><span class="line">    yum: <span class="attribute">name</span>=httpd <span class="attribute">state</span>=installed</span><br><span class="line">    - name: Start Apache Server</span><br><span class="line">    service: <span class="attribute">name</span>=httpd <span class="attribute">state</span>=started</span><br></pre></td></tr></table></figure><blockquote><p>第一行：<code>---</code>指明<code>Ymal</code>将文件解释为正确的文档的要求，<code>Yaml</code>允许可以有多个文档同时出现在一个文件里，每个文档之间由<code>---</code>进行分割，目前我们的<code>playbook</code>中只需要有一个文档即可</p><p>第二行：<code>hosts</code>指明当前<code>playbook</code>将要操作的目标主机有哪些，这里我们选择全部</p><p>第三行：<code>remote_user</code>指明当前操作所使用的远程主机用户</p><p>第四行：<code>tasks</code>为任务列表，<code>playbook</code>将按照从上到下的定义顺序执行其中的模块对应的操作，<code>name</code>属性为一个字符串用以标示当前任务的介绍，第一个任务将使用<code>yum</code>模块安装<code>apache</code>服务，第二个任务使用<code>ansible</code>模块<code>service</code>，使<code>httpd</code>服务启动</p></blockquote><ul><li>执行<code>playbook</code>使用<code>ansible-playbook</code></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook <span class="regexp">/etc/</span>ansible<span class="regexp">/playbook.yml</span></span><br></pre></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><blockquote><p>当遇到较为复杂的情况时，单独的<code>playbook</code>可能无法应对业务需求，那么可能需要编写多个<code>playbook</code></p><p>这时，如果在<code>playbook</code>中的<code>handlers</code>或<code>tasks</code>可能在多个<code>playbook</code>中重复使用，就可以通过<code>ansible</code>所提供的<code>include</code>功能，将复用的部分单独写成一个文件，在需要的地方<code>include</code>包含进来即可</p></blockquote><ul><li>比如有这样的一个功能是需要多次复用的，这个文件叫做<code>tasks.yaml</code></li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---  </span><br><span class="line">- name: Yum Install Nginx</span><br><span class="line">  yum: name=nginx <span class="keyword">state</span>=installed</span><br></pre></td></tr></table></figure><ul><li>那么在一个主要<code>playbook</code>文件中可以这样引入</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">   - include:</span> <span class="string">tasks.yml</span></span><br></pre></td></tr></table></figure><ul><li>执行该<code>playbook</code></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook <span class="regexp">/etc/</span>ansible<span class="regexp">/playbook.yml</span></span><br></pre></td></tr></table></figure><ul><li><code>include</code>包含的其他<code>playbook</code>支持模板变量，可以通过定义<code>vars</code>变量覆盖，或者像这样</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Yum</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">server_name</span> <span class="string">&#125;&#125;</span> <span class="string">state=installed</span></span><br></pre></td></tr></table></figure><ul><li><code>playbook</code>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr"> tasks:</span></span><br><span class="line"><span class="attr">   - include:</span> <span class="string">tasks.yml</span> <span class="string">server_name=nginx</span></span><br></pre></td></tr></table></figure><ul><li>此外在<code>1.4</code>及以上版本中，还支持字典、列表形式的参数传递</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Yum</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">server_name</span> <span class="string">&#125;&#125;</span> <span class="string">state=installed</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&#123;</span> <span class="attr">include:</span> <span class="string">tasks.yml,</span> <span class="attr">server_name:</span> <span class="string">nginx</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><blockquote><p>除去通过<code>include</code>功能将不同的任务分别写入不同的文件，然后按需<code>include</code>包含进来，在<code>ansible</code>中还有一种标准规范叫做<code>role</code>角色</p><p>通过不同级别的层级目录和文件来对变量、任务、配置模板等进行拆分管理，提高扩展性和可维护性</p></blockquote><ul><li>一般来说，一个<code>role</code>角色定义目录结构如下</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">role_name/<span class="comment"># 角色名目录，playbook调用时需要</span></span><br><span class="line"><span class="built_in">file</span>/<span class="comment"># 存放copy或script等模块调用文件</span></span><br><span class="line">tasks/<span class="comment"># 存放各种task任务，需要包含一个main.yml</span></span><br><span class="line">handlers/<span class="comment"># 存放各种handlers任务，需要包含一个main.yml</span></span><br><span class="line">vars/<span class="comment"># 存放定义好的变量，需要包含一个main.yml</span></span><br><span class="line">templates/<span class="comment"># 存放需要使用到的配置模板</span></span><br><span class="line">meta/<span class="comment"># 当前角色的特殊设定及其依赖，需要包含一个main.yml</span></span><br></pre></td></tr></table></figure><ul><li>角色目录存放的路径可以在<code>ansible</code>的配置文件中定义</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/ansible/ansible.cfg</span></span><br><span class="line"><span class="attr">roles_path</span> = /etc/ansible/roles</span><br></pre></td></tr></table></figure><ul><li>示例目录结构</li></ul><p><a href="https://lienze.tech/blog/images/1562121857022.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1562121857022.png" alt="1562121857022"></a></p><ul><li>任务<code>tasks</code>目录下<code>main</code>文件内容</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tasks/main.yml</span></span><br><span class="line">- name: Install Apache Server</span><br><span class="line">  yum: <span class="attribute">name</span>=httpd <span class="attribute">state</span>=installed</span><br><span class="line">- name: Write Apache Config</span><br><span class="line">  template: <span class="attribute">src</span>=httpd.j2 <span class="attribute">dest</span>=/etc/httpd/conf/httpd.conf</span><br><span class="line">  notify: Restart Apache Server</span><br></pre></td></tr></table></figure><ul><li><code>handlers</code>目录下<code>main</code>文件内容</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handlers/main.yml</span></span><br><span class="line">- name: Restart Apache Server</span><br><span class="line">  service: <span class="attribute">name</span>=httpd <span class="attribute">state</span>=restarted</span><br></pre></td></tr></table></figure><ul><li><code>templates</code>下配置模板</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># templates/httpd.j2</span></span><br><span class="line"><span class="meta">#上面内容太多省略，只保留模板变量部分</span></span><br><span class="line">Listen &#123;&#123; listen_port &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>变量<code>vars</code>目录下<code>main</code>文件</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># vars/main.yml</span></span><br><span class="line"><span class="symbol">listen_port:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><ul><li>调用<code>role</code>的<code>playbook</code>文件内容</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  roles:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">apache</span></span><br></pre></td></tr></table></figure><ul><li>在执行角色<code>role</code>此处为<code>apache</code>任务时，会将文件夹下的<code>main.yml</code>文件自动导入合并，执行结果如下</li></ul><p><a href="https://lienze.tech/blog/images/1562122149050.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1562122149050.png" alt="1562122149050"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ansible-playbook&quot;&gt;&lt;a href=&quot;#ansible-playbook&quot; class=&quot;headerlink&quot; title=&quot;ansible-playbook&quot;&gt;&lt;/a&gt;ansible-playbook&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在之前的&lt;code&gt;ansible&lt;/code&gt;使用中，我们都是通过命令行的形式实现对应远程主机的响应管理&lt;/p&gt;
&lt;p&gt;但这样的工作方式功能上来说还是有一定的局限性，并且维护并不方便，引入&lt;code&gt;playbook&lt;/code&gt;可以更加方便我们对于功能的编写维护，并且具有良好的灵活性&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playbook&lt;/code&gt;也可以理解为命令行功能的一个合集脚本，用来编写更加复杂的业务&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://laxe.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ansible</title>
    <link href="http://laxe.top/2019/11/28/Ansible/"/>
    <id>http://laxe.top/2019/11/28/Ansible/</id>
    <published>2019-11-28T07:37:10.939Z</published>
    <updated>2019-11-28T07:38:11.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><blockquote><p><code>ansible</code>基于Python开发，集合了众多运维工具（<code>puppet</code>、<code>cfengine</code>、<code>chef</code>、<code>func</code>、<code>fabric</code>）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能</p><p>在使用时，<code>ansible</code>不需要在被控端安装客户端，<code>ansible</code>工作基于<code>ssh</code>，只要被控端服务器有<code>ssh</code>服务，加上一个<code>Python</code>环境，就可以使用<code>ansible</code></p><p>另外，<code>ansible</code>在15年的时候，以<code>1.5</code>亿美元被<code>RedHat</code>公司收购，新版的<code>RedHat</code>操作系统内置<code>ansible</code>软件，很厉害的</p></blockquote><a id="more"></a><h3 id="Ansible部署"><a href="#Ansible部署" class="headerlink" title="Ansible部署"></a>Ansible部署</h3><blockquote><p><code>ansible</code>安装可以通过源码，<code>yum</code>源以及<code>python</code>所提供的<code>pip</code>管理工具进行安装</p></blockquote><ul><li>使用<code>pip</code>管理工具进行安装</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> ansible</span><br></pre></td></tr></table></figure><ul><li>使用<code>yum</code>进行安装</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span> <span class="comment"># 安装扩展源</span></span><br><span class="line">yum <span class="keyword">install</span> ansible</span><br></pre></td></tr></table></figure><h3 id="Ansible配置"><a href="#Ansible配置" class="headerlink" title="Ansible配置"></a>Ansible配置</h3><blockquote><p>安装之后，默认<code>ansible</code>工具的配置文件在<code>/etc/ansible</code>下</p><p>如果通过<code>pip</code>命令安装，是没有这个目录的，需要我们手动创建，其中所需主要配置文件如下</p></blockquote><ul><li><code>ansible.cfg</code>：<code>ansible</code>主配置文件</li><li><code>hosts</code>：被管理主机<code>IP</code>或者主机名列表文件，也是比较重要的一个文件</li><li><code>roles</code>：角色或插件目录（默认为空）</li></ul><blockquote><p>此外除了默认的<code>ansible</code>的配置文件路径，关于<code>ansible</code>的配置文件路径选择还有如下几种，按照顺序表示优先级</p></blockquote><ul><li><code>export ANSIBLE_CONFI</code>：指定的全局变量</li><li><code>./ansible.cfg</code>：当前目录下的配置文件</li><li><code>~/.ansible.cfg</code>：当前用户目录下的配置文件</li><li><code>/etc/ansible/ansible.cfg</code>：<code>etc</code>目录下的配置文件</li></ul><blockquote><p>如果以上四个路径下均没有<code>cfg</code>配置文件，则使用默认配置</p><p>如果通过源进行安装，那么在<code>/etc/ansible/</code>目录下会自动包含<code>ansible.cfg</code>文件</p><p>也可以通过访问在线的配置文件地址进行获取</p></blockquote><blockquote><p><a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg" target="_blank" rel="noopener">https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg</a></p></blockquote><ul><li><code>ansible</code>配置文件中可以进行<code>ansible</code>的各项参数的设置，包括并发线程数量、用户、模块路径、调优等等<ul><li><code>defaluts</code>：默认的配置项，一般不需要修改</li><li><code>privilege_escalation</code>：执行命令的用户权限设置</li><li><code>paramiko_connection</code>：<code>paramiko</code>插件设置</li><li><code>ssh_connection</code>：<code>ssh</code>连接设置</li></ul></li><li>默认<code>ansible</code>使用<code>hosts</code>文件列举监控主机，格式为<code>ini</code>，可以进行<code>IP</code>的分组以及<code>IP</code>规则设置，比如如下的例子</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[webserver]</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span><span class="selector-pseudo">:22</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ansible</code>支持很多模块来进行对被控主机的管理，包括：<code>command</code>、<code>shell</code>、<code>script</code>、<code>yum</code>、<code>copy</code>、<code>File</code>、<code>async</code>、<code>docker</code>、<code>cron</code>、<code>mysql_user</code>、<code>ping</code>、<code>sysctl</code>、<code>user</code>、<code>acl</code>、<code>add_host</code>、<code>easy_install</code>、<code>haproxy</code>等。默认在执行命令时，使用模块为<code>command</code>，接下里会进行介绍</p></blockquote><h3 id="Ansible使用参数"><a href="#Ansible使用参数" class="headerlink" title="Ansible使用参数"></a>Ansible使用参数</h3><blockquote><p><code>ansible</code>在工作时，需要使用我们安装好的<code>ansible</code>来执行命令</p><p>经常在使用<code>ansible</code>模块进行工作时，可能还需要额外提供一些参数来辅助工作，下面是常用参数</p></blockquote><table><thead><tr><th align="left">命令参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-v</code></td><td align="left">打印详细信息</td></tr><tr><td align="left"><code>-m</code></td><td align="left">指定使用的模块，默认为<code>command</code>模块</td></tr><tr><td align="left"><code>-k</code></td><td align="left">要求输入远程主机密码</td></tr><tr><td align="left"><code>-a</code></td><td align="left">将参数或命令传入模块</td></tr><tr><td align="left"><code>-C</code></td><td align="left">测试执行过程，但不真正执行</td></tr><tr><td align="left"><code>-sudo</code></td><td align="left">基于<code>sudo</code>用户执行</td></tr><tr><td align="left"><code>--list-hosts</code></td><td align="left">列举命令生效的主机</td></tr><tr><td align="left"><code>-l</code></td><td align="left">限制匹配规则的主机数</td></tr><tr><td align="left"><code>-i</code></td><td align="left">指定<code>hosts</code>文件路径</td></tr><tr><td align="left"><code>-u</code></td><td align="left"><code>SSH</code>连接所使用用户</td></tr></tbody></table><blockquote><p>现在看到这些命令参数你可能有一些蒙蔽，不过不要着急，结合模块使用，你将很快了解这些参数的实际意义</p></blockquote><h3 id="配置免密登陆"><a href="#配置免密登陆" class="headerlink" title="配置免密登陆"></a>配置免密登陆</h3><blockquote><p>由于<code>ansible</code>是通过<code>ssh</code>服务进行命令下达执行，那避免不了用户认证</p><p>但是在批量执行时，多次的重复认证会导致我们的效率及其低下，这里可以通过配置主控端与被控端主机之间<code>SSH</code>免密登陆来实现用户认证的跳过，可谓是一次配置，轻松很久呐</p></blockquote><ul><li>在主控服务器<code>192.168.1.104</code>下生成秘钥</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa </span><br><span class="line">#-<span class="built_in">t</span>指定加密的方式，默认为rsa</span><br></pre></td></tr></table></figure><ul><li>进行秘钥的分发</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub <span class="symbol">root@</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span></span><br></pre></td></tr></table></figure><ul><li>输入对应远程主机的<code>ssh</code>账号密码之后，接下来在主控服务器就可以不进行<code>SSH</code>的用户认证也可以访问到被控端，这里测试主机为<code>192.168.1.104</code>（主控），<code>192.168.1.101</code>（被控）</li></ul><h3 id="定义主机及组规则"><a href="#定义主机及组规则" class="headerlink" title="定义主机及组规则"></a>定义主机及组规则</h3><blockquote><p><code>ansible</code>通过定义好的主机与组规则(<code>Inventory</code>)在执行命令时通过匹配进行远程操作</p><p>这个文件默认就是我们上面所说的<code>/etc/ansible/hosts</code>文件，其中定义的几种方式如下</p></blockquote><ul><li>直接将<code>IP</code>写入</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span></span><br></pre></td></tr></table></figure><ul><li>规则分组</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[webserver]</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span><span class="selector-pseudo">:2333</span></span><br><span class="line"><span class="selector-tag">www</span><span class="selector-class">.example</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在规则的<code>IP</code>后指定端口</p></blockquote><ul><li>规则命名</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myhost ansible_ssh_host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span></span><br><span class="line">[webservers]</span><br><span class="line">myhost</span><br></pre></td></tr></table></figure><blockquote><p>在使用时，直接利用<code>myhost</code>即可</p><p>除去示例中的指定方式，还有如下一些参数可以利用</p></blockquote><ul><li><code>ansible_ssh_host</code>：目标主机地址</li><li><code>ansible_ssh_port</code>：目标主机<code>ssh</code>服务端口</li><li><code>ansible_ssh_user</code>：目标主机<code>ssh</code>登录用户</li><li><code>ansible_ssh_pass</code>：目标主机<code>ssh</code>登录密码</li><li><code>ansible_connection</code>：连接类型：<code>local</code>、<code>ssh</code>、<code>paramiko</code></li><li><code>ansible_ssh_priveate_key_file</code>：连接所需<code>ssh</code>私钥文件；</li><li><code>ansible_shell_type</code>：目标主机的shell类型：<code>ash</code>、<strong>bash</strong>（默认使用的<code>shell</code>，可以结合<code>help</code>查看帮助文档）、<code>ksh</code>（支持42个内部命令）、<code>csh</code>、<code>zsh</code>（最庞大的shell，支持84个内部命令）</li><li>正则规则</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[webservers]</span></span><br><span class="line"><span class="selector-attr">[a:z]</span><span class="selector-tag">bc</span><span class="selector-class">.example</span><span class="selector-class">.com</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.10</span><span class="selector-attr">[1:5]</span></span><br></pre></td></tr></table></figure><blockquote><p>在主机处填写对应的正则规则，可以更加方便的映射某个网段下的<code>ip</code>地址</p></blockquote><h3 id="Ping模块"><a href="#Ping模块" class="headerlink" title="Ping模块"></a>Ping模块</h3><blockquote><p>ping模块可以判断被控主机是否在线， 返回值为changed和ping</p><p>首先在<code>/etc/ansible/hosts</code>文件下添加被控主机，并建立分组为<strong>webservers</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[webservers]</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.101</span><span class="selector-pseudo">:22</span></span><br></pre></td></tr></table></figure><ul><li><code>ping</code>命令的用法，要进入到<code>python</code>安装目录下，找到对应的<code>ansible</code>可执行文件</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible <span class="keyword">all</span> -m ping</span><br></pre></td></tr></table></figure><blockquote><p>返回值<code>ping</code>如果为<code>pong</code>则代表可以<code>ping</code>通</p><p><code>ansible</code>命令行第二个参数可以是一个主机的正则规则，<code>all</code>代表所有<code>hosts</code>文件下<code>IP</code>，也可以指定使用某个分组</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible webservers -m <span class="built_in">ping</span></span><br></pre></td></tr></table></figure><h3 id="Command模块"><a href="#Command模块" class="headerlink" title="Command模块"></a>Command模块</h3><blockquote><p>通过<code>ansible</code>执行命令时，默认使用<code>command</code>模块，该模块主要用于执行<code>linux</code>基础命令</p></blockquote><ul><li>注意：对比之后的<code>Shell</code>及<code>Script</code>功能模块，<code>Command</code>模块不支持管道</li><li><code>command</code>支持的额外参数</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./ansible-doc</span> -s <span class="keyword">command</span></span><br><span class="line"><span class="comment"># 文档</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>chdir</code></td><td align="left">执行命令时，先进入到该目录下</td></tr><tr><td align="left"><code>creates</code></td><td align="left">给定文件存在时，不执行该命令</td></tr><tr><td align="left"><code>free_form</code></td><td align="left">需要执行的脚本</td></tr><tr><td align="left"><code>removes</code></td><td align="left">给定文件存在，则执行该命令</td></tr></tbody></table><ul><li>对远程主机执行命令</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./ansible</span> webservers -m <span class="keyword">command</span> -a <span class="string">"ifconfig"</span></span><br></pre></td></tr></table></figure><ul><li>执行命令时更改工作目录</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./ansible</span> webservers -m <span class="keyword">command</span> -a <span class="string">"ls chdir=/home/"</span></span><br></pre></td></tr></table></figure><h3 id="Shell模块"><a href="#Shell模块" class="headerlink" title="Shell模块"></a>Shell模块</h3><blockquote><p><code>shell</code>使用远程主机下的<code>/bin/sh</code>进行命令执行，支持比<code>command</code>模块更多的命令，常用参数如下</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ansible-doc -s <span class="keyword">shell</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 文档</span></span></span><br></pre></td></tr></table></figure><ul><li>额外参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>chdir</code></td><td align="left">执行命令时，先进入到该目录下</td></tr><tr><td align="left"><code>creates</code></td><td align="left">给定文件存在时，不执行该命令</td></tr><tr><td align="left"><code>free_form</code></td><td align="left">需要执行的脚本</td></tr><tr><td align="left"><code>removes</code></td><td align="left">给定文件存在，则执行该命令</td></tr><tr><td align="left"><code>executable</code></td><td align="left">更换执行命令所使用的<code>shell</code>环境</td></tr></tbody></table><ul><li>远程主机编写<code>sh</code>脚本，向屏幕输出<code>hello</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><ul><li>执行远程主机的<code>shell</code>脚本</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible webservers -m <span class="keyword">shell</span><span class="bash"> -a <span class="string">"sh ~/test.sh"</span></span></span><br></pre></td></tr></table></figure><h3 id="Script模块"><a href="#Script模块" class="headerlink" title="Script模块"></a>Script模块</h3><blockquote><p>该模块可以方便运行当前管理机上的脚本直接到远程被控端，而不需要先将脚本拷贝到远程主机后在执行</p></blockquote><ul><li>在主控制<code>home</code>目录下创建<code>sh</code>脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"this is Control"</span></span><br></pre></td></tr></table></figure><ul><li>将这个<code>sh</code>脚本通过<code>script</code>模块执行到远程被控端</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible webservers -m<span class="built_in"> script </span>-a <span class="string">"/root/test.sh"</span></span><br></pre></td></tr></table></figure><h3 id="Copy模块"><a href="#Copy模块" class="headerlink" title="Copy模块"></a>Copy模块</h3><blockquote><p><code>copy</code>模块可以方便的将当前主机下文件拷贝到远程主机，类似<code>scp</code>命令等</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ansible-doc -s <span class="keyword">copy</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 文档地址</span></span></span><br></pre></td></tr></table></figure><ul><li>支持的参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>src</code></td><td align="left">将本地路径复制到远程服务器; 可以是绝对路径或相对的。如果是一个目录，它将被递归地复制。如果路径以/结尾，则只有该目录下内容被复制到目的地，如果没有使用/来结尾，则包含目录在内的整个内容全部复制</td></tr><tr><td align="left"><code>content</code></td><td align="left">当用<code>content</code>代替<code>src</code>参数的时候，可以把文档的内容设置到特定的值</td></tr><tr><td align="left"><code>dest</code></td><td align="left">目标绝对路径。如果<code>src</code>是一个目录，<code>dest</code>也必须是一个目录。如果<code>dest</code>是不存在的路径，并且如果<code>dest</code>以/结尾或者<code>src</code>是目录，则<code>dest</code>被创建。如果<code>src</code>和<code>dest</code>是文件，如果<code>dest</code>的父目录不存在，任务将失败</td></tr><tr><td align="left"><code>backup</code></td><td align="left">如果文件修改，则在覆盖之前将原文件备份，备份文件包含时间信息</td></tr><tr><td align="left"><code>directory_mode</code></td><td align="left">设定目录的权限，在新建时使用，不会影响已存在的目录</td></tr><tr><td align="left"><code>force</code></td><td align="left">当目标内容不同于源时，将替换远程文件。设置为<code>no</code>时，只有在目标文件不存在的情况下才会传输文件</td></tr><tr><td align="left"><code>group</code></td><td align="left">设置文件/目录的所属组</td></tr><tr><td align="left"><code>mode</code></td><td align="left">设置文件权限</td></tr><tr><td align="left"><code>owner</code></td><td align="left">设置文件/目录的所属用户</td></tr></tbody></table><h4 id="Copy前备份"><a href="#Copy前备份" class="headerlink" title="Copy前备份"></a>Copy前备份</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible all -m <span class="keyword">copy</span><span class="bash"> -a <span class="string">"src=/root/ansible_copy_file backup=yes dest=/home/"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在第一次拷贝时，由于目标主机还并没有这个文件， 备份动作不生效</p><p>在对文件内容进行修改后重新执行该命令拷贝文件</p><p>此时目标主机下，不光会有我们上传的拷贝文件，还有之前文件的一个备份</p></blockquote><h4 id="覆盖内容"><a href="#覆盖内容" class="headerlink" title="覆盖内容"></a>覆盖内容</h4><blockquote><p>直接通过<code>content</code>参数指定内容，并对目标主机上已存在的<code>test_copy</code>文件进行覆盖</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible all -m <span class="keyword">copy</span><span class="bash"> -a <span class="string">"content='这是命令修改\n'  dest=/home/test_copy"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这条命令将会把远程主机<code>home</code>目录下的<code>test_copy</code>文件覆盖为我们的<code>content</code>内容</p></blockquote><h3 id="Stat模块"><a href="#Stat模块" class="headerlink" title="Stat模块"></a>Stat模块</h3><blockquote><p>该模块可以获取远程主机下的文件信息，需要使用<code>path</code>参数指明文件路径</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible all -m stat -<span class="selector-tag">a</span> <span class="string">"path=/home/test_copy"</span></span><br></pre></td></tr></table></figure><h3 id="Yum模块"><a href="#Yum模块" class="headerlink" title="Yum模块"></a>Yum模块</h3><blockquote><p>该模块可以对远程主机上的软件安装、卸载进行管理</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ansible-doc -s <span class="keyword">copy</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 文档</span></span></span><br></pre></td></tr></table></figure><ul><li>支持参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">必须参数，用于指定需要管理的软件包，比如<code>nginx</code></td></tr><tr><td align="left">state</td><td align="left">用于指定软件包的状态，默认值为<code>present</code>，表示确保软件包已经安装 除了<code>present</code>，其他可用值有<code>installed</code>、<code>latest</code>、<code>absent</code>、<code>removed</code> 其中<code>installed</code>与<code>present</code>等效，<code>latest</code>表示安装<code>yum</code>中最新的版本，<code>absent</code>和<code>removed</code>等效，表示删除对应的软件包</td></tr></tbody></table><ul><li>在远程主机下安装<code>nginx</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible all -m yum -<span class="selector-tag">a</span> <span class="string">"name=nginx state=installed"</span></span><br></pre></td></tr></table></figure><ul><li>查看<code>nginx</code>服务状态</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl status nginx</span></span><br></pre></td></tr></table></figure><h3 id="Service模块"><a href="#Service模块" class="headerlink" title="Service模块"></a>Service模块</h3><blockquote><p>该模块主要用于远程服务器上对应的服务管理，比如开启或关闭<code>apache</code>服务等</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./ansible-doc</span> -s yum</span><br><span class="line"><span class="comment"># 文档</span></span><br></pre></td></tr></table></figure><ul><li>支持参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>name</code></td><td align="left">需要管理的服务名称，如<code>nginx</code></td></tr><tr><td align="left"><code>state</code></td><td align="left">此参数用于指定服务的状态 比如，我们想要启动远程主机中的<code>nginx</code>，则可以将<code>state</code>的值设置为<code>started</code> 如果想要停止远程主机中的服务，则可以将<code>state</code>的值设置为<code>stopped</code> 此参数的可用值有<code>started</code>、<code>stopped</code>、<code>restarted</code>、<code>reloaded</code></td></tr><tr><td align="left"><code>enabled</code></td><td align="left">此参数用于指定是否将服务设置为开机启动项，设置为<code>yes</code>表示将对应服务设置为开机启动，设置为<code>no</code>表示不会开机启动</td></tr></tbody></table><ul><li>将远程主机下的<code>httpd</code>服务开启</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ansible all -m<span class="built_in"> service </span>-a <span class="string">"name=httpd state=started"</span></span><br></pre></td></tr></table></figure><h3 id="File模块"><a href="#File模块" class="headerlink" title="File模块"></a>File模块</h3><blockquote><p><code>file</code>模块可以帮助我们完成一些对文件的基本操作</p><p>比如，<strong>创建文件</strong>或<strong>目录</strong>、<strong>删除文件</strong>或<strong>目录</strong>、<strong>修改文件权限</strong>等</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./ansible-doc</span> -s yum</span><br><span class="line"><span class="comment"># 文档</span></span><br></pre></td></tr></table></figure><ul><li>支持参数</li></ul><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>path</code></td><td align="left">指明需要操作的文件或目录路径</td></tr><tr><td align="left"><code>state</code></td><td align="left">此参数非常灵活，其对应的值需要根据情况设定。比如，我们想要在远程主机上创建<code>/testdir/a/b</code>目录，那么则需要设置<code>path=/testdir/a/b</code>，但是，我们无法从<code>/testdir/a/b</code>这个路径看出<code>b</code>是一个文件还是一个目录，<code>ansible</code>也同样无法单单从一个字符串就知道你要创建文件还是目录，所以，我们需要通过<code>state</code>参数进行说明 当我们想要创建的<code>/testdir/a/b</code>是一个目录时，需要将<code>state</code>的值设置为<code>directory</code>，<code>directory</code>为目录之意，当它与<code>path</code>结合，<code>ansible</code>就能知道我们要操作的目标是一个目录 当我们想要操作的<code>/testdir/a/b</code>是一个文件时，则需要将<code>state</code>的值设置为<code>touch</code> 当我们想要创建软链接文件时，需将<code>state</code>设置为<code>link</code>；想要创建硬链接文件时，需要将<code>state</code>设置为<code>hard</code> 当我们想要删除一个文件时（删除时不用区分目标是文件、目录、还是链接），则需要将<code>state</code>的值设置为<code>absent</code>，<code>absent</code>为缺席之意，当我们想让操作的目标”缺席”时，就表示我们想要删除目标</td></tr><tr><td align="left"><code>src</code></td><td align="left"><code>src</code>参数：当<code>state</code>设置为<code>link</code>或者<code>hard</code>时，表示我们想要创建一个软链或者硬链 所以，我们必须指明软链或硬链链接的哪个文件，通过<code>src</code>参数即可指定链接源</td></tr><tr><td align="left"><code>force</code></td><td align="left">当<code>state=link</code>的时候，可配合此参数强制创建链接文件，当<code>force=yes</code>时，表示强制创建链接文件。不过强制创建链接文件分为三种情况 情况一：当要创建的链接文件指向的源文件并不存在时，使用此参数，可以先强制创建出链接文件 情况二：当要创建链接文件的目录中已经存在与链接文件同名的文件时，将<code>force</code>设置为<code>yes</code>，会将同名文件覆盖为链接文件，相当于删除同名文件，创建链接文件 情况三：当要创建链接文件的目录中已经存在与链接文件同名的文件，并且链接文件指向的源文件也不存在，这时会强制替换同名文件为链接文件</td></tr><tr><td align="left"><code>owner</code></td><td align="left">指定文件所属用户</td></tr><tr><td align="left"><code>group</code></td><td align="left">指定文件所属组</td></tr><tr><td align="left"><code>mode</code></td><td align="left">指定文件权限</td></tr></tbody></table><ul><li>将远程主机下的<code>Python3</code>创建软连接到<code>home</code>目录</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/ansible all -m file -a "path=/</span>home<span class="regexp">/python3 state=link src=/u</span>sr<span class="regexp">/local/</span>python3<span class="regexp">/bin/</span>python3<span class="string">"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ansible&quot;&gt;&lt;a href=&quot;#Ansible&quot; class=&quot;headerlink&quot; title=&quot;Ansible&quot;&gt;&lt;/a&gt;Ansible&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ansible&lt;/code&gt;基于Python开发，集合了众多运维工具（&lt;code&gt;puppet&lt;/code&gt;、&lt;code&gt;cfengine&lt;/code&gt;、&lt;code&gt;chef&lt;/code&gt;、&lt;code&gt;func&lt;/code&gt;、&lt;code&gt;fabric&lt;/code&gt;）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能&lt;/p&gt;
&lt;p&gt;在使用时，&lt;code&gt;ansible&lt;/code&gt;不需要在被控端安装客户端，&lt;code&gt;ansible&lt;/code&gt;工作基于&lt;code&gt;ssh&lt;/code&gt;，只要被控端服务器有&lt;code&gt;ssh&lt;/code&gt;服务，加上一个&lt;code&gt;Python&lt;/code&gt;环境，就可以使用&lt;code&gt;ansible&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;ansible&lt;/code&gt;在15年的时候，以&lt;code&gt;1.5&lt;/code&gt;亿美元被&lt;code&gt;RedHat&lt;/code&gt;公司收购，新版的&lt;code&gt;RedHat&lt;/code&gt;操作系统内置&lt;code&gt;ansible&lt;/code&gt;软件，很厉害的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://laxe.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis常见数据类型及其操作指令</title>
    <link href="http://laxe.top/2019/10/21/Redis%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <id>http://laxe.top/2019/10/21/Redis常见数据类型及其操作指令/</id>
    <published>2019-10-21T03:37:03.489Z</published>
    <updated>2019-12-26T00:33:34.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><blockquote><p><code>Redis</code>可以存储<strong>键</strong>体与五种不同数据结构类型类型之间的映射</p><p>分别为<code>STRING</code>字符串、<code>LIST</code>列表、<code>SET</code>集合、<code>HASH</code>散列和<code>ZSET</code>有序集合</p></blockquote><ul><li><code>Redis</code>客户端</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><ul><li>如需支持中文展示，可以使用参数</li></ul><a id="more"></a><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli <span class="comment">--raw</span></span><br></pre></td></tr></table></figure><h3 id="字符串（STRING）"><a href="#字符串（STRING）" class="headerlink" title="字符串（STRING）"></a>字符串（STRING）</h3><blockquote><p><code>redis</code>中的字符串与很多语言中的字符串非常相似</p><p>字符串可以存储：字节串<code>byte string</code>、整数、浮点数</p></blockquote><ul><li>常见指令</li></ul><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">获取存储在给定键中的值</td></tr><tr><td align="left">SET</td><td align="left">设置存储在给定键中的值</td></tr><tr><td align="left">DEL</td><td align="left">删除存储在给定键中的值</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name 张三</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line">张三</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; del name</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="列表（LIST）"><a href="#列表（LIST）" class="headerlink" title="列表（LIST）"></a>列表（LIST）</h3><blockquote><p>一个列表结构可以有序的存储多个字符串</p></blockquote><ul><li>常见指令、</li></ul><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">LPUSH/RPUSH</td><td align="left">将给定的值推入列表的左/右端</td></tr><tr><td align="left">LPOP/RPOP</td><td align="left">从列表的左/右端弹出一个值并返回</td></tr><tr><td align="left">LRANGE</td><td align="left">获取列表在给定范围内的值</td></tr><tr><td align="left">LINDEX</td><td align="left">获取列表在某个给定位置上的值</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush l a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush l b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; rpush l c</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange l <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><blockquote><p><code>rpush</code>，是从列表的右侧推入数据，类似<strong>栈</strong>，后进入的数据在列表的头部</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 c</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange l1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure><blockquote><p><code>lpush</code>，是从列表的左侧推入数据，类似<strong>队列</strong>，先进的在头部</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush l1 c</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange l1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lindex l1 <span class="number">2</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure><h3 id="集合（SET）"><a href="#集合（SET）" class="headerlink" title="集合（SET）"></a>集合（SET）</h3><blockquote><p><code>Redis</code>的集合和列表都可以存储多个字符串，但是不同在于列表可以存储多个相同的值，而集合中的数据元素是唯一的，这是由于集合通过散列表来进行维护（这些散列表只有键<code>Key</code>，没有与之相关的值<code>Value</code>）</p><p>此外，<code>redis</code>中的结合是无序的，所以不能像列表一样的数据可以在某一端推入数据</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SADD</td><td align="left">将给定的元素添加到集合</td></tr><tr><td align="left">SMEMBERS</td><td align="left">返回集合中包含的所有元素</td></tr><tr><td align="left">SISMEMBER</td><td align="left">检查某元素是否包含在集合中</td></tr><tr><td align="left">SREM</td><td align="left">如果元素存在与集合，那么移出该元素</td></tr></tbody></table><blockquote><p><strong>注意：</strong>如果集合中包含的元素太多，那么<code>SMEMBERS</code>指令的处理可能会非常慢，慎用</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember s <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sismember s a</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s a</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，命令的执行如果成功，那么将会返回对应操作生效的个数，比如：<code>1</code>，反之则返回<code>0</code></p></blockquote><h3 id="散列（HASH）"><a href="#散列（HASH）" class="headerlink" title="散列（HASH）"></a>散列（HASH）</h3><blockquote><p>散列可以存储多个键值对映射；散列存储的值可以是字符串、也可以是数字值</p><p>美妙的是，散列可以支持用户对其中存储的数字值进行自增或自减的操作</p><p>人们经常这样形容散列：这就像一个微缩版的<code>Key-Value</code>数据库，一个微缩版的<code>Redis</code></p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">HSET</td><td align="left">在散列里面添加给定的键值对</td></tr><tr><td align="left">HGET</td><td align="left">获取指定兼职对的值</td></tr><tr><td align="left">HGETALL</td><td align="left">获取散列包含的所有键值对</td></tr><tr><td align="left">HDEL</td><td align="left">如果给定的键存在与散列中，那么将其删除</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset h k1 v1</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset h k2 v2</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget h k1</span><br><span class="line">v1</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hdel h k1</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall h</span><br><span class="line">k2</span><br><span class="line">v2</span><br></pre></td></tr></table></figure><blockquote><p><code>hgetall</code>获取到的结果是竖着排列，两个为一组键值对</p></blockquote><h3 id="有序集合（ZSET）"><a href="#有序集合（ZSET）" class="headerlink" title="有序集合（ZSET）"></a>有序集合（ZSET）</h3><blockquote><p>有序集合和散列一样，都用于存储键值对</p><p>有序集合的键<code>key</code>是成员，在一个有序集合中，只能有一个不同的成员</p><p>有序集合的值是<code>value</code>被称为分值<code>score</code>，分值为一个浮点数类型，</p><p>有序集合通过分值对键值对进行排序</p><p>基于时间衰减的商品热度值计算</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">ZADD</td><td align="left">将一个带有分值的成员添加到有序集合中</td></tr><tr><td align="left">ZRANGE</td><td align="left">根据元素在有序排列中所处的位置，从有序集合中获取多个元素，类似<code>lrange</code></td></tr><tr><td align="left">ZRANGEBYSCORE</td><td align="left">获取有序集合中在给定分值范围内的成员</td></tr><tr><td align="left">ZREM</td><td align="left">如果给定成员存在与有序集合中，那么移出这个成员</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD z <span class="number">5</span> first</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD z <span class="number">3</span> second</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE z <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"second"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"first"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE z <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"second"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"first"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"5"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZADD z <span class="number">4.5</span> third</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE z <span class="number">0</span> <span class="number">-1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"second"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"third"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"4.5"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"first"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"5"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrem z third</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE z <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">1</span>) <span class="string">"second"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"first"</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符串其他操作"><a href="#字符串其他操作" class="headerlink" title="字符串其他操作"></a>字符串其他操作</h3><h4 id="自增、自减"><a href="#自增、自减" class="headerlink" title="自增、自减"></a>自增、自减</h4><blockquote><p>当一个值被存入<code>Redis</code>时，如果这个值可以被解释成<strong>十进制</strong>或者<strong>浮点数</strong>，那么<code>Redis</code>会检测到这一属性</p><p>并允许用户可以对这样的值进行<strong>自增</strong>和<strong>自减</strong>操作</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">INCR</td><td align="left">将键存储的值增长1</td></tr><tr><td align="left">DECR</td><td align="left">将键存储的值减去1</td></tr><tr><td align="left">INCRBY</td><td align="left">将键存储的值加上整数</td></tr><tr><td align="left">DECRBY</td><td align="left">将键存储的值减去整数</td></tr><tr><td align="left">INCRBYFLOAT</td><td align="left">将键存储的值加上浮点数（传递负值即为减去）、在redis2.6及以上版本可用</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> age <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incr age</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age</span><br><span class="line"><span class="string">"2"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; decr age </span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age </span><br><span class="line"><span class="string">"1"</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>Python</code>的代码中，只需要使用<code>incr</code>即可包含<code>incrby</code>的功能</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">10</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age </span><br><span class="line"><span class="string">"11"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; decrby age <span class="number">5</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> age </span><br><span class="line"><span class="string">"6"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrbyfloat age <span class="number">-2.5</span></span><br><span class="line"><span class="string">"3.5"</span></span><br></pre></td></tr></table></figure><h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4><blockquote><p>像<code>python</code>的切片操作一样，<code>Redis</code>中的字符串也支持对某个范围进行操作</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">APPEND</td><td align="left">将一个值追加到给定字符串的末尾</td></tr><tr><td align="left">GETRANGE</td><td align="left">给定起点、终点，获取该范围内所有的字符组成的子串，包括起点重点，左闭右闭</td></tr><tr><td align="left">SETRANGE</td><td align="left">将字符串从某个偏移量开始设置成给定的值</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="builtin-name">set</span> name abc</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append name aaa</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; <span class="builtin-name">get</span> name </span><br><span class="line"><span class="string">"abcaaa"</span></span><br></pre></td></tr></table></figure><blockquote><p>现在版本的<code>getrange</code>是由老版本的<code>substr</code>函数改名而来，如果使用2.6版本以上的<code>redis</code>，建议使用<code>getrange</code></p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; getrange name <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="string">"caa"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; substr name <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="string">"caa"</span></span><br><span class="line"># 左闭右闭</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; getrange name <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="string">"abcaaa"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setrange name <span class="number">2</span> ***</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"ab***a"</span></span><br></pre></td></tr></table></figure><h3 id="列表其他操作"><a href="#列表其他操作" class="headerlink" title="列表其他操作"></a>列表其他操作</h3><h4 id="范围裁剪"><a href="#范围裁剪" class="headerlink" title="范围裁剪"></a>范围裁剪</h4><blockquote><p>除了以上对于列表某个位置或范围的访问，以及对列表左或右侧推入、弹出数据的命令</p><p>还可以通过<code>LTRIM</code>对列表进行裁剪</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">LTRIM</td><td align="left">给定起点和终点，对列表进行裁剪，只保留该范围内的数据</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># l: <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ltrim l <span class="number">1</span> <span class="number">3</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange l <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br></pre></td></tr></table></figure><h4 id="元素移动"><a href="#元素移动" class="headerlink" title="元素移动"></a>元素移动</h4><blockquote><p><code>redis</code>还支持在两个列表之间进行数据移动，从某个列表中<code>pop</code>数据，然后<code>push</code>到另外一个列表中</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">RPOPLPUSH source dest</td><td align="left">从source列表中弹出最右端的数据，并从最左端推入dest列表中</td></tr><tr><td align="left">BRPOPLPUSH source dest timeout</td><td align="left">timeout参数代表当source列表为空时，该命令阻塞等待可弹出数据，超过时间则返回<code>None</code></td></tr></tbody></table><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># l1: 2,1 </span></span><br><span class="line"><span class="comment"># l2: a,</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lrange</span> l1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lrange</span> l2 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br></pre></td></tr></table></figure><h4 id="阻塞弹出"><a href="#阻塞弹出" class="headerlink" title="阻塞弹出"></a>阻塞弹出</h4><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">BLPOP</td><td align="left">阻塞等待timeout时间，从一个非空列表中弹出最左侧的元素，超时返回None</td></tr><tr><td align="left">BRPOP</td><td align="left">与上同，只是从列表的最右侧弹出元素</td></tr></tbody></table><blockquote><p>这俩命令本质上与普通的<code>LPOP</code>和<code>RPOP</code>差不多，只是多了阻塞行为</p></blockquote><h3 id="集合其他操作"><a href="#集合其他操作" class="headerlink" title="集合其他操作"></a>集合其他操作</h3><h4 id="计数、随机"><a href="#计数、随机" class="headerlink" title="计数、随机"></a>计数、随机</h4><blockquote><p>唯一、无序</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SCARD</td><td align="left">返回集合中包含元素的数量</td></tr><tr><td align="left">SRANDMEMBER KEY COUNT</td><td align="left">从key的集合中随机返回COUNT个数量的元素</td></tr><tr><td align="left">SPOP KEY COUNT</td><td align="left">随机移除COUNT个元素，并返回被移除的元素</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; scard s1</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srandmember s1 <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srandmember s1 <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; spop s1 <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br></pre></td></tr></table></figure><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SMOVE SOURCE DEST ITEM</td><td align="left">如果ITEM存在与SOURCE中，那么将其移除并添加到DEST集合中，成功返回1，反之返回0</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s2 * </span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smove s1 s2 a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smove s1 s2 a</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s2</span><br><span class="line"><span class="number">1</span>) <span class="string">"*"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line">(empty list <span class="keyword">or</span> <span class="keyword">set</span>)</span><br></pre></td></tr></table></figure><h4 id="差集、交集、并集"><a href="#差集、交集、并集" class="headerlink" title="差集、交集、并集"></a>差集、交集、并集</h4><blockquote><p>与数学中的语义一致</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SDIFF KEY1 KEY2…</td><td align="left">返回存在与KEY1而不存在于其他集合中的元素（差集）</td></tr><tr><td align="left">SDIFFSTORE DEST KEY1 KEY2…</td><td align="left">返回存在与KEY1而不存在于其他集合中的元素（差集），并存储到<code>DEST</code>中</td></tr><tr><td align="left">SINTER KEY1 KEY2…</td><td align="left">返回同时存在于所有集合中的元素（交集）</td></tr><tr><td align="left">SINTERSTORE DEST KEY1 KEY2…</td><td align="left">返回同时存在于所有集合中的元素（交集），并存储到<code>DEST</code>中</td></tr><tr><td align="left">SUNION KEY1 KEY2…</td><td align="left">返回那些至少存在于一个集合中的元素（并集）</td></tr><tr><td align="left">SUNIONSTORE DEST KEY1 KEY2</td><td align="left">返回那些至少存在于一个集合中的元素（并集），并存储到<code>DEST</code>中</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sdiffstore dest s2 s1</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers dest</span><br><span class="line"><span class="number">1</span>) <span class="string">"*"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"># dest: *, a</span><br><span class="line"># s2: *, a</span><br><span class="line"># s3: ~</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sunion dest s2</span><br><span class="line"><span class="number">1</span>) <span class="string">"*"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sunion dest s2 s3</span><br><span class="line"><span class="number">1</span>) <span class="string">"*"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"~"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"a"</span></span><br></pre></td></tr></table></figure><h3 id="散列其他操作"><a href="#散列其他操作" class="headerlink" title="散列其他操作"></a>散列其他操作</h3><h4 id="批量存储"><a href="#批量存储" class="headerlink" title="批量存储"></a>批量存储</h4><blockquote><p>之前的是单独的<code>key</code>、<code>value</code>存储</p><p>来看看更高级的批量键值获取存储，这样的操作可以减少命令的调用次数，以及客户端与<code>Redis</code>之间的通信往返次数来提升<code>Redis</code>的性能</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">HMGET</td><td align="left">从一个散列获取一个或多个值</td></tr><tr><td align="left">HMSET</td><td align="left">为散列设置一个或多个值</td></tr><tr><td align="left">HLEN</td><td align="left">返回散列包含的键值对数量</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset hm a <span class="number">1</span> b <span class="number">2</span> c <span class="number">3</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmget hm a b c</span><br><span class="line"><span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hlen hm</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="获取、检查"><a href="#获取、检查" class="headerlink" title="获取、检查"></a>获取、检查</h4><blockquote><p><code>Redis</code>的散列还可以像<code>Python</code>中的字典一样，支持集成了很多功能</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">HEXISTS</td><td align="left">检查给定的键是否在散列中</td></tr><tr><td align="left">HKEYS</td><td align="left">获取散列包含的所有键</td></tr><tr><td align="left">HVALS</td><td align="left">获取散列包含的所有值</td></tr><tr><td align="left">HINCRYBY</td><td align="left">将键存储的值加上一个整数</td></tr><tr><td align="left">HINCRYBYFLOAT</td><td align="left">将键存储的值加上一个浮点数</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset h a <span class="number">1</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hexists h a </span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hexists h b</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"># h: &#123; <span class="number">1</span>:a, <span class="number">2</span>:b &#125;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hvals h</span><br><span class="line"><span class="number">1</span>) <span class="string">"v2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hkeys h</span><br><span class="line"><span class="number">1</span>) <span class="string">"k2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"b"</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>getall</code>在大量数据的情况下，可以先使用<code>hkeys</code>，然后再使用<code>hget</code>一个个的取出键的值</p></blockquote><h3 id="有序集合其他操作"><a href="#有序集合其他操作" class="headerlink" title="有序集合其他操作"></a>有序集合其他操作</h3><h4 id="计数、区间"><a href="#计数、区间" class="headerlink" title="计数、区间"></a>计数、区间</h4><blockquote><p>有序集合主要是通过分值大小有序的进行获取和扫描成员</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">ZCARD</td><td align="left">返回有序集合的数据成员数量</td></tr><tr><td align="left">ZINCRBY</td><td align="left">将有序集合某个成员的分值加上某个值</td></tr><tr><td align="left">ZCOUNT KEY MIN MAX</td><td align="left">返回分值介于min和max之间的成员数量</td></tr><tr><td align="left">ZRANK KEY MEMBER</td><td align="left">返回成员在有序集合中的排名</td></tr><tr><td align="left">ZSCORE</td><td align="left">返回成员的分值</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcard z</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"># a2:<span class="number">5</span> a3:<span class="number">7</span> a1:<span class="number">10</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd z <span class="number">10</span> a1</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd z <span class="number">5</span> a2</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd z <span class="number">7</span> a3</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange z <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"a2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"a1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zcount z <span class="number">7</span> <span class="number">10</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrank z a2</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrank z a3</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrank z a1</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zscore z a1</span><br><span class="line"><span class="string">"10"</span></span><br></pre></td></tr></table></figure><h4 id="范围删除、获取"><a href="#范围删除、获取" class="headerlink" title="范围删除、获取"></a>范围删除、获取</h4><blockquote><p>除了正向的排序，还可以通过分值逆向排序提取结果</p><p>还可以对有序集合进行范围移除</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">ZREVRANK</td><td align="left">返回从大到小的单个元素的排名</td></tr><tr><td align="left">ZREVRANGE</td><td align="left">返回有序集合给定排名范围内的成员，成员按照分值从大到校排列</td></tr><tr><td align="left">ZRANGEBYSCORE KEY MIN MAX</td><td align="left">返回介于某个分值之间的所有元素</td></tr><tr><td align="left">ZREVRANGEBYSCORE</td><td align="left">返回介于某个分值之间的所有元素并逆序</td></tr><tr><td align="left">ZREMRANGEBYRANK KEY START STOP</td><td align="left">移除介于某个排名区间之间的所有元素</td></tr><tr><td align="left">ZREMRANGEBYSCORE KEY MIN MAX</td><td align="left">移除介于某个分值之间的所有元素</td></tr><tr><td align="left">ZINTERSTORE</td><td align="left">执行交集运算</td></tr><tr><td align="left">ZUNIONSTORE</td><td align="left">执行并集运算</td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange z <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"a2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"a1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrank z a3</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrank z a2 </span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrank z a1</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrevrange z1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange z1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrangebyscore z1 <span class="number">99.5</span> <span class="number">100</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zremrangebyrank z1 <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zrange  z1 <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;可以存储&lt;strong&gt;键&lt;/strong&gt;体与五种不同数据结构类型类型之间的映射&lt;/p&gt;
&lt;p&gt;分别为&lt;code&gt;STRING&lt;/code&gt;字符串、&lt;code&gt;LIST&lt;/code&gt;列表、&lt;code&gt;SET&lt;/code&gt;集合、&lt;code&gt;HASH&lt;/code&gt;散列和&lt;code&gt;ZSET&lt;/code&gt;有序集合&lt;/p&gt;
&lt;/blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;客户端&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-&lt;span class=&quot;keyword&quot;&gt;cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;如需支持中文展示，可以使用参数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Redis" scheme="http://laxe.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis的数据淘汰策略</title>
    <link href="http://laxe.top/2019/10/21/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <id>http://laxe.top/2019/10/21/Redis的数据淘汰策略/</id>
    <published>2019-10-21T03:36:00.091Z</published>
    <updated>2019-10-21T03:36:35.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis数据过期策略"><a href="#Redis数据过期策略" class="headerlink" title="Redis数据过期策略"></a>Redis数据过期策略</h2><blockquote><p>当<code>redis</code>内存不足时，此时就要有响应的策略来保证将一些无用或冷数据从内存中剔除出去；</p></blockquote><h3 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h3><ul><li>策略 : 在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作</li><li>优点 : 对内存友好，保证过期键会尽可能快地被删除，并释放过期键所占用的内存</li><li>缺点 : 对<code>CPU</code>时间不友好，占用太多<code>CPU</code>时间，影响服务器的响应时间和吞吐量</li></ul><a id="more"></a><h3 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h3><ul><li>策略 : 放任过期键不管，每次从键空间读写操作时，都检查键是否过期，如果过期，删除该键，如果没有过期，返回该键</li><li>优点 : 对<code>CPU</code>时间友好，读写操作键时才对键进行过期检查，删除过期键的操作只会在非做不可的情况下进行</li><li>缺点 : 对内存不友好，只要键不删除，就不会释放内存，浪费太多内存，有内存泄漏风险</li></ul><h3 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h3><ul><li>策略 :对定时删除策略和惰性删除策略的一种整合和折中。每隔一段时间执行一次定时删除，并通过限制删除操作执行的总时长和总频率来限制删除操作对CPU占用时间的影响。通过定期删除过期键，有效减少了因为过期键而带来的内存浪费</li><li>难点：确定删除操作执行的总时长和总频率。执行太频繁，执行时间过长，就会退化成定时删除策略，影响客户端请求效率；执行得太少，执行时间太短，会演变为惰性删除，存在内存浪费的情况</li></ul><blockquote><p><code>Redis</code>服务器使用惰性删除和定期删除两种策略，通过配合使用，很好地在合理使用CPU时间和避免浪费内存之间取得平衡</p></blockquote><h3 id="驱逐策略"><a href="#驱逐策略" class="headerlink" title="驱逐策略"></a>驱逐策略</h3><ul><li><code>maxmemory</code></li></ul><blockquote><p><code>maxmemory</code> 用于指定<code>Redis</code>能使用的最大内存。既可以在 <code>redis.conf</code> 文件中设置, 也可以在运行过程中通过<code>CONFIG SET</code>命令动态修改</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory <span class="number">100</span>mb</span><br></pre></td></tr></table></figure><blockquote><p>达到最大内存限制时<code>maxmemory</code> ，<code>Redis</code>根据 <code>maxmemory-policy</code> 配置的策略, 来决定具体的行为</p></blockquote><ul><li><p><code>Redis 3.0</code>支持的策略包括</p><ul><li><code>noeviction</code>：不删除策略，达到最大内存限制时，如果需要更多内存，直接返回错误信息</li></ul><blockquote><p>大多数写命令都会导致占用更多的内存(有极少数会例外, 如 DEL )。</p></blockquote><ul><li><code>allkeys-lru</code>：所有<code>key</code><strong>通用</strong>；优先删除最近最少使用<code>key</code></li><li><code>volatile-lru</code>：只限于设置了<code>expire</code>的部分; 优先删除最近最少使用(<code>less recently used</code>、<code>LRU</code>)的 key</li><li><code>allkeys-random</code>：所有<code>key</code><strong>通用</strong>；随机删除一部分<code>key</code></li><li><code>volatile-random</code>：只限于设置了<code>expire</code>的部分；随机删除一部分<code>key</code></li><li><code>volatile-ttl</code>：只限于设置了<code>expire</code>的部分；优先删除剩余时间短的<code>key</code></li></ul></li></ul><blockquote><p>如果没有设置 <strong>expire</strong> 的key，不满足先决条件(prerequisites)</p><p>那么 <strong>volatile-lru</strong>, <strong>volatile-random</strong> 和 <strong>volatile-ttl</strong> 策略的行为，和 <strong>noeviction(不删除)</strong> 基本上一致</p></blockquote><ul><li>配置驱逐策略，可以通过<code>maxmemory-policy</code>属性设置</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-<span class="keyword">policy</span> noeviction</span><br></pre></td></tr></table></figure><ul><li><code>maxmemory-policy</code>同样可以在运行时设置，用户可以根据内存的使用情况动态的修改淘汰策略。</li><li>当<code>redis</code>中的数据有一部分访问频率比较高，另外一部分访问频率较低时，设置<code>allkeys-lru</code>比较合适。或者无法预测数据的使用频率时，<code>allkeys-lru</code>也是不错的选择。</li><li>如果你需要循环或者扫描连续数据时，换种说法就是数据的访问概率大致相等时，<code>allkeys-random</code>是不错的选择</li><li>当你想通过设置不同的<code>ttl</code>来控制数据过期的先后顺序时，你可以设置为<code>volatile-ttl</code></li><li>当你希望一些数据常驻内存，另外一些数据可以被替换掉时，就请用<code>volatile-lru</code>或<code>volatile-random</code>吧</li><li>另外，数据的过期时间是存储在另外一个哈希表中的，因此要耗费更多的内存空间，而<code>allkeys-lru</code>并不需要数据设置过期时间，因此对内存的利用率更高</li><li><code>volatile-lru</code>，<code>volatile-random</code>和<code>volatile-ttl</code>在没有数据满足被淘汰的条件时，会和noeviction一样返回错误</li></ul><h4 id="触发淘汰动作"><a href="#触发淘汰动作" class="headerlink" title="触发淘汰动作"></a>触发淘汰动作</h4><ul><li>客户端执行一个命令, 导致<code>Redis</code>中的数据增加,占用更多内存</li><li><code>Redis</code>检查内存使用量, 如果超出 <code>maxmemory</code> 限制, 根据策略清除部分<code>key</code></li><li>继续执行下一条命令, 以此类推</li></ul><h4 id="策略执行方式"><a href="#策略执行方式" class="headerlink" title="策略执行方式"></a>策略执行方式</h4><blockquote><p><code>Redis</code>为了避免反复触发淘汰策略，每次会淘汰掉一批数据；当<code>Redis</code>指令产生数据比较大时，淘汰掉的数据量也相应也比较大。</p><p>为了节省内存，<code>LRU</code>的策略并不是严格执行的，<code>Redis</code>是在整体中随机抽样取出一小部分数据，在这部分数据中严格执行<code>LRU</code>策略</p><p>在<code>Redis3.0</code>以后的版本对此算法做了改进，但仍然也是近似的<code>LRU</code>的策略，只是离真正的<code>LRU</code>更近了。</p><p>另外用户可以动态的设定随机抽取的样本数，例如</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples <span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis数据过期策略&quot;&gt;&lt;a href=&quot;#Redis数据过期策略&quot; class=&quot;headerlink&quot; title=&quot;Redis数据过期策略&quot;&gt;&lt;/a&gt;Redis数据过期策略&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;redis&lt;/code&gt;内存不足时，此时就要有响应的策略来保证将一些无用或冷数据从内存中剔除出去；&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3 id=&quot;定时删除&quot;&gt;&lt;a href=&quot;#定时删除&quot; class=&quot;headerlink&quot; title=&quot;定时删除&quot;&gt;&lt;/a&gt;定时删除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;策略 : 在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作&lt;/li&gt;
&lt;li&gt;优点 : 对内存友好，保证过期键会尽可能快地被删除，并释放过期键所占用的内存&lt;/li&gt;
&lt;li&gt;缺点 : 对&lt;code&gt;CPU&lt;/code&gt;时间不友好，占用太多&lt;code&gt;CPU&lt;/code&gt;时间，影响服务器的响应时间和吞吐量&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Redis的键空间、键事件通知系统</title>
    <link href="http://laxe.top/2019/10/21/Redis%E7%9A%84%E9%94%AE%E7%A9%BA%E9%97%B4%E3%80%81%E9%94%AE%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5%E7%B3%BB%E7%BB%9F/"/>
    <id>http://laxe.top/2019/10/21/Redis的键空间、键事件通知系统/</id>
    <published>2019-10-21T03:34:37.619Z</published>
    <updated>2019-10-21T03:35:27.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="键空间事件通知"><a href="#键空间事件通知" class="headerlink" title="键空间事件通知"></a>键空间事件通知</h2><ul><li>在<code>Redis</code>里面有一些事件，比如键<strong>到期</strong>、键被<strong>删除</strong>等。可以通过打开<code>redis</code>键空间事件通知来让 Redis 一旦触发这些事件的时候就往特定的<code>Channel</code>推一条消息</li></ul><h3 id="键事件通知配置"><a href="#键事件通知配置" class="headerlink" title="键事件通知配置"></a>键事件通知配置</h3><ul><li>默认在<code>redis</code>中，键事件通知是不打开的，需要我们手动配置，具体的选项如下，默认他是个空字符串，代表关闭状态</li></ul><a id="more"></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-<span class="keyword">events</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><ul><li>关于这条属性的选项，在配置文件也有了详细的介绍，如下</li></ul><table><thead><tr><th align="left">选项字符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">K</td><td align="left">键空间通知，所有通知以<code>__keyspace@&lt;db&gt;__</code> 为前缀</td></tr><tr><td align="left">E</td><td align="left">键事件通知，所有通知以<code>__keyevent@&lt;db&gt;__</code> 为前缀</td></tr><tr><td align="left">g</td><td align="left"><code>DEL</code>、<code>EXPIRE</code>、<code>RENAME</code>等类型无关的通用命令的通知</td></tr><tr><td align="left">$</td><td align="left">字符串命令的通知</td></tr><tr><td align="left">l</td><td align="left">列表命令的通知</td></tr><tr><td align="left">s</td><td align="left">集合命令的通知</td></tr><tr><td align="left">h</td><td align="left">哈希命令的通知</td></tr><tr><td align="left">z</td><td align="left">有序集合命令的通知</td></tr><tr><td align="left">x</td><td align="left">过期事件：每当有过期键被删除时发送</td></tr><tr><td align="left">e</td><td align="left">驱逐<code>(evict)</code>事件：每当有键因为<code>maxmemory</code>政策而被删除时发送</td></tr><tr><td align="left">A</td><td align="left">参数<code>g$lshzxe</code>的别名</td></tr></tbody></table><h3 id="键空间和键事件"><a href="#键空间和键事件" class="headerlink" title="键空间和键事件"></a>键空间和键事件</h3><blockquote><p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件</p><p>比如说，对<code>0</code>号数据库的键<code>mykey</code>执行<code>DEL</code>命令时， 系统将分发两条消息， 相当于执行以下两个<code>PUBLISH</code>命令</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH <span class="symbol">__keyspace@</span><span class="number">0</span>__:mykey del</span><br><span class="line">PUBLISH <span class="symbol">__keyevent@</span><span class="number">0</span>__:del mykey</span><br></pre></td></tr></table></figure><ul><li><code>__keyspace@0__:mykey</code>：接收<code>0</code>号数据库中所有修改键<code>mykey</code>的事件</li><li><code>__keyevent@0__:del</code>：接收<code>0</code>号数据库中所有执行<code>del</code>命令的键</li></ul><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; keyspace`为前缀的频道被称为键空间通知`key-space notification</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; keyevent`为前缀的频道则被称为键事件通知`key-event notification</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>订阅<strong>键空间频道</strong>，监控被执行事件的键，如监控<code>mykey</code>；那么此时将接收到该键所对应的事件：<code>del</code></li><li>订阅<strong>键事件频道</strong>，监控某个事件，如<code>del</code>；那么<code>del</code>事件触发时，订阅者收到：<code>mykey</code></li></ul><h3 id="过期的键事件通知"><a href="#过期的键事件通知" class="headerlink" title="过期的键事件通知"></a>过期的键事件通知</h3><ul><li>过期的键事件通知常用在订单过期通知等场景下，此时只需要订阅对应<strong>过期事件</strong>的频道，当某键触发过期事件时，即可接受到对应<strong>过期键</strong>的消息</li><li><code>redis</code>配置如下：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notify-keyspace-<span class="keyword">events</span> <span class="string">"Ex"</span></span><br></pre></td></tr></table></figure><ul><li><code>Python</code>代码的简单示范，订阅过期频道</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">redis = redis.Redis(host=<span class="string">'123.57.61.168'</span>, port=<span class="number">6379</span>)</span><br><span class="line">pubsub = redis.pubsub()</span><br><span class="line">pubsub.psubscribe(<span class="string">'__keyevent@0__:expired'</span>) <span class="comment"># 订阅过期事件频道</span></span><br><span class="line">print(<span class="string">'Starting message loop'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = pubsub.get_message()</span><br><span class="line">        <span class="keyword">if</span> message:</span><br><span class="line">            print(message)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="comment"># CTRL + C</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li>那么当此时执行此段代码，另起<code>redis</code>客户端，设置一个可以过期的<code>key</code>值，来看一下效果</li></ul><p><a href="https://lienze.tech/blog/images/%E9%94%AE%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5.gif" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/%E9%94%AE%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5.gif" alt="键过期事件通知"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;键空间事件通知&quot;&gt;&lt;a href=&quot;#键空间事件通知&quot; class=&quot;headerlink&quot; title=&quot;键空间事件通知&quot;&gt;&lt;/a&gt;键空间事件通知&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Redis&lt;/code&gt;里面有一些事件，比如键&lt;strong&gt;到期&lt;/strong&gt;、键被&lt;strong&gt;删除&lt;/strong&gt;等。可以通过打开&lt;code&gt;redis&lt;/code&gt;键空间事件通知来让 Redis 一旦触发这些事件的时候就往特定的&lt;code&gt;Channel&lt;/code&gt;推一条消息&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;键事件通知配置&quot;&gt;&lt;a href=&quot;#键事件通知配置&quot; class=&quot;headerlink&quot; title=&quot;键事件通知配置&quot;&gt;&lt;/a&gt;键事件通知配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;默认在&lt;code&gt;redis&lt;/code&gt;中，键事件通知是不打开的，需要我们手动配置，具体的选项如下，默认他是个空字符串，代表关闭状态&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Redis进行持久化的两种办法</title>
    <link href="http://laxe.top/2019/10/21/Redis%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
    <id>http://laxe.top/2019/10/21/Redis进行持久化的两种办法/</id>
    <published>2019-10-21T03:33:08.935Z</published>
    <updated>2019-10-21T03:38:47.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis提供了两种办法，进行数据持久化，保证数据安全可靠，也就是人们众所周知的RDB和AOF机制</p></blockquote><h2 id="快照（snapshotting）"><a href="#快照（snapshotting）" class="headerlink" title="快照（snapshotting）"></a>快照（snapshotting）</h2><ul><li>客户端发送<code>BGSAVE</code>命令来创建一个快照，当调用<code>BGSAVE</code>命令之后，<code>Redis</code>会调用<code>fork</code>来创建一个子进程，该子进程负责将快照写入硬盘，而父进程则继续处理命令请求</li><li>客户端发送<code>SAVE</code>来创建一个快照，接到<code>SAVE</code>命令的<code>redis</code>服务器会在快照创建完毕之前不响应任何其他命令，<code>save</code>命令并不常用，我们通常只会在没有足够内存去执行<code>BGSAVE</code>的情况下，或者无视等待持久化操作所造成的时间浪费问题，也可以使用该命令</li><li>当<code>redis</code>配置了<code>save</code>选项，比如<code>save 60 10000</code>，那么<code>redis</code>最近一次创建快照开始算起，当60秒内有10000次写入这个条件被满足时，<code>redis</code>就会自动触发<code>BGSAVE</code>命令，当用户配置了多个<code>save</code>选项，当任意一个<code>save</code>条件被满足时，<code>redis</code>就会触发一次<code>bgsave</code> 命令</li><li>当<code>redis</code>接收到了<code>shutdown</code>命令以及标准的<code>term</code>信号时，会自动执行<code>save</code>命令，阻塞所有的客户端，不再执行客户端发送的任何命令，并在<code>save</code>命令执行完毕之后关闭服务器</li><li>当<code>redis</code>实现主从同步时，从服务器向主服务器发送<code>sync</code>命令时，此时，如果主服务器目前没有在执行<code>bgsave</code>命令，或并非刚刚执行完<code>bgsave</code>命令，那么此时主服务器就会执行<code>bgsave</code>进行数据持久化备份，</li></ul><a id="more"></a><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>主服务器会在命令执行完毕之后，向所有从服务器发送快照文件</span><br><span class="line"><span class="number">2.</span>并在发送期间继续记录被执行的写命令</span><br><span class="line"><span class="number">3.</span>从服务器会在接收到新的快照文件之后丢弃所有的旧数据</span><br><span class="line"><span class="number">4.</span>载入新收到的快照文件</span><br><span class="line"><span class="number">5.</span>主服务器发完新的快照文件继续将缓冲区中的写命令同步到从服务器上</span><br><span class="line"><span class="number">6.</span>从服务器完成对快照的载入之后，开始接收命令，并执行新的主服务器发来的缓冲区里的写命令</span><br><span class="line"><span class="number">7.</span>从服务器回归原来的工作模式，继续接收读指令</span><br></pre></td></tr></table></figure><h3 id="save选项"><a href="#save选项" class="headerlink" title="save选项"></a>save选项</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>如上的<code>redis</code>配置选项告知<code>redis</code>，它应该根据这个选项提供的两个值来进行<code>bgsave</code>操作</p><p>如果服务器距离上次成功生成快照已超过了900秒，或者在这期间执行了至少一次写操作，那么<code>redis</code> 就会自动开始一次新的<code>BGSAVE</code>操作</p></blockquote><ul><li>快照规则的选定是一个技术活，需要在开发环境即模拟生产环境，避免备份操作频繁，或是过于稀少而导致的资源浪费或含有丢失大量数据的隐患</li></ul><h3 id="数据较大"><a href="#数据较大" class="headerlink" title="数据较大"></a>数据较大</h3><ul><li>对于真实的物理机，<code>vmware</code>或者<code>kvm</code>虚拟机来说，<code>redis</code>进程每占用多一个G的内存，创建<code>bgsave</code>进程所需要的时间就要多增加<strong>10~20毫秒</strong></li><li>对于<code>xen</code>虚拟机来说，同样<strong>一个GB</strong>的<code>redis</code>内存增加，会导致<code>bgsave</code>子进程的时间多<code>200~300</code>毫秒</li><li>虽然<code>bgsave</code>不需要阻塞服务，但是由于开启了子进程，会造成资源抢占而导致<code>redis</code>服务停顿，在一个<code>50GB</code>内存的<code>redis</code>服务上执行<code>bgsave</code>命令，创建子进程需要花费<code>15</code>秒，生成快照需要<code>15~20</code>分钟；而使用<code>save</code>命令只需要<strong>3~5分钟</strong>即可完成快照生成</li></ul><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><blockquote><p><code>aof</code>机制将被执行的写命令写到<code>AOF</code>文件的末尾，以此来记录数据的变化，</p><p><code>redis</code>只需要从头到尾的执行一次<code>AOF</code>文件包含的所有写命令，就可以回复<code>AOF</code>文件所记录的数据集，</p></blockquote><ul><li><code>AOF</code>配置选项，在<code>centos7</code>操作系统下位于<code>redis</code>配置文件的第<code>594</code>行附近，把<code>no</code>改成<code>yes</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">appendonly</span> <span class="literal">no</span></span><br><span class="line"><span class="comment"># appendonly yes</span></span><br></pre></td></tr></table></figure><ul><li><code>AOF</code>频率的设置</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">appendfsync</span> everysec <span class="comment"># 每秒进行一次同步，显示的将多个写命令同步到硬盘</span></span><br><span class="line">appendfsync always <span class="comment"># 每个redis写命令都同步的写入磁盘，这样做会严重降低redis的速度</span></span><br><span class="line">appendfsync <span class="literal">no</span> <span class="comment"># 由操作系统决定应该何时进行同步</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，<code>appendfsync always</code>选项会让<code>Redis</code>每次只写入一个命令，而不是像其他的<code>appendfsync</code>选项那样一次写入多个命令，这种不断写入的少量数据的做法会在固态硬盘的情况下，引发严重的写入放大，甚至会将固态硬盘的寿命从原来的几年降低为几个月</p></blockquote><blockquote><p>为了兼顾安全和写入性能，用户可以考虑使用<code>appendfsync everysec</code>选项，让<code>redis</code>以每秒一次的频率对<code>AOF</code>文件进行同步；<code>redis</code>每秒同步一次<code>AOF</code>文件时的性能和不使用任何持久化特性时的性能相差无几，这样的持久化策略，即使出现系统崩溃，也只会损失一秒的数据</p></blockquote><blockquote><p>当硬盘忙于执行写入操作时，<code>Redis</code>还会优雅的放慢自己的速度以便适应硬盘的最大写入速度</p></blockquote><h3 id="数据较大-1"><a href="#数据较大-1" class="headerlink" title="数据较大"></a>数据较大</h3><blockquote><p>虽然<code>AOF</code>可以最低使时间丢失的<strong>时间窗口</strong>降低至1秒，但是不断增长的命令记录会写到<code>AOF</code>文件里面，导致<code>AOF</code>的体积越来越大，极端情况下，不断增长的<code>AOF</code>文件甚至会用完所有的磁盘空间，另外，重启的<code>Redis</code>需要重新执行<code>AOF</code>文件所记录的所有命令来还原数据集，如果<code>AOF</code>文件非常大，那么还原操作的时间也会非常漫长</p></blockquote><ul><li>解决这个AOF文件过大的问题，可以向<code>redis</code>发送<code>bgrewriteaof</code>，这个命令会移除在文件中的冗余命令来重写<code>rewrite</code><strong>AOF文件</strong>，使AOF文件的体积变得尽可能的小</li></ul><blockquote><p><code>BGREWRITEAOF</code>指令和<code>BGSAVE</code>工作的原理相似，都需要在后台开辟子进程，由子进程负责对<code>AOF</code>文件进行重写；因为AOF文件重写需要子进程，那么同样会造成开辟子进程造成的性能问题和内存占用问题；</p><p>还需要注意的是，当AOF文件过大，在重写过程以及重写完成之后删除旧有AOF文件，删除一个较大的AOF文件还可能会导致操作系统挂起数秒</p></blockquote><ul><li>设置AOF</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">auto</span>-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"><span class="built_in">auto</span>-aof-rewrite-min-size <span class="number">64</span>mb</span><br></pre></td></tr></table></figure><blockquote><p>当AOF文件此时大于64M，并且AOF文件的体积比上一次重写之后的体积<strong>大于了至少一倍</strong><code>100%</code>，那么<code>redis</code>就会执行<code>BGREWRITEAOF</code>命令</p><p>如果AOF重写频繁，可以适当调整<code>auto-aof-rewrite-percentage</code>选项，可以使<code>redis</code>在AOF体积变得更大的情况下才进行重写</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;redis提供了两种办法，进行数据持久化，保证数据安全可靠，也就是人们众所周知的RDB和AOF机制&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;快照（snapshotting）&quot;&gt;&lt;a href=&quot;#快照（snapshotting）&quot; class=&quot;headerlink&quot; title=&quot;快照（snapshotting）&quot;&gt;&lt;/a&gt;快照（snapshotting）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;客户端发送&lt;code&gt;BGSAVE&lt;/code&gt;命令来创建一个快照，当调用&lt;code&gt;BGSAVE&lt;/code&gt;命令之后，&lt;code&gt;Redis&lt;/code&gt;会调用&lt;code&gt;fork&lt;/code&gt;来创建一个子进程，该子进程负责将快照写入硬盘，而父进程则继续处理命令请求&lt;/li&gt;
&lt;li&gt;客户端发送&lt;code&gt;SAVE&lt;/code&gt;来创建一个快照，接到&lt;code&gt;SAVE&lt;/code&gt;命令的&lt;code&gt;redis&lt;/code&gt;服务器会在快照创建完毕之前不响应任何其他命令，&lt;code&gt;save&lt;/code&gt;命令并不常用，我们通常只会在没有足够内存去执行&lt;code&gt;BGSAVE&lt;/code&gt;的情况下，或者无视等待持久化操作所造成的时间浪费问题，也可以使用该命令&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;redis&lt;/code&gt;配置了&lt;code&gt;save&lt;/code&gt;选项，比如&lt;code&gt;save 60 10000&lt;/code&gt;，那么&lt;code&gt;redis&lt;/code&gt;最近一次创建快照开始算起，当60秒内有10000次写入这个条件被满足时，&lt;code&gt;redis&lt;/code&gt;就会自动触发&lt;code&gt;BGSAVE&lt;/code&gt;命令，当用户配置了多个&lt;code&gt;save&lt;/code&gt;选项，当任意一个&lt;code&gt;save&lt;/code&gt;条件被满足时，&lt;code&gt;redis&lt;/code&gt;就会触发一次&lt;code&gt;bgsave&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;redis&lt;/code&gt;接收到了&lt;code&gt;shutdown&lt;/code&gt;命令以及标准的&lt;code&gt;term&lt;/code&gt;信号时，会自动执行&lt;code&gt;save&lt;/code&gt;命令，阻塞所有的客户端，不再执行客户端发送的任何命令，并在&lt;code&gt;save&lt;/code&gt;命令执行完毕之后关闭服务器&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;redis&lt;/code&gt;实现主从同步时，从服务器向主服务器发送&lt;code&gt;sync&lt;/code&gt;命令时，此时，如果主服务器目前没有在执行&lt;code&gt;bgsave&lt;/code&gt;命令，或并非刚刚执行完&lt;code&gt;bgsave&lt;/code&gt;命令，那么此时主服务器就会执行&lt;code&gt;bgsave&lt;/code&gt;进行数据持久化备份，&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Redis中的发布者与订阅者</title>
    <link href="http://laxe.top/2019/10/21/Redis%E4%B8%AD%E7%9A%84%E5%8F%91%E5%B8%83%E8%80%85%E4%B8%8E%E8%AE%A2%E9%98%85%E8%80%85/"/>
    <id>http://laxe.top/2019/10/21/Redis中的发布者与订阅者/</id>
    <published>2019-10-21T03:30:56.022Z</published>
    <updated>2019-12-26T00:32:54.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h2><blockquote><p>发布和订阅<code>pub/sub</code>，订阅者负责订阅频道，发送者负责像频道发送二进制字符串消息，每当有消息发布到订阅的这个频道，那么所有的订阅者都可以收到这个消息，</p><p>发布订阅也是像是我们生活中的电台，订阅者可以订阅收听多个电台，而发送者可以再任何电台发送消息</p></blockquote><a id="more"></a><h3 id="发布、订阅命令"><a href="#发布、订阅命令" class="headerlink" title="发布、订阅命令"></a>发布、订阅命令</h3><table><thead><tr><th align="left">指令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SUBSCRIBE CHANNLE</td><td align="left">订阅给定的一个或多个频道</td></tr><tr><td align="left">UNSUBSCRIBE CHANNLE</td><td align="left">退订一个或多个频道，如果没有指定具体退订的频道，那么是全部退订</td></tr><tr><td align="left">PSUBSCRIBE PATTERN</td><td align="left">订阅与给定模式相匹配的所有频道</td></tr><tr><td align="left">PUNSUBSCRIBE PATTERN</td><td align="left">退订给定的模式相匹配的频道，未指定，则退订所有</td></tr><tr><td align="left">PUBLISH CHANNLE MESSAGE</td><td align="left">向给定频道发送消息</td></tr></tbody></table><blockquote><p>以下是一个Python的小<code>DEMO</code>，实现发布者订阅者</p></blockquote><ul><li>发布者，注意当订阅者迟于发布者时，可能会由于某些消息已经被发布而无法被新参与的订阅者拿到</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        发布者频道</span></span><br><span class="line"><span class="string">        conn: 连接对象</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 让订阅者有充足的时间先订阅频道</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        conn.publish(<span class="string">'channle'</span>,var)</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment"># 消息发送间隔一秒</span></span><br></pre></td></tr></table></figure><ul><li>订阅者，这里注释部分提供了一个迟于发布者的订阅逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subscribe</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        订阅者频道</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    pubsub = conn.pubsub()</span><br><span class="line">    <span class="comment"># time.sleep(3) 当订阅迟于发布时，会丢失时间间隔内所发布的消息</span></span><br><span class="line">    pubsub.subscribe([<span class="string">'channle'</span>])</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pubsub.listen():</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">            pubsub.unsubscribe() <span class="comment"># 退订！但是还不能跳出循环，要把这次取出来的打印了 下次跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'[SUB] : %s'</span> % item)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>入口函数</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def main<span class="literal">()</span>:</span><br><span class="line">    conn = redis.<span class="constructor">Redis(<span class="params">host</span>='44.33.22.11',<span class="params">port</span>=6379)</span></span><br><span class="line">    <span class="constructor">Thread(<span class="params">target</span>=<span class="params">publish</span>, <span class="params">args</span>=(<span class="params">conn</span>,)</span>).start<span class="literal">()</span> # 开启发布者频道</span><br><span class="line">    subscribe(conn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__<span class="operator"> == </span><span class="string">"__main__"</span>:</span><br><span class="line">    main<span class="literal">()</span></span><br></pre></td></tr></table></figure><blockquote><p>当发布者的消息等待一秒，而订阅者无等待时间差时，此时订阅者可以拿到所有的数据</p></blockquote><p><a href="https://lienze.tech/blog/images/%E5%AE%8C%E6%95%B4%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85.gif" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/%E5%AE%8C%E6%95%B4%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85.gif" alt="完整发布者订阅者"></a></p><blockquote><p>但是当注释掉的三秒延迟打开，此时订阅者将会晚于发布者三秒进行</p></blockquote><p><a href="https://lienze.tech/blog/images/%E8%AE%A2%E9%98%85%E8%80%85%E7%AD%89%E5%BE%85.gif" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/%E8%AE%A2%E9%98%85%E8%80%85%E7%AD%89%E5%BE%85.gif" alt="订阅者等待"></a></p><blockquote><p>很明显，丢掉了两秒间隔的数据0和1，这和生活中很贴近，已经出版的期刊，不会再订阅之后重新不给你</p><p>而且由于代码此时在订阅者部分必须循环到10次才会取消订阅，结合<code>listen</code>的阻塞模式，当前程序进入到了阻塞状态，无法继续，但是发布者也已经不在工作了。</p></blockquote><h3 id="发布、订阅模式的缺陷"><a href="#发布、订阅模式的缺陷" class="headerlink" title="发布、订阅模式的缺陷"></a>发布、订阅模式的缺陷</h3><blockquote><p>对于<strong>旧版的Redis</strong>来说，如果某个订阅者的消息提取速度不够快的话，会导致消息积压而造成Redis输出缓冲区的体积变得越来越大，这可能会导致Redis的速度越来越慢，或者直接崩溃，也可能会导致Redis会被操作系统强制杀死，甚至导致操作系统不可用，毕竟这是在内存里的数据库</p><p>新版的<code>Redis</code>不会出现这样的问题</p></blockquote><ul><li>此外，如果客户端在订阅消息操作过程中出现了断线，那么客户端将丢失在断线过程中发布者发送的所有消息</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发布与订阅&quot;&gt;&lt;a href=&quot;#发布与订阅&quot; class=&quot;headerlink&quot; title=&quot;发布与订阅&quot;&gt;&lt;/a&gt;发布与订阅&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;发布和订阅&lt;code&gt;pub/sub&lt;/code&gt;，订阅者负责订阅频道，发送者负责像频道发送二进制字符串消息，每当有消息发布到订阅的这个频道，那么所有的订阅者都可以收到这个消息，&lt;/p&gt;
&lt;p&gt;发布订阅也是像是我们生活中的电台，订阅者可以订阅收听多个电台，而发送者可以再任何电台发送消息&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Redis" scheme="http://laxe.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis实现分布式锁以及利用乐观锁保证数据安全</title>
    <link href="http://laxe.top/2019/10/21/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8%E4%B9%90%E8%A7%82%E9%94%81%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/"/>
    <id>http://laxe.top/2019/10/21/Redis实现分布式锁以及利用乐观锁保证数据安全/</id>
    <published>2019-10-21T03:25:16.370Z</published>
    <updated>2019-12-26T00:33:31.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><blockquote><p>一般来说，对数据进行<strong>加锁</strong>时，程序首先需要通过获取<code>acquire</code>锁来得到对数据操作、排他的权力</p><p>在操作完毕之后，还需要通过<code>release</code>进行锁的释放，以供其他程序使用</p></blockquote><ul><li><code>Redis</code>使用<code>WATCH</code>命令用以代替对数据进行加锁，<code>WATCH</code>只会在数据被其他客户端抢先修改了的情况下通知执行命令的这个客户端（通过<code>WatchError</code>异常），但不会阻止其他客户端对数据的修改，这样的加锁的行为也常称为<strong>乐观锁</strong></li></ul><a id="more"></a><!-- # Redis实现分布式锁以及利用乐观锁保证数据安全 发表于 2000-01-01 |  分类于 [Redis](https://lienze.tech/blog/categories/Redis/) --><ul><li>锁和范围<code>score</code>有关，为了让<code>Redis</code>存储的数据进行排他性访问，客户端需要一个锁，而这样的锁，是可以让所有的客户端都在看得见的范围，这个范围就是<code>Redis</code>本身，因此我们需要把锁构建在<code>Redis</code>里面。另一个方面，虽然有类似的<code>SETNX</code>命令可以实现<code>Redis</code>中的锁的功能，但他锁提供的机制并不完整，也不具备分布式锁的一些高级特性，还是得通过我们手动构建</li></ul><h3 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h3><ul><li>回顾一下<code>Multi</code>命令</li></ul><blockquote><p><code>Multi</code>命令用于标记一个事务块的开始</p><p>事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由<code>EXEC</code>命令原子性(<code>atomic</code>)地执行</p></blockquote><ul><li>回顾一下<code>WATCH</code>命令（<code>redis</code>在<code>2.2</code>之后加入了<code>watch</code>的功能）</li></ul><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; WATCH`命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，在`Python`中将会抛出`WatchError</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>监控一直持续到<code>EXEC</code>命令（事务中的命令是在<code>EXEC</code>之后才执行的，所以在<code>MULTI</code>命令后可以修改<code>WATCH</code>监控的键值）</p></blockquote><ul><li>当用户购买时，首先开启事务，通过<code>WATCH</code>监听用户库存，判断是否含有库存，如果含有，则库存数量减一，并执行任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先在redis中设置某商品apple 对应数量value值为1000</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sale</span><span class="params">()</span>:</span></span><br><span class="line">    rs = redis.Redis(host=host,port=<span class="number">6379</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> rs.pipeline() <span class="keyword">as</span> p: </span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">                通过管道方式进行连接</span></span><br><span class="line"><span class="string">                多条命令执行结束，一次性获取结果</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p.watch(<span class="string">'apple'</span>) <span class="comment"># 监听key值为apple的数据数量改变</span></span><br><span class="line">                count = int(rs.get(<span class="string">'apple'</span>))</span><br><span class="line">                print(<span class="string">'拿取到了苹果的数量: %d'</span> % count)</span><br><span class="line">                p.multi() <span class="comment"># 事务开始</span></span><br><span class="line">                <span class="keyword">if</span> count&gt; <span class="number">0</span> : <span class="comment"># 如果此时还有库存</span></span><br><span class="line">                    p.set(<span class="string">'apple'</span>, count - <span class="number">1</span>)</span><br><span class="line">                    p.execute() <span class="comment"># 执行事务</span></span><br><span class="line">                p.unwatch()</span><br><span class="line">                <span class="keyword">break</span> <span class="comment"># 当库存成功减一或没有库存时跳出执行循环</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e: <span class="comment"># 当出现watch监听值出现修改时，WatchError异常抛出</span></span><br><span class="line">                print(<span class="string">'[Error]: %s'</span> % e)</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># 继续尝试执行</span></span><br></pre></td></tr></table></figure><ul><li>到目前，通过<code>Watch</code>监听，结合事务的<code>MULTI</code>以及<code>EXEC</code>可以实现这样一个版本的锁，随着负载的不断增加，系统完成一次交易的重试次数也将会越来越大，完成一次交易需要等待的时间也将不断增加</li></ul><blockquote><p>可以看到，<code>Redis</code>在尝试完成一个事务的时候，可能会因为事务的失败而重复尝试重新执行，保证商品的库存量正确是一件很重要的事情，但是单纯的使用<code>WATCH</code>这样的机制在压力较大的情况下并不完美，那么接下来，就可以通过上锁来进行库存数量改变</p></blockquote><h3 id="SimpleLock"><a href="#SimpleLock" class="headerlink" title="SimpleLock"></a>SimpleLock</h3><blockquote><p>通过加锁的形式，可以解决以上<code>Watch</code>监控所导致的问题</p></blockquote><h4 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h4><ul><li><code>uuid</code>是什么</li></ul><blockquote><p>它是通过<code>MAC</code>地址、 时间戳、 命名空间、 随机数、 伪随机数来保证生成<code>ID</code>的唯一性</p><p><code>uuid</code>有着固定的大小<code>128</code>bit位，通常由<code>32</code>字节的字符串（十六进制）表示</p></blockquote><ul><li><code>uuid</code>的作用</li></ul><blockquote><p>很多应用场景需要一个<code>id</code>，但是又不要求这个<code>id</code>有具体的意义，仅仅用来标识一个对象</p><p>常见的用处有数据库表的<code>id</code>字段</p><p>另一个例子是前端的各种UI库，因为它们通常需要动态创建各种<code>UI</code>元素，这些元素需要唯一的<code>id</code>， 这时候就需要使用<code>UUID</code>了</p><p>例如：一个网站在存储视频、图片等格式的文件时，这些文件的命名方式就可以采用<code>UUID</code>生成的随机标识符，避免重名的出现</p></blockquote><blockquote><p><code>python</code>生成<code>uuid</code>数值可以通过以下方式</p></blockquote><hr><ul><li><code>uuid.uuid1([node[, clock_seq]])</code> ：基于时间戳</li></ul><blockquote><p>使用主机<code>ID</code>，序列号，和当前时间来生成<code>UUID</code>，可保证全球范围的唯一性</p><p>但由于使用该方法生成的<code>UUID</code>中包含有主机的网络地址，因此可能危及隐私，该函数有两个参数,</p><p>如果<code>node</code>参数未指定, 系统将会自动调用<code>getnode()</code>函数来获取主机的硬件地址，如果<code>clock_seq</code>参数未指定系统会使用一个随机产生的<code>14</code>位序列号来代替</p></blockquote><ul><li><code>uuid.uuid3(namespace, name)</code>：基于名字的<code>MD5</code>散列值</li></ul><blockquote><p>通过计算命名空间和名字的<code>MD5</code>散列值来生成<code>UUID</code>；可以保证同一命名空间中不同名字的唯一性和不同命名空间的唯一性，但同一命名空间的同一名字生成的<code>UUID</code>相同</p></blockquote><ul><li><code>uuid.uuid4()</code>：基于随机数</li></ul><blockquote><p>通过随机数来生成<code>UUID</code>，使用的是伪随机数有一定的重复概率</p></blockquote><ul><li><code>uuid.uuid5(namespace, name)</code>：基于名字的<code>SHA-1</code>散列值</li></ul><blockquote><p>通过计算命名空间和名字的<code>SHA-</code>散列值来生成<code>UUID</code>，算法与<code>uuid.uuid3()</code>相同.</p></blockquote><h4 id="RedisLock"><a href="#RedisLock" class="headerlink" title="RedisLock"></a>RedisLock</h4><blockquote><p>使用<code>Redis</code>构建锁非常简单，在<code>Redis</code>中，可以通过使用<code>SETNX</code>命令来实现，这个命令会在键不存在的情况下为吉键设置值，而锁要做的事情就是将一个随机生成的<code>128</code>位<code>UUID</code>设置位键的值，防止该锁被其他进程获取</p></blockquote><blockquote><p>如果程序在尝试获取锁的过程中失败，那么他将不断的进行重试，直到成功的<strong>取得锁</strong>或<strong>超过</strong>锁的持有<strong>超时时间</strong></p></blockquote><ul><li>初始化连接函数</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get<span class="constructor">_conn(<span class="params">host</span>,<span class="params">port</span>=6379)</span>:</span><br><span class="line">    rs = redis.<span class="constructor">Redis(<span class="params">host</span>=<span class="params">host</span>, <span class="params">port</span>=<span class="params">port</span>)</span></span><br><span class="line">  return rs</span><br></pre></td></tr></table></figure><ul><li>加锁函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_lock</span><span class="params">(rs, lock_name, expire_time=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        rs: 连接对象</span></span><br><span class="line"><span class="string">        lock_name: 锁标识</span></span><br><span class="line"><span class="string">        acquire_time: 过期超时时间</span></span><br><span class="line"><span class="string">        return -&gt; False 获锁失败 or True 获锁成功</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># print('获取锁...')</span></span><br><span class="line">    identifier = str(uuid.uuid4())</span><br><span class="line">    end = time.time() + expire_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> time.time() &lt; end:</span><br><span class="line">        <span class="comment"># 当获取锁的行为超过有效时间，则退出循环，本次取锁失败，返回False</span></span><br><span class="line">        <span class="keyword">if</span> rs.setnx(lock_name, identifier):  <span class="comment"># 尝试取得锁</span></span><br><span class="line">            <span class="comment"># print('锁已设置: %s' % identifier)</span></span><br><span class="line">            <span class="keyword">return</span> identifier</span><br><span class="line">        time.sleep(<span class="number">.001</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>加锁函数通过<code>SETNX</code>命令，尝试在锁不存在的i情况下，为键设置一个值，以此来获取锁</p><p>在获取锁失败的时候，会尝试在给定的时间内进行重试，一直到重新成功获取到或超过给定的实现</p></blockquote><ul><li>释放锁函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">release_lock</span><span class="params">(rs, lockname, identifier)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        rs: 连接对象</span></span><br><span class="line"><span class="string">        lockname: 锁标识</span></span><br><span class="line"><span class="string">        identifier: 锁的value值，用来校验</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    pipe = rs.pipeline(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pipe.watch(lockname)</span><br><span class="line">        <span class="comment"># print('当前获取到的锁:', rs.get(lockname).decode())</span></span><br><span class="line">        <span class="comment"># print('redis中实际锁的值:',identifier)</span></span><br><span class="line">        <span class="comment"># print(rs.get(lockname).decode() == identifier)</span></span><br><span class="line">        <span class="keyword">if</span> rs.get(lockname).decode() == identifier:</span><br><span class="line">            pipe.multi()  <span class="comment"># 开启事务</span></span><br><span class="line">            pipe.delete(lockname)</span><br><span class="line">            pipe.execute() <span class="comment"># print('锁已释放')</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 删除锁</span></span><br><span class="line">        pipe.unwatch()  <span class="comment"># 取消事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 删除失败</span></span><br></pre></td></tr></table></figure><blockquote><p>锁的<strong>删除操作</strong>很简单，只需要将对应锁的<code>key</code>值获取到的<code>uuid</code>结果进行判断验证，符合条件通过<code>delete</code>在<code>redis</code>中删除即可，此外当其他用户持有同名锁时，由于<code>uuid</code>的不同，经过验证后不会错误释放掉别人的锁</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def sale():</span><br><span class="line">    rs = get_conn(host=host)</span><br><span class="line">    <span class="built_in">start</span> = <span class="built_in">time</span>.<span class="built_in">time</span>() <span class="comment"># 程序启动时间</span></span><br><span class="line">    <span class="keyword">with</span> rs.pipeline() <span class="keyword">as</span> p:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            lock = acquire_lock(rs, <span class="string">'lock'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lock:  <span class="comment"># 持锁失败</span></span><br><span class="line">                continue</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                count = int(rs.<span class="built_in">get</span>(<span class="string">'apple'</span>)) <span class="comment"># 取量</span></span><br><span class="line">                p.<span class="built_in">set</span>(<span class="string">'apple'</span>, count<span class="number">-1</span>) <span class="comment"># 减量</span></span><br><span class="line">                p.execute() </span><br><span class="line">                print(<span class="string">'当前库存量: %s'</span> % count)</span><br><span class="line">                break</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                release_lock(rs, <span class="string">'lock'</span>, lock)</span><br><span class="line">    print(<span class="string">'[time]: %.2f'</span> % (<span class="built_in">time</span>.<span class="built_in">time</span>() - <span class="built_in">start</span>))</span><br></pre></td></tr></table></figure><h3 id="ExpireLock"><a href="#ExpireLock" class="headerlink" title="ExpireLock"></a>ExpireLock</h3><ul><li>在之前的锁中，还出现这样的问题，比如某个进程持有锁之后突然程序崩溃，那么会导致锁无法释放而其他进程无法持有锁继续工作，为了解决这样的问题，可以在获取锁的时候加上锁的<strong>超时功能</strong></li></ul><blockquote><p><code>Redis</code>中，可以通过<code>EXPIRE</code>命令为锁设置过期时间，<code>Redis</code>会自动释放超时的锁，以下是超时锁的定义模型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_expire_lock</span><span class="params">(rs, lock_name, expire_time=<span class="number">10</span>, locked_time=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        rs: 连接对象</span></span><br><span class="line"><span class="string">        lock_name: 锁标识</span></span><br><span class="line"><span class="string">        acquire_time: 过期超时时间</span></span><br><span class="line"><span class="string">        locked_time: 锁的有效时间</span></span><br><span class="line"><span class="string">        return -&gt; False 获锁失败 or True 获锁成功</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># print('获取锁...')</span></span><br><span class="line">    identifier = str(uuid.uuid4())</span><br><span class="line">    end = time.time() + expire_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> time.time() &lt; end:</span><br><span class="line">        <span class="comment"># 当获取锁的行为超过有效时间，则退出循环，本次取锁失败，返回False</span></span><br><span class="line">        <span class="keyword">if</span> rs.setnx(lock_name, identifier):  <span class="comment"># 尝试取得锁</span></span><br><span class="line">            <span class="comment"># print('锁已设置: %s' % identifier)</span></span><br><span class="line">            rs.expire(lock_name, locked_time)</span><br><span class="line">            <span class="keyword">return</span> identifier</span><br><span class="line">        time.sleep(<span class="number">.001</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>在其他数据库里面，加锁通常是一个自动执行的基本操作，而<code>Redis</code>的<code>WATCH</code>、<code>MULTI</code>和<code>EXEC</code>操作只是一个乐观锁；这种锁只会在数据被其他客户端抢先修改的情况下，通知加锁的客户端，让他撤销对于被监控数据的修改，而不会把数据真正的锁住</p><p>通过在客户端上面实现一个真正的锁，程序可以位用户带来更好的性能，更熟悉的编程概念、更简单易用的<code>API</code></p><p>于此同时，也要注意，<code>Redis</code>并不会自动使用我们自制的锁，我们必须自己使用这个锁来代替<code>WATCH</code>，从而保证数据的正确与一致性</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一般来说，对数据进行&lt;strong&gt;加锁&lt;/strong&gt;时，程序首先需要通过获取&lt;code&gt;acquire&lt;/code&gt;锁来得到对数据操作、排他的权力&lt;/p&gt;
&lt;p&gt;在操作完毕之后，还需要通过&lt;code&gt;release&lt;/code&gt;进行锁的释放，以供其他程序使用&lt;/p&gt;
&lt;/blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt;使用&lt;code&gt;WATCH&lt;/code&gt;命令用以代替对数据进行加锁，&lt;code&gt;WATCH&lt;/code&gt;只会在数据被其他客户端抢先修改了的情况下通知执行命令的这个客户端（通过&lt;code&gt;WatchError&lt;/code&gt;异常），但不会阻止其他客户端对数据的修改，这样的加锁的行为也常称为&lt;strong&gt;乐观锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Redis" scheme="http://laxe.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://laxe.top/2019/10/21/Vue/"/>
    <id>http://laxe.top/2019/10/21/Vue/</id>
    <published>2019-10-21T02:57:05.032Z</published>
    <updated>2019-10-21T02:58:19.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><blockquote><p><code>Vue.js</code>是前端三大新框架：<code>Angular.js</code>、<code>React.js</code>、<code>Vue.js</code>之一，<code>Vue.js</code>目前的使用和关注程度在三大框架中稍微胜出，并且它的热度还在递增</p><p><code>Vue</code>的核心库只关注视图层，<code>Vue</code>的目标是通过尽可能简单的<code>API</code>实现响应的数据绑定，在这一点上<code>Vue.js</code>类似于后台的模板语言</p><p><code>Vue</code>也可以将界面拆分成一个个的组件，通过组件来构建界面，然后用自动化工具来生成单页面(<code>SPA - single page application</code>)系统</p></blockquote><a id="more"></a><!-- # Vue 发表于 1970-01-05 |  分类于 [Web ](https://lienze.tech/blog/categories/Web/)， [Vue](https://lienze.tech/blog/categories/Web/Vue/) --><ul><li><code>Vue.js</code>官方文档： <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></li><li><code>vue.js</code>下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></li></ul><h3 id="npm配置cnpm"><a href="#npm配置cnpm" class="headerlink" title="npm配置cnpm"></a>npm配置cnpm</h3><ul><li><code>windows</code>下配置<code>cnmp</code>环境：</li></ul><blockquote><p>默认的使用<code>NPM</code>可能会因为网络问题而导致无法使用或延迟居高，可以使<code>npm</code>升级为<code>cnpm</code>，从国内淘宝镜像中加载所需的<code>npm</code>软件源</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure><ul><li>设置安装包缓存路径</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm<span class="built_in"> config </span><span class="builtin-name">set</span> cache <span class="string">"C:\nodejs\node_cache"</span></span><br></pre></td></tr></table></figure><ul><li>设置安装包位置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span><span class="string">"C:\nodejs\node_global"</span></span><br></pre></td></tr></table></figure><blockquote><p>之后使用命令安装的模块存储在<strong>C:\nodejs\node_global\node_modules</strong>里</p><p>请按照个人需求设置你的文件位置</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> cache <span class="string">"C:\nodejs\node_cache"</span></span><br></pre></td></tr></table></figure><h3 id="Vue部署"><a href="#Vue部署" class="headerlink" title="Vue部署"></a>Vue部署</h3><ul><li>安装<code>Vue</code></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> vue -g</span><br></pre></td></tr></table></figure><ul><li>安装<code>vue</code>脚手架</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><blockquote><p><code>-g</code>参数代表全局位置安装，这样可以在环境变量生效的情况下直接在命令行等工具下使用vue命令行进行项目的开启</p></blockquote><h3 id="vue-devtools调试工具"><a href="#vue-devtools调试工具" class="headerlink" title="vue-devtools调试工具"></a>vue-devtools调试工具</h3><blockquote><p><code>vue-devtools</code>可以方便开发者进行<code>Vue</code>中变量等信息的调试跟踪</p></blockquote><ul><li>下载<code>vue-devtools</code></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/vuejs/vue-devtools</span><br></pre></td></tr></table></figure><ul><li>进入到<code>vue-devtools</code>目录下安装依赖包</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">vue-devtools-dev</span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">install </span></span><br><span class="line"><span class="attr">cnpm</span> <span class="string">run build</span></span><br></pre></td></tr></table></figure><ul><li>注意：在进行调试工具安装时，首先需要修改<code>shells&gt;chrome</code>文件夹下的<code>mainifest.json</code>中的persistent为true</li><li>将插件目录下的<code>chrome</code>文件夹拖入到<code>chrome</code>浏览器的扩展程序下，记得打开调试模式</li></ul><blockquote><p>扩展程序可以通过浏览器访问</p></blockquote><p><a href="https://lienze.tech/blog/images/1561789924.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1561789924.png" alt="1561789924"></a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">chrome:</span><span class="comment">//extensions/</span></span><br></pre></td></tr></table></figure><h3 id="Vue-CDN"><a href="#Vue-CDN" class="headerlink" title="Vue-CDN"></a>Vue-CDN</h3><blockquote><p>除去通过<code>npm</code>安装的方式来使用<code>vue</code>，还可以直接使用<code>cdn</code>中的<code>vue.js</code>文件</p></blockquote><ul><li>vue.js：开发版本，包含了有帮助的命令行警告</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>vue.min.js：生产环境版本，优化了尺寸和速度</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue语法"><a href="#Vue语法" class="headerlink" title="Vue语法"></a>Vue语法</h3><blockquote><p>每个<code>vue</code>应用都是通过实例化一个新的<code>vue</code>对象开始的</p></blockquote><ul><li>创建第一个模板语法：</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123; message &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 这个也叫做插值表达式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">var vm = new Vue(&#123; // vm这个变量不允许使用连字符，可以使用下划线，比如vm-data是不允许的</span><br><span class="line">    el: <span class="string">"#content"</span>, </span><br><span class="line">    // 对<span class="built_in">应document</span>中的一个标签，当vue对象创建后，这个标签内的区域就被接管</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"这是vue里的变量"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当一个<code>vue</code>实例被创建时，<code>vue</code>的响应式系统中加入了对其<code>data</code>对象中能找到的所有属性</li><li>当这些属性值被改变时，视图也会发生<strong>相应</strong>，并将对应属性更新为新的值</li><li>也可以通过定义函数来改变实例中<code>data</code>对象中的数据，数据改变，视图中的数据也将改变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="ChangeMsg"&gt;改变&lt;/</span>button&gt;</span><br><span class="line">    &lt;!-- 绑定点击事件为定义好的vue函数 --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">window.onload = function()&#123;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: "#app",</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            message: "我对应的是message的变量"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123; /</span><span class="regexp">/ 定义一个函数 并绑定在按钮的点击事件上</span></span><br><span class="line"><span class="regexp">            ChangeMsg:function()&#123;</span></span><br><span class="line"><span class="regexp">                this.message = "我被改变了";</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 修改当前实例中的message变量</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的代码，将在点击按钮时，使当前的<code>message</code>变量发生变化</p><p>``这样的语法有点类似一些<code>Web</code>框架，比如<code>django</code>的模板语言中的模板变量</p></blockquote><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><blockquote><p>除了直接定义某个变量的固定值进行页面渲染，模板变量还支持通过函数的返回值进行赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; classType &#125;&#125;学习&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; describe() &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>, <span class="comment">// getElementById('app')</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            classType: <span class="string">"vue"</span>,</span><br><span class="line">            content: <span class="string">"这是vue的一个测试"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            describe:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这是一个函数的返回值"</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue模板指令"><a href="#Vue模板指令" class="headerlink" title="Vue模板指令"></a>Vue模板指令</h3><ul><li>模板语法指的是如何将数据放入html中</li></ul><blockquote><p><strong>Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层 Vue 实例的数据</strong></p><p><strong>所有 Vue.js的模板都是合法的 HTML ，所以能被遵循规范的浏览器和HTML 解析器解析</strong></p></blockquote><ul><li>插入值，模板变量</li></ul><blockquote><p>数据绑定最常见的形式就是使用<code>Mustache</code>语法(双大括号) 的文本插值，也就是上面示例中的``</p></blockquote><h4 id="内容绑定"><a href="#内容绑定" class="headerlink" title="内容绑定"></a>内容绑定</h4><h5 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h5><blockquote><p>将内容按照<code>html</code>格式进行插入</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> v-html=<span class="string">"contetn"</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">var</span> vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"&lt;b&gt;段落标签&lt;/b&gt;文本内容"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在网站上动态渲染任意<code>HTML</code>是非常危险的，因为容易导致<code>XSS</code>攻击</p><p><code>v-html</code>一般只用在可信内容中，<strong>永不</strong>用在用户提交的内容上</p></blockquote><h5 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h5><blockquote><p>将内容按照文本格式进行插入，但会覆盖原有标签内的内容，不会有加载的闪烁问题</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"contetn"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="xquery">&#123;&#123; gender ? <span class="string">'男'</span> : <span class="string">'女'</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- ok? true:false --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      gender:<span class="built_in"> true</span>, // 变量值<span class="built_in">为true</span>时，显示模板变量中左边的值</span><br><span class="line">      content: <span class="string">"&lt;b&gt;段落标签&lt;/b&gt;文本内容"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h5><blockquote><p>解决使用差值表达式时页面渲染过程，由于变量没有初始化而导致的闪烁问题</p></blockquote><blockquote><p>通俗的来说，比如<code>变量的实际内容没有被创建，那么此时页面只会展示出</code>这样的效果，之后当变量初始化之后，``将变化为实际的值，此时变化的过程我们称作闪烁</p></blockquote><blockquote><p>这个指令可以隐藏未编译的标签直到实例准备完毕</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: "#app",</span></span><br><span class="line"><span class="xml">        data:&#123;</span></span><br><span class="line"><span class="xml">            message: "测试",</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>在上面的代码中，如果网速够慢的清空下，页面首先加载显示出的内容是``</li><li><strong>解决办法</strong>：通过<code>v-clock</code>指令，在使用到模板变量的标签上写入，并设置一个<code>v-clock</code>的类样式</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    [v-cloak]&#123;</span></span><br><span class="line"><span class="xml">        display: none;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><blockquote><p>如果我们需要设置的模板变量是一个属性，比如<code>a</code>标签的<code>href</code>属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a v-bind:href=<span class="string">"message"</span>&gt;连接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a :href="message +'abc'"&gt;连接&lt;/</span>a&gt;</span><br><span class="line">    &lt;!-- 属性内的模板变量写法已被移除，使用v-bind:attr 或 :attr --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">    message: "https:/</span><span class="regexp">/www.baidu.com"</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>v-bind</code>指令或者<code>:</code>的简写对某个<code>dom</code>元素的属性进行绑定</p><p>在下面还有更加详细的属性绑定示例</p></blockquote><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><h5 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h5><blockquote><p>给元素绑定对应事件，以下是对于点击事件的绑定</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"show"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="show"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">new Vue(&#123;</span></span><br><span class="line"><span class="regexp">el: "#app",</span></span><br><span class="line"><span class="regexp">    method: &#123;</span></span><br><span class="line"><span class="regexp">    show: function()&#123;</span></span><br><span class="line"><span class="regexp">alert("弹一下")</span></span><br><span class="line"><span class="regexp">        &#125;    </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h4><blockquote><p>这里有一个跑马灯效果可以玩耍</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h3 v-html=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"start"</span>&gt;开始&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="stop"&gt;停止&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#app",</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">        message: "这是一个跑马灯",</span></span><br><span class="line"><span class="regexp">        sT: null, /</span><span class="regexp">/ 定时器实例</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods:&#123;</span></span><br><span class="line"><span class="regexp">        work()&#123;</span></span><br><span class="line"><span class="regexp">            this.message = this.message.substring(1) + this.message[0] </span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 循环定时器所作的事情</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        start()&#123;</span></span><br><span class="line"><span class="regexp">            if (this.sT==null) &#123; /</span><span class="regexp">/ 判断此时是否已有定时器开启</span></span><br><span class="line"><span class="regexp">                console.log("开启定时器")</span></span><br><span class="line"><span class="regexp">                this.sT = setInterval(this.work,400)</span></span><br><span class="line"><span class="regexp">            &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                console.log("已经开启 不在开启")</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        stop()&#123; /</span><span class="regexp">/ 关闭定时器 设置定时器变量为null</span></span><br><span class="line"><span class="regexp">            console.log("关闭定时器")</span></span><br><span class="line"><span class="regexp">            clearInterval(this.sT)</span></span><br><span class="line"><span class="regexp">            this.sT = null</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="绑定事件修饰符"><a href="#绑定事件修饰符" class="headerlink" title="绑定事件修饰符"></a>绑定事件修饰符</h4><h5 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h5><blockquote><p>比如一个按钮在一个<code>div</code>中，并且按钮和<code>div</code>均有自己的事件，那么此时点击按钮，事件会像冒泡一样从按钮开始一直到<code>div</code>进行触发，<code>.stop</code>修饰符用来阻止默认的事件触发行为</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fDiv"</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"fBtn"</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#fDiv"</span>, <span class="comment">// 控制区域</span></span></span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                divClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div被点击了"</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                btnClick()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>.stop</code>修饰阻止冒泡</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"fDiv"</span> @click=<span class="string">"divClick"</span>&gt;</span><br><span class="line">    &lt;button <span class="built_in">id</span>=<span class="string">"fBtn"</span> @click.stop=<span class="string">"btnClick"</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h5><blockquote><p>比如像<code>a</code>标签这样的，在点击时他有默认的跳转动作，可以通过<code>.prevent</code>阻止该默认行为</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"fDiv"</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">"https://www.baidu.com"</span> @click.prevent=<span class="string">"aLink"</span>&gt;去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue()&#123;</span><br><span class="line">    el: <span class="string">"#fDiv"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    aLink()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接被点击"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="捕获事件"><a href="#捕获事件" class="headerlink" title="捕获事件"></a>捕获事件</h5><blockquote><p>默认的事件触发处理机制是冒泡机制，capture代表具有该修饰的事件，会优先触发，脱离冒泡顺序；</p><p>也可理解为谁有该修饰符，先触发谁的事件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fDiv"</span> @<span class="attr">click.capture</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"fBtn"</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#fDiv"</span>, <span class="comment">// 控制区域</span></span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            divClick()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"div被点击了"</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            btnClick()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="自身事件"><a href="#自身事件" class="headerlink" title="自身事件"></a>自身事件</h5><blockquote><p>与<code>capture</code>和冒泡不同，<code>.self</code>只有是自身触发的当前的事件才真正执行处理的回调函数</p><p>并且<code>.self</code>只会阻止当前元素的事件触发行为</p></blockquote><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keywords">div</span> <span class="symbol">id</span>=<span class="string">"fDiv"</span> @click.<span class="literal">self</span>=<span class="string">"divClick"</span>&gt;</span><br><span class="line">    &lt;button <span class="symbol">id</span>=<span class="string">"fBtn"</span> @click.<span class="literal">self</span>=<span class="string">"btnClick"</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/<span class="keywords">div</span>&gt;</span><br><span class="line"><span class="comment">// 与上同</span></span><br></pre></td></tr></table></figure><h5 id="单次事件"><a href="#单次事件" class="headerlink" title="单次事件"></a>单次事件</h5><blockquote><p>使用<code>.once</code>只触发一次事件函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"fDiv"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">"https://www.baidu.com"</span> @click.prevent.once=<span class="string">"aLink"</span>&gt;去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 连接无法跳转的阻止事件 只会出现一次 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue()&#123;</span><br><span class="line">    el: <span class="string">"#fDiv"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    aLink()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接被点击"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单双向绑定"><a href="#表单双向绑定" class="headerlink" title="表单双向绑定"></a>表单双向绑定</h3><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>使用v-model指令可以在表单<code>input</code>、<code>textarea</code>以及<code>select</code>元素上创建双向数据绑定</p><p>根据表单上的值，自动更新模板变量中的值</p></blockquote><blockquote><p><code>v-model</code>会忽略表单的初始值，比如：<code>checked</code>、<code>value</code>、<code>selected</code>，如果需要的话，应该在<code>javascript</code>中首先声明初始值</p></blockquote><h5 id="text"><a href="#text" class="headerlink" title="text"></a><strong>text</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"这是个表单内容"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a><strong>textarea</strong></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h3</span> v-html=<span class="string">"message"</span>&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;<span class="selector-tag">textarea</span> v-model=<span class="string">"message"</span>&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><h5 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a><strong>checkbox</strong></h5><ul><li><strong>单个复选框</strong>：数据为绑定为<code>true</code>和<code>false</code>的布尔值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                checked: <span class="literal">true</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>多个复选框</strong>：选中的结果会绑定到同一个数组，将保存的<code>v-model</code>变量创建为数组</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"apple"</span>  <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>苹果</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"banana"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>香蕉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span>橘子</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                checked: <span class="keyword">new</span> <span class="built_in">Array</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="radio"><a href="#radio" class="headerlink" title="radio"></a><strong>radio</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"picked"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"junior"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                picked: <span class="string">"哈哈哈哈"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="select"><a href="#select" class="headerlink" title="select"></a><strong>select</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"selected"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>你想去哪<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"山西"</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上海"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                selected: <span class="string">""</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="selects"><a href="#selects" class="headerlink" title="selects"></a><strong>selects</strong></h5><blockquote><p>设置<code>select</code>标签的<code>multiple</code>属性即可设置为多选下拉菜单，按着<code>ctrl</code>键可以多选</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"selecteds"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span> <span class="attr">v-model</span>=<span class="string">"selecteds"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上衣"</span>&gt;</span>上衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"裤子"</span>&gt;</span>裤子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"鞋"</span>&gt;</span>鞋<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                selecteds: <span class="keyword">new</span> <span class="built_in">Array</span>, <span class="comment">// 多重数据一般都要保存成数组</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h5><blockquote><p>默认情况下，<code>v-model</code>在<code>input</code>和<code>textarea</code>表单中进行同步输入框的改动</p><p>添加了<code>.lazy</code>修饰符之后，对应的<code>v-model</code>绑定事件触发机制将变为<code>change</code>事件，只有在光标失去焦点时会触发</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">"这是个表单内容"</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h5><blockquote><p>如果用户希望将输入表单的内容处理为<code>Number</code>类型，可以使用<code>.number</code>给<code>v-model</code>进行修饰；如果表单字符串无法被处理为数字，则返回原始的值</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h3</span> v-html=<span class="string">"typeof message"</span>&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> v-model.number=<span class="string">"message"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h5><blockquote><p>使用<code>.trim</code>可以自动过滤输入框的首尾空格</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过查看另一个表单中同步的缩进 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><blockquote><p>当某些情况下，无法确定表单中所代表的属性值，可以使用<code>v-bind</code>进行动态绑定，<code>v-model</code>获取到的表单输入此时则是我们定义的<code>v-bind</code>属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">:value</span>=<span class="string">"choiceA"</span>&gt;</span> A</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">:value</span>=<span class="string">"choiceB"</span>&gt;</span> B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                message: <span class="string">""</span>, <span class="comment">// 表单绑定变量</span></span></span><br><span class="line"><span class="actionscript">                choiceA: <span class="string">"Yes!"</span>, <span class="comment">// 属性绑定变量，未来不需要修改标签中的value值即可动态修改</span></span></span><br><span class="line"><span class="actionscript">                choiceB: <span class="string">"No!"</span>,</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li>关键词：<code>computed</code></li></ul><blockquote><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的</p><p>在模板中放入太多的逻辑会让模板过重且难以维护</p><p>也就是说，某些时候页面中的模板变量如果需要复杂的运算处理，应该使用<strong>计算属性</strong>，而不是直接在模板位置进行计算。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function () &#123;</span></span><br><span class="line"><span class="xml">            var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">                el: "#container",</span></span><br><span class="line"><span class="xml">                data: &#123;</span></span><br><span class="line"><span class="xml">                    String1:"这是一个字符串",</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                methods: &#123;</span></span><br><span class="line"><span class="xml">                    MreverseString()&#123;</span></span><br><span class="line"><span class="xml">                        return this.String1.split("").reverse().join("")</span></span><br><span class="line"><span class="xml">                    &#125; // 定义一个函数进行字符串逆置</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                computed: &#123;</span></span><br><span class="line"><span class="xml">                    CreverseString()&#123;</span></span><br><span class="line"><span class="xml">                        return this.String1.split("").reverse().join("")</span></span><br><span class="line"><span class="xml">                    &#125; // 定义一个计算属性进行字符串逆置</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个字符串:</span><span class="template-variable">&#123;&#123; String1 &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; String1.split("").reverse().join("") &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; CreverseString &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 计算属性直接写入函数名 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>他的逆置:</span><span class="template-variable">&#123;&#123; MreverseString() &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 普通methods函数调用需加括号 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：虽然计算属性和函数都可以达成同样的目的，但是<code>computed</code>会缓存结果，计算属性如果发现依赖的属性<code>message</code>未发生改变，再次访问计算属性不会重复运算函数，而是直接利用已有结果；如果依赖数据发生改动，计算属性函数才会重新运算。</li><li>在函数及计算属性中添加日志输出即可看到这个效果：</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    MreverseString() &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">"MreverseString被运算了"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.String1.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">CreverseString() &#123;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">"CreverseString被运算了"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.String1.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在终端下进行计算属性以及函数的访问即可看到效果。</li></ul><h4 id="计算属性SetAttr"><a href="#计算属性SetAttr" class="headerlink" title="计算属性SetAttr"></a>计算属性SetAttr</h4><blockquote><p>默认的计算属性只有获取<code>getattr</code>的方式，我们可以手动为他添加一个<code>setter</code></p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    CreverseStrin<span class="variable">g:</span> &#123;</span><br><span class="line">        ge<span class="variable">t:</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">            <span class="keyword">return</span> this.String1.<span class="keyword">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="keyword">join</span>(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">se</span><span class="variable">t:</span> <span class="function"><span class="keyword">function</span><span class="params">(val)</span>&#123;</span></span><br><span class="line">            this.String1 = val.<span class="keyword">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="keyword">join</span>(<span class="string">""</span>)</span><br><span class="line">            // 如果当前的逆置之后字符串为val，那么原本的字符串需要再颠倒一次</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h3><blockquote><p>侦听属性的作用是侦听某些属性的变化，从而做相应的操作，进行对数据变化的相应，</p><p>侦听属性是一个对象（字典），<code>key</code>值是要监听的元素，值是当监听的元素发生改变时要执行的函数；</p><p>监听函数有两个参数，一个是当前值，另一个是变化后的值</p></blockquote><ul><li>比如监听一个变量的变化</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                content: "", // 表单内容</span></span><br><span class="line"><span class="xml">                count: 0, // 记录表单内用户敲了多少次</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            watch:&#123;</span></span><br><span class="line"><span class="xml">                content:function (oldVal,newVal)&#123;</span></span><br><span class="line"><span class="xml">                    // 只要在文本框输入内容影响到了age数据发生改变，就会触发</span></span><br><span class="line"><span class="xml">                    this.count += 1</span></span><br><span class="line"><span class="xml">                &#125;，</span></span><br><span class="line"><span class="xml">            &#125;，</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>你敲了:</span><span class="template-variable">&#123;&#123; count &#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的年纪"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="属性绑定-1"><a href="#属性绑定-1" class="headerlink" title="属性绑定"></a>属性绑定</h3><blockquote><p>使用<code>v-bind:class</code>指令来设置元素的class属性；</p><p>属性表达式的类型可以是字符串、对象或数组</p></blockquote><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><blockquote><p>可以通过为元素绑定一个数组，用来为元素设置单个或多个样式，类名在数组中用单引号</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fontBold</span> &#123;</span></span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.fontRed</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['fontBold','fontRed']"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h4><blockquote><p>可以通过为元素绑定一个对象，对象的key是样式类，对象的value是true或false来动态切换class</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                flag: <span class="literal">true</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                toggle() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.flag)&#123; <span class="comment">// 判断当前toggle变量的属性，对称变换</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.flag = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.flag = <span class="literal">true</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;fontBold: flag&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;flag? fontBold:''&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三元表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><blockquote><p>使用<code>v-bind:style</code>语法，为元素绑定样式</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;color:'red','font-weight':'bold'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    一段文字</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>也可以在<code>vue</code>的<code>data</code>中定义一个对象，用来描述样式，其中带有连字符的样式属性要加引号</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> :style=<span class="string">"styleObj"</span>&gt;一段文字&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">styleObj: &#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="string">'red'</span>,</span><br><span class="line"><span class="string">'font-weight'</span>:<span class="string">'bold'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><code>data</code>中的对象也可以通过数组类型绑定到元素上</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[styleObj1,styleObj2]"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 对于js的样式绑定不需要加引号，因为就是一个变量 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">styleObj1: &#123;</span><br><span class="line">    border: <span class="string">'1px solid gray'</span>,</span><br><span class="line">    width: <span class="string">'100px'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">    background: <span class="string">'black'</span>,</span><br><span class="line">    color: <span class="string">'blue'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>通过条件指令可以控制元素的显示及隐藏，或者说叫做创建和销毁</p></blockquote><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><blockquote><p><code>v-if</code>指令用于条件性的渲染一块内容。这块内容只会在指令的表达式返回<code>truthy</code>值的时候渲染</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"oh3"</span>&gt;</span>h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"gender === 'girl'"</span>&gt;</span>你是女的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"gender === 'boy'"</span>&gt;</span>你是男的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>不男不女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                oh3:<span class="string">"a"</span>,</span></span><br><span class="line"><span class="actionscript">                gender: <span class="string">'other'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>truthy</code>和<code>ture</code>的区别：</li><li>隐含有<code>true</code>属性的变量不可以认为它是<code>true</code>，它不是<code>boolean</code>类型</li></ul><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><blockquote><p>与<code>v-if</code>不同的是，<code>v-show</code> 的元素始终会被渲染并保留在<code>DOM</code>中</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; v-show` 只是简单地切换元素的`CSS`属性 `display</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"oh3"</span>&gt;</span>h3标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-show</span>=<span class="string">"oh4"</span>&gt;</span>h4标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                oh3:<span class="string">"1"</span>, <span class="comment">// v-if 在该变量不为真时直接消失在document中</span></span></span><br><span class="line"><span class="actionscript">                oh4:<span class="string">"1"</span>, <span class="comment">// v-show 处理不为真的变量条件 绑定元素不会消失</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><blockquote><p>把一个数组对应为一组元素</p><p>用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染</p></blockquote><blockquote><p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，<code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function()&#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                users: [</span></span><br><span class="line"><span class="xml">                    &#123;name:"张三",age:18&#125;,</span></span><br><span class="line"><span class="xml">                    &#123;name:"李四",age:20&#125;,</span></span><br><span class="line"><span class="xml">                    &#123;name:"王五",age:19&#125;,</span></span><br><span class="line"><span class="xml">                ]</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>v-for还可以支持将当前循环索引作为渲染时的第二个参数，第二个参数为访问索引位置</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>  v-<span class="keyword">for</span>=<span class="string">"(user,index) in users"</span>&gt;</span><br><span class="line">    &#123;&#123; index &#125;&#125;:&#123;&#123; user<span class="selector-class">.age</span> &#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">    users: [</span><br><span class="line">        &#123;name:<span class="string">"张三"</span>,age:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;name:<span class="string">"李四"</span>,age:<span class="number">20</span>&#125;,</span><br><span class="line">        &#123;name:<span class="string">"王五"</span>,age:<span class="number">19</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>使用<code>v-for</code>迭代访问一个对象</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"key in myself"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123;<span class="built_in"> key</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 当v-for渲染时只有一个参数，此时参数为value值 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">myself : &#123;</span><br><span class="line">   <span class="built_in"> name</span>:<span class="string">"赵六"</span>,</span><br><span class="line">    age:<span class="string">"17"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code>支持最多三个参数，同时获取遍历对象的<code>key</code>和<code>value</code>值，以及<code>index</code>索引位置</li></ul><blockquote><p>要注意的是，此时的<code>key</code>和<code>value</code>和<code>python</code>中的顺序是颠倒的，<code>key</code>在后，<code>value</code>在前</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in myself"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;&#123; index &#125;</span><span class="xml">&#125;: </span><span class="xquery">&#123;&#123;<span class="built_in"> key</span> &#125;</span><span class="xml">&#125; - </span><span class="xquery">&#123;&#123; <span class="keyword">value</span> &#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">myself : &#123;</span><br><span class="line">   <span class="built_in"> name</span>:<span class="string">"孙七"</span>,</span><br><span class="line">    age:<span class="string">"17"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code>进行一段取值</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; n &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 1 2 3 4 5 6 7 8 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="选项卡练习"><a href="#选项卡练习" class="headerlink" title="选项卡练习"></a>选项卡练习</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                choicId: <span class="literal">null</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    li&#123;</span><br><span class="line">        list-style-type: none;</span><br><span class="line">        border: 3px outset lightgreen;</span><br><span class="line">        width: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:lightblue</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">        border: 3px inset gray;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 1"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 2"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 3"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"choicId = 4"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 1"</span>&gt;</span>aaaaaaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 2"</span>&gt;</span>bbbbbbbbbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 3"</span>&gt;</span>cccccccccc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"choicId == 4"</span>&gt;</span>dddddddddd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>js</code>中两个等号和三个等号的区别：</li></ul><blockquote><p><code>==</code>表示： 如果两边值的类型不同的时候，是要先先进行类型转换后，才能做比较；<code>equality</code>等同</p></blockquote><blockquote><p><code>===</code>表示：不需要做类型转换，如果两边值的类型不同，就表示一定是不等的<code>identity</code>恒等</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><code>Vue</code>无法检测到对于数组的索引设置及长度修改以及对于对象属性的删除或添加</p><p>但是可以通过以下方式进行属性添加触发状态更新</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(<span class="variable">$vm</span><span class="selector-class">.Object</span>,<span class="string">"key"</span>,<span class="string">"val"</span>) <span class="comment">// 对于对象 这样的添加方式可以触发状态更新</span></span><br><span class="line">Vue.set(<span class="variable">$vm</span><span class="selector-class">.Array</span>, index, newVal) <span class="comment">// 对于数组 添加元素 触发状态更新</span></span><br><span class="line"><span class="comment">// vm.items.splice(newLength) // 设置数组长度</span></span><br></pre></td></tr></table></figure><ul><li><code>javascript.splice(where, num, [additem1,additem2...] )</code>：删除或添加元素</li></ul><blockquote><p>此外，当<code>v-for</code>与<code>v-if</code>同时使用时，<code>v-for</code>有更高的优先级，这会造成重复遍历得到的元素都要在做一次<code>v-if</code>的判断，如果我们是为了有目的判断当前是否需要渲染这个元素，或是跳过这个循环，可以将<code>v-if</code>放在外层元素，比如<code>template</code>标签中，(<code>template</code>标签无实际意义，默认不展示，但是可以起到包裹作用)</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p><code>Vue.js</code>允许你自定义过滤器，可被用于一些常见的文本，对它们进行格式化</p></blockquote><blockquote><p>过滤器可以用在两个地方：<strong>双花括号插值和 v-bind 表达式</strong> (后者从 2.1.0+ 开始支持)</p><p>过滤器应该被添加在<code>JavaScript</code>表达式的尾部，由<code>管道</code>符号指示</p></blockquote><ul><li>语法</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; message | filter &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:type</span>=<span class="string">"message | filter"</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>过滤器本质上是一个函数，比如我们定义一个将表单输入的内容中所有的字母变大写的过滤器</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>展示: </span><span class="template-variable">&#123;&#123; message | toUpper &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    window.onload = function () &#123;</span></span><br><span class="line"><span class="xml">        var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el: "#container",</span></span><br><span class="line"><span class="xml">            data: &#123;</span></span><br><span class="line"><span class="xml">                message: "",</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            filters: &#123;</span></span><br><span class="line"><span class="xml">                toUpper: function (value) &#123;</span></span><br><span class="line"><span class="xml">                    if (!value) return '' // 字符串内容为空 直接返回</span></span><br><span class="line"><span class="xml">                    console.log("正在变大小")</span></span><br><span class="line"><span class="xml">                    return String(value).toUpperCase()</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>过滤器函数也可以有多个参数</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message |<span class="built_in"> filter</span>(arg1, arg2) &#125;&#125;</span><br><span class="line">// message 第一个参数</span><br><span class="line">// arg1 第二个参数</span><br><span class="line">// arg2 第三个参数</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>展示: </span><span class="xquery">&#123;&#123; message | toLong(<span class="string">"| "</span>,<span class="string">" |"</span>) &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">filters: </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    toLong(<span class="keyword">value</span>,arg1,arg2)&#123;</span></span><br><span class="line"><span class="xquery">        <span class="keyword">if</span> (!<span class="keyword">value</span>) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> arg1 + <span class="keyword">value</span> + arg2</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Vue实例生命周期"><a href="#Vue实例生命周期" class="headerlink" title="Vue实例生命周期"></a>Vue实例生命周期</h3><blockquote><p>每个<code>Vue</code>实例在被创建时都要经过一系列的初始化过程</p><p>例如：需要设置数据监听、编译模板、将实例挂载到<code>DOM</code>并在数据变化时更新<code>DOM</code>等</p><p>同时在这个过程中会自动运行一些叫做生命周期钩子的函数，我们可以使用这些函数，在实例的不同阶段加上我们需要的代码，实现特定的功能</p></blockquote><ul><li><code>beforeCreate</code>：数据还没有监听，没有绑定到<code>vue</code>对象实例，同时也没有挂载对象</li><li><code>created</code>：数据已经绑定到了对象实例，但是还没有挂载对象</li><li><code>beforeMount</code>：模板已经编译好了，根据数据和模板已经生成了对应的元素对象，将数据对象关联到了对象的<code>$el</code>属性</li></ul><blockquote><p><code>$el</code>属性是一个<code>HTMLElement</code>对象，也就是这个阶段，<code>vue</code>实例通过原生的<code>createElement</code>等方法来创建这个<code>html</code>片段，准备注入到我们<code>vue</code>实例指明的<code>el</code>属性所对应的挂载点</p></blockquote><ul><li><code>mounted</code>： 将<code>$el</code>的内容挂载到了<code>el</code>，相当于我们在<code>jQuery</code>执行了<code>$(el).html($el)</code>，生成页面上真正的<code>dom</code></li></ul><blockquote><p>上面我们就会发现页面的元素和我们<code>$el</code>的元素是一致的；在此之后，我们能够用方法来获取到<code>el</code>元素下的<code>dom</code>对象，并进行各种操作</p></blockquote><ul><li><code>beforeUpdate</code>：数据发生变化时调用</li><li><code>updated</code>：由于数据更改导致的虚拟<code>DOM</code>重新渲染和打补丁，在这之后会调用该钩子</li><li><code>beforeDestroy</code>：<code>Vue</code>实例销毁前</li><li><code>destroyed</code>：<code>Vue</code>实例销毁后</li></ul><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> window.<span class="variable">$vm</span>.<span class="variable">$destroy</span>()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li>一大段代码进行钩子函数的调用过程监控</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showData</span><span class="params">(process, vm)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(process)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"vue数据:"</span>, vm.message) <span class="comment">// 当前Vue中的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Vue挂载el:"</span>) <span class="comment">// Vue接管的元素</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm.$el) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"真实Dom:"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"container"</span>).innerHTML)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'-----------------'</span>)</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="comment">// 这个函数用来输出相关信息的</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#container"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">"aaaaa"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeCreate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"创建Vue实例前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"创建Vue实例后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"挂载到Dom前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        mounted: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"挂载到Dom后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeUpdate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"数据发生变化时"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        updated: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"数据发生变化后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        beforeDestroy: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"Vue实例销毁前"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        destroyed: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            showData(<span class="string">"Vue实例销毁后"</span>, <span class="keyword">this</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h4><blockquote><p><code>ES6</code>是<code>JavaScript</code>语言的新版本，它也可以叫做<code>ES2015</code>，之前学习的<code>JavaScript</code>属于<code>ES5</code>，<code>ES6</code>在它的基础上增加了一些语法</p><p><code>ES6</code>是未来<code>JavaScript</code>的趋势，而且<code>vue</code>组件开发中会使用很多的<code>ES6</code>的语法，所以掌握这些常用的<code>ES6</code>语法是必须的</p></blockquote><h5 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h5><ul><li><code>let</code>：定义封闭作用域的变量，并且变量只能声明一次</li><li><code>const</code>：定义封闭作用域的常量，并且变量只能声明一次</li></ul><blockquote><p><code>let</code>和<code>const</code>是新增的声明变量的开头的关键字，在这之前，变量声明是用<code>var</code>关键字</p><p>这两个关键字和<code>var</code>的区别是，它们声明的变量没有<strong>预解析</strong>，无法脱离定义空间使用</p><p><code>let</code>和<code>const</code>的区别是，<code>let</code>声明的是一般变量，<code>const</code>申明的常量，不可修改</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">console.log(a) <span class="comment">// undefined</span></span><br><span class="line">console.log(b) <span class="comment">// b is not defined</span></span><br><span class="line">console.log(c) <span class="comment">// c is not defined</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> =  <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">2</span></span><br><span class="line">let <span class="selector-tag">b</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// let b = 3 // Identifier 'b' has already been declared</span></span><br><span class="line">const c = <span class="number">3</span></span><br><span class="line"><span class="comment">// const c = 4 // Identifier 'c' has already been declared</span></span><br><span class="line">c = <span class="number">4</span> <span class="comment">//  Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><blockquote><p>可以把箭头函数理解成匿名函数的第二种写法，箭头函数的作用是可以在对象中绑定<code>this</code></p><p>解决了<code>JavaScript</code>中<code>this</code>指定混乱的问题</p></blockquote><ul><li>定义函数的一般方式</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名赋值创建函数</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>箭头函数的写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这样的函数在嵌套时，会自动绑定外部作用域下的this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 一个参数时，可以省略参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#container"</span>,</span><br><span class="line">        data: &#123; <span class="attr">message</span>: <span class="string">"abcdef"</span>, &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"这是show函数:"</span>, <span class="keyword">this</span>.message),</span><br><span class="line">                    func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"我是内部函数:"</span>, <span class="keyword">this</span>.message)</span><br><span class="line">                &#125;,</span><br><span class="line">                    func(), <span class="comment">// 调用一下这个内部函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"show"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h4><blockquote><p>组件<code>Component</code>是<code>Vue.js</code>最强大的功能之一</p></blockquote><blockquote><p>组件可以扩展<code>HTML</code>元素，<strong>封装可重用的代码</strong></p><p>所有的<code>Vue</code>组件同时也都是<code>Vue</code>的实例，所以可接受相同的选项对象（除了一些根级特有的选项）并提供相同的生命周期钩子</p></blockquote><h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><ul><li>注册一个全局组件语法格式如下</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>component(tagName, options)</span><br><span class="line"><span class="comment">// tagName：组件名</span></span><br><span class="line"><span class="comment">// options：配置选项</span></span><br></pre></td></tr></table></figure><ul><li>比如这样一个全局组件</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'button_show'</span>, &#123;</span><br><span class="line">    <span class="attribute">data</span>: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            <span class="attribute">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="comment">// 当前组件会需要的数据，定义为函数的返回值</span></span><br><span class="line">    <span class="attribute">template</span>: <span class="string">'&lt;button @click="count++"&gt;按钮:&#123;&#123; count &#125;&#125;&lt;/button&gt;'</span></span><br><span class="line">    <span class="comment">// 组件的标签模板</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>接下来可以在任何<code>Vue</code>接管的元素中使用该组件，</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;button_show&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button_show</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: "#container",</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="data必须是函数"><a href="#data必须是函数" class="headerlink" title="data必须是函数"></a>data必须是函数</h5><blockquote><p>组件就是<code>vue</code>的实例，所有<code>vue</code>实例中属性和方法，组件中也可以用</p><p>其中<code>data</code>属性必须是一个函数，因为组件会重复使用在多个地方，为了使用在多个地方的组件数据相对独立，<code>data</code>属性需要用一个函数的返回值来将数据处理为不同的每个个体</p></blockquote><h5 id="Prop传递数据"><a href="#Prop传递数据" class="headerlink" title="Prop传递数据"></a>Prop传递数据</h5><blockquote><p><code>Prop</code>是你可以在组件上注册的一些自定义特性</p><p>当一个值传递给一个<code>prop</code>特性的时候，它就变成了那个组件实例的一个属性</p><p>为了给组件传递数据，我们可以用一个 <code>props</code> 选项将一些特性值列举在其中</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"myp"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">"content"</span>,<span class="string">"like"</span>], <span class="comment">// 需要两个外界传入的值</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">'like'</span>&gt;</span></span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>"</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 组件绑定未来要接受的变量，要用到v:bind</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#container"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                content: <span class="string">'这是p段落的文本'</span>,</span></span><br><span class="line"><span class="actionscript">                like: <span class="string">'beauty'</span>, <span class="comment">// 要传递的变量</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">.beauty&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    color: red;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myp</span> <span class="attr">:like</span>=<span class="string">"like"</span> <span class="attr">:content</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">myp</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递到组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;VUE&quot;&gt;&lt;a href=&quot;#VUE&quot; class=&quot;headerlink&quot; title=&quot;VUE&quot;&gt;&lt;/a&gt;VUE&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Vue.js&lt;/code&gt;是前端三大新框架：&lt;code&gt;Angular.js&lt;/code&gt;、&lt;code&gt;React.js&lt;/code&gt;、&lt;code&gt;Vue.js&lt;/code&gt;之一，&lt;code&gt;Vue.js&lt;/code&gt;目前的使用和关注程度在三大框架中稍微胜出，并且它的热度还在递增&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;的核心库只关注视图层，&lt;code&gt;Vue&lt;/code&gt;的目标是通过尽可能简单的&lt;code&gt;API&lt;/code&gt;实现响应的数据绑定，在这一点上&lt;code&gt;Vue.js&lt;/code&gt;类似于后台的模板语言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;也可以将界面拆分成一个个的组件，通过组件来构建界面，然后用自动化工具来生成单页面(&lt;code&gt;SPA - single page application&lt;/code&gt;)系统&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://laxe.top/2019/10/21/JavaScript/"/>
    <id>http://laxe.top/2019/10/21/JavaScript/</id>
    <published>2019-10-21T02:51:45.043Z</published>
    <updated>2019-10-21T02:52:45.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><blockquote><p><code>JavaScript</code>是运行在浏览器端的脚本语言，<code>JavaScript</code>主要解决的是前端与用户交互的问题</p><p>是一种动态性、弱类型的语言；</p><p>他的解释器就在我们的浏览器中，是浏览器的一部分</p><p>这门语言对<strong>大小写敏感</strong>，并会忽略多余的空格，可以使用<code>\</code>进行代码换行，注释使用<code>//</code>或<code>/**/</code></p></blockquote><a id="more"></a><!-- # JavaScript 发表于 1970-01-03 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><ul><li>主要由三部分组成<ul><li><code>ECMAScript</code>：语言的语法和基本对象</li><li>文档对象模型<code>Dom(Document Object Model)</code>：处理网页内容的方法和接口</li><li>浏览器对象模型<code>Bom(BrowserObjectModel)</code>：与浏览器进行交互的方法和接口</li></ul></li><li>前端三大部<ul><li><code>HTML</code>：页面的内容、结构</li><li><code>CSS</code>：页面的表现形式、<strong>部分动画</strong></li><li><code>JavaScript</code>：页面的行为、交互、<strong>功能</strong></li></ul></li></ul><hr><h3 id="JavaScript引入"><a href="#JavaScript引入" class="headerlink" title="JavaScript引入"></a>JavaScript引入</h3><ul><li>行间事件：为某一个具体的元素标签赋予<code>js</code>内容</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"button"</span> <span class="attribute">value</span>=<span class="string">"按钮"</span> <span class="attribute">onclick</span>=<span class="string">"alert('点我');"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>嵌入引入：在文档页面通过<code>Script</code>标签嵌入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"ok!"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部引入：定义单独<code>js</code>文件，通过<code>script</code>标签进行引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>alert</code>函数用来展示一个提示框</p></blockquote><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul><li><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> y = <span class="string">"2"</span></span><br><span class="line"><span class="selector-tag">var</span> z = <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>定义变量需要使用关键字：<code>var</code></p><ul><li>同时定义多个变量可以使用 <strong>，</strong> 隔开</li></ul></li><li><p><strong>注意</strong>：<code>javascript</code>变量均为对象，每当声明一个变量，就相当于创建了一个对象</p></li><li><p>命名规则：</p><ol><li>区分大小写</li><li>首字符为<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong><code>_</code>、或<strong>美元符号</strong><code>$</code></li><li>其他字符可以为<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong>、<strong>美元符号</strong></li></ol></li><li><p>调试程序的方法：</p><ul><li><code>alert</code>：弹框</li><li><code>console.log()</code>：浏览器控制台</li><li><code>document.title()</code>：页面标题</li></ul></li></ul><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><code>Number</code>：<strong>数字类型</strong>，可以带小数点，也可以不带</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = 1;</span><br><span class="line"><span class="attribute">var b</span> = 1.5;</span><br></pre></td></tr></table></figure><ul><li><code>String</code>：<strong>字符串类型</strong>，可以使用<strong>单引号</strong>或<strong>双引号</strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = <span class="string">"abc"</span>;</span><br><span class="line"><span class="attribute">var b</span> = <span class="string">"aaaa"</span> + 1</span><br></pre></td></tr></table></figure><ul><li><code>Boolean</code>：<strong>布尔类型</strong>，只能是<code>true</code>|<code>false</code></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul><li><code>undefined</code>：<strong>未定义类型</strong></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code>：<strong>空对象类型</strong></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>查看变量数据类型</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abc"</span>;</span><br><span class="line">alert(<span class="built_in">typeof</span> <span class="symbol">x</span>)</span><br></pre></td></tr></table></figure><ul><li>匈牙利命名规则：<ul><li>对象 <code>o</code> (<code>Object</code>)：<code>oPerson</code></li><li>数组 <code>a</code> (<code>Array</code>)：<code>aUsers</code></li><li>字符串 <code>s</code> (<code>String</code>)：<code>sAccount</code></li><li>整数 <code>i</code> (<code>Integer</code>)：<code>iScore</code></li><li>布尔值 <code>b</code> (<code>Boolean</code>)：<code>bIsLogin</code></li><li>浮点数 <code>f</code> (<code>Float</code>)：<code>fPrice</code></li><li>函数 <code>f</code> (<code>Function</code>)：<code>fEats</code></li><li>正则 <code>re</code> (<code>RegExp</code>)：<code>reIDCard</code></li></ul></li></ul><hr><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>转换为字符串：<code>toString</code>，支持<code>Boolean</code>、<code>Number</code>、<code>String</code>三种主要类型</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">var y = <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line">var z = true<span class="comment">;</span></span><br><span class="line">alert(<span class="name">x</span>.toString()) // <span class="string">"1"</span></span><br><span class="line">alert(<span class="name">y</span>.toString()) // <span class="string">"abc"</span></span><br><span class="line">alert(<span class="name">z</span>.toString()) // <span class="string">"true"</span></span><br></pre></td></tr></table></figure><ul><li>转换为数字：<strong>parseInt</strong>、<strong>parseFloat</strong>，将只含有数字的字符串变为整形或浮点型，其他类型返回<code>NaN</code>()</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"123"</span></span><br><span class="line"><span class="selector-tag">var</span> y = <span class="string">"123.01"</span></span><br><span class="line"><span class="selector-tag">var</span> z = <span class="string">"123aa"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(x)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(x)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(y)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(y)</span></span>) <span class="comment">// 123.01</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseInt(z)</span></span>) <span class="comment">// 123</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(parseFloat(z)</span></span>) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<code>parseFloat</code>转换的包含浮点数的字符串应该是十进制</li></ul><blockquote><p>八进制或十六进制，该方法会忽略前导<code>0</code></p><p>八进制数字<code>020</code>会被解析为<code>20</code></p><p>十六进制数字<code>0xFF</code>，会返回<code>Nan</code>，因为x符号不是有效字符</p></blockquote><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><code>Boolean()</code>：当要转换的值是至少有一个字符的字符串</li></ul><blockquote><p>非<code>0</code>数字或对象时，<code>Boolean()</code>函数将返回<code>true</code></p><p>如果该值是空字符串、数字<code>0</code>、<code>undefined</code>或<code>null</code>，它将返回<code>false</code>。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="number">0</span>)</span></span>) <span class="comment">// false</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="number">1</span>)</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="string">"1"</span>)</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Boolean(<span class="string">"1a"</span>)</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>Number()</code>：换与<code>parseInt()</code>和<code>parseFloat()</code>方法的处理方式相似，只是它转换的是整个值，而不是部分值</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(false)</span></span>) <span class="comment">// 0</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(true)</span></span>) <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(undefined)</span></span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(null)</span></span>) <span class="comment">// 0</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"1.2"</span>)</span></span>) <span class="comment">// 1.2</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"12"</span>)</span></span>) <span class="comment">// 12</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="string">"1.2.3"</span>)</span></span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(new object()</span></span>)) <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(Number(<span class="number">50</span>)</span></span>) <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><ul><li><code>String()</code>：可把任何值转换成字符串</li><li><strong>注意</strong>：强制转换成字符串和调用<code>toString()</code>方法的唯一不同之处在于，对<code>null</code>和<code>undefined</code>值强制类型转换可以生成字符串而不引发错误</li></ul><hr><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><ul><li><code>Array</code>：数组，索引从<code>0</code>开始</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>];</span><br><span class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> <span class="type">Array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>);</span><br><span class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> <span class="type">Array</span>();</span><br><span class="line">people[<span class="number">0</span>] = <span class="string">"张三"</span></span><br><span class="line">people[<span class="number">1</span>] = <span class="string">"李四"</span></span><br><span class="line">people[<span class="number">2</span>] = <span class="string">"王五"</span></span><br></pre></td></tr></table></figure><ul><li><code>Object</code>：对象，就像是字典，定义时<code>key</code>值不需要设置类型</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    <span class="type">name</span>: "张三",</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: "male",</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*对象有两种访问方式：*/</span></span><br><span class="line">person["name"]</span><br><span class="line">person.name</span><br><span class="line">var person = <span class="built_in">new</span> <span class="keyword">Object</span>();</span><br><span class="line">person.name = "张三";</span><br><span class="line">person.age = <span class="number">17</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数语法：包裹在<strong>花括号</strong>中的代码块，前面使用了关键词<code>function</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"func()"</span>&gt;点击这里&lt;/button&gt;</span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">(arg1,arg2,...)</span></span> &#123;</span><br><span class="line">    alert(<span class="string">"函数被执行"</span>)</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// return是可选的，并且可以不写返回值，单纯只做函数终止</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数名 func</span></span><br><span class="line"><span class="comment">// 参数 arg1,arg2,...</span></span><br><span class="line"><span class="comment">// 返回值 return 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="comment">// 函数执行</span></span><br></pre></td></tr></table></figure><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li><strong>局部变量</strong></li></ul><blockquote><p>在<code>JavaScript</code>函数内部声明的变量（使用<code>var</code>）是<strong>局部</strong>变量，</p><p>只能在函数内部访问它</p><p>该变量的作用域是局部的</p><p><strong>生命周期</strong>：局部变量会在函数运行以后被删除 (生命期从它们被声明的时间开始)</p></blockquote><ul><li><strong>全局变量</strong></li></ul><blockquote><p>在函数外声明的变量是<strong>全局</strong>变量</p><p>网页上的所有脚本和函数都能访问它</p><p><strong>生命周期</strong>：全局变量会在页面关闭后被删除 (生命期从它们被声明的时间开始)</p></blockquote><ul><li>局部变量如果希望变为全局变量、可以使用<code>windows.var =</code>的形式赋予给当前窗口</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">1</span>;</span><br><span class="line">window.<span class="symbol">x</span> = <span class="symbol">x</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">func</span><span class="params">(1,2)</span></span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><ul><li><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">JavaScript</span></span><br></pre></td></tr></table></figure><p>函数解析过程：</p><ol><li><strong>预编译</strong>：<code>function</code>函数提前，并将<code>var</code>定义的变量声明提前，先暂时赋值为<code>undefined</code></li><li><strong>执行</strong></li></ol></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span><span class="params">()</span></span> <span class="comment">// 弹出提示</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(iNum)</span></span> <span class="comment">// undefined</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(abc)</span></span> <span class="comment">// 出错</span></span><br><span class="line">function func() &#123;</span><br><span class="line">    alert(<span class="string">"这个是函数"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> iNum = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><ul><li>函数可以没有名字，比如直接为某些事件赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(sDate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="封闭函数"><a href="#封闭函数" class="headerlink" title="封闭函数"></a>封闭函数</h4><ul><li>封闭函数常用来创建一个开始就执行而不用命名的函数</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>()&#123;</span><br><span class="line">    alert(<span class="string">"你好"</span>)<span class="comment">;</span></span><br><span class="line">&#125;)()<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>也可以在函数定义前加上”<code>~</code>“和”<code>!</code>“等符号来定义匿名函数</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="string">"你好"</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><ul><li>封闭函数可以创建一个独立的空间，在封闭函数内定义的变量不会影响外部同名的函数和变量，可以避免命名冲突</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">1</span>;</span><br><span class="line">!function()&#123;</span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"这是同名变量"</span>;</span><br><span class="line">    alert(<span class="symbol">x</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="symbol">x</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当页面上引入多个<code>js</code>文件时，用这种办法比较安全</p></blockquote><hr><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left">加</td><td align="left"><code>x=y+2</code></td><td align="left"><code>x=7</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">减</td><td align="left"><code>x=y-2</code></td><td align="left"><code>x=3</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">乘</td><td align="left"><code>x=y*2</code></td><td align="left"><code>x=10</code></td></tr><tr><td align="left"><code>/</code></td><td align="left">除</td><td align="left"><code>x=y/2</code></td><td align="left"><code>x=2.5</code></td></tr><tr><td align="left"><code>%</code></td><td align="left">取余</td><td align="left"><code>x=y%2</code></td><td align="left"><code>x=1</code></td></tr><tr><td align="left"><code>++</code></td><td align="left">累加</td><td align="left"><code>x=++y</code></td><td align="left"><code>x=6</code></td></tr><tr><td align="left"><code>--</code></td><td align="left">递减</td><td align="left"><code>x=--y</code></td><td align="left"><code>x=4</code></td></tr></tbody></table><hr><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等价于</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"><code>=</code></td><td align="left"><code>x=y</code></td><td align="left"></td><td align="left"><code>x=5</code></td></tr><tr><td align="left"><code>+=</code></td><td align="left"><code>x+=y</code></td><td align="left"><code>x=x+y</code></td><td align="left"><code>x=15</code></td></tr><tr><td align="left"><code>-=</code></td><td align="left"><code>x-=y</code></td><td align="left"><code>x=x-y</code></td><td align="left"><code>x=5</code></td></tr><tr><td align="left"><code>*=</code></td><td align="left"><code>x*=y</code></td><td align="left"><code>x=x*y</code></td><td align="left"><code>x=50</code></td></tr><tr><td align="left"><code>/=</code></td><td align="left"><code>x/=y</code></td><td align="left"><code>x=x/y</code></td><td align="left"><code>x=2</code></td></tr><tr><td align="left"><code>%=</code></td><td align="left"><code>x%=y</code></td><td align="left"><code>x=x%y</code></td><td align="left"><code>x=0</code></td></tr></tbody></table><ul><li><strong>注意</strong>：<strong>数字与字符串相加，结果将成为字符串</strong></li></ul><hr><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td align="left">等于</td><td align="left"><code>x==8</code>为<code>false</code></td></tr><tr><td align="left"><code>===</code></td><td align="left">全等（值和类型）</td><td align="left"><code>x===5</code>为<code>true</code>；<code>x===&quot;5&quot;</code>为<code>false</code></td></tr><tr><td align="left"><code>!=</code></td><td align="left">不等于</td><td align="left"><code>x!=8</code>为<code>true</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于</td><td align="left"><code>x&gt;8</code>为<code>false</code></td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">小于</td><td align="left"><code>x&lt;8</code>为<code>true</code></td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">大于或等于</td><td align="left"><code>x&gt;=8</code>为<code>false</code></td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">小于或等于</td><td align="left"><code>x&lt;=8</code>为<code>true</code></td></tr></tbody></table><ul><li>比较运算符常在条件语句中进行使用</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">name</span> = <span class="string">"张三"</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">name</span>==<span class="string">"张三"</span>) &#123;</span><br><span class="line"> document.<span class="built_in">write</span>(<span class="string">"这个人是张三"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>&amp;&amp;</code></td><td align="left"><code>and</code></td><td align="left"><code>(x &lt; 10 &amp;&amp; y &gt; 1)</code> 为 <code>true</code></td></tr><tr><td align="left">`</td><td align="left"></td><td align="left">`</td></tr><tr><td align="left"><code>!</code></td><td align="left"><code>not</code></td><td align="left"><code>!(x==y)</code> 为 <code>true</code></td></tr></tbody></table><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var NumCheck</span> = 0; </span><br><span class="line"><span class="attribute">var Dis</span> = (NumCheck==0) ? <span class="string">"是数字0"</span>:<span class="string">"不是数字0"</span>;</span><br></pre></td></tr></table></figure><ul><li>如果变量<code>NumCheck</code>是<code>0</code>，则<code>Dis</code>的值为：”是数字<code>0</code>“；反之为：”不是数字<code>0</code>“</li></ul><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li>条件语句</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var iNum = 0;</span><br><span class="line"><span class="keyword">if</span> (<span class="attribute">iNum</span>==0)&#123;</span><br><span class="line">    <span class="built_in">..</span>.;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="attribute">iNum</span>==1) &#123;</span><br><span class="line">   条件细分<span class="built_in">..</span>.;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">不满足以上条件均到这里;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>switch</code>语句</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day = <span class="keyword">new</span> <span class="type">Date</span>().getDay();</span><br><span class="line"><span class="comment">// 星期日:0  范围:0~6</span></span><br><span class="line"><span class="keyword">switch</span>(day)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="type"></span></span><br><span class="line"><span class="type">alert</span>(<span class="string">"今天是星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="type"></span></span><br><span class="line"><span class="type"></span>...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>工作原理</strong>：首先设置表达式<code>n</code>（通常是一个变量）；随后表达式的值会与结构中的每个<code>case</code>的值做比较。如果存在匹配，则与该<code>case</code>关联的代码块会被执行。请使用<em>break</em>来阻止代码自动地向下一个<code>case</code>运行</li></ul><hr><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><ul><li><strong>语法</strong></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(起点数据; 判断条件; 数据递增或递减)&#123;&#125;</span></span><br><span class="line">var i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( ;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果循环起始值已经被设置，可以在开头省略</span></span><br><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; ; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">5</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当没有第二个语句时，必须在循环内提供break，否则循环则无法停下来，可能令浏览器崩溃</span></span><br><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; <span class="number">10</span>; )&#123;</span><br><span class="line">   console.log(i);</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有提供第三个语句，可以在for循环中进行编写数值的变化</span></span><br></pre></td></tr></table></figure><ul><li><code>for/in</code>语句循环遍历对象的属性</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">for</span> (<span class="symbol">x</span> in object)&#123;</span><br><span class="line">    console.log(<span class="symbol">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字符串：x 取下标</span></span><br><span class="line"><span class="comment">// 数组：x 取下标</span></span><br><span class="line"><span class="comment">// 对象：x 取key</span></span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abcdef"</span>  <span class="comment">// 0,1,2,3,4,5</span></span><br><span class="line"><span class="keywords">var</span> <span class="symbol">y</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"5"</span>] <span class="comment">// 0,1,2,3,4</span></span><br><span class="line"><span class="keywords">var</span> z = &#123; <span class="comment">//  name,age,gender</span></span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">    gender:<span class="string">"male"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keywords">for</span> (obj in z)&#123;</span><br><span class="line">    console.log(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><ul><li>语法</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">while</span> (条件)&#123;</span><br><span class="line">    执行代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keywords">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keywords">while</span> (<span class="symbol">x</span>[i])&#123;</span><br><span class="line">    console.log(<span class="symbol">x</span>[i]);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下表超出范围时不会报错，返回undefined</span></span><br></pre></td></tr></table></figure><ul><li><code>do/while</code>循环：<code>do/while</code>循环是<code>while</code>循环的变体</li></ul><blockquote><p>该循环首先会执行一次循环代码块，然后检查循环条件是否为真</p><p>如果条件为真，就会重复这个循环</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环执行代码</span><br><span class="line">&#125;<span class="keyword">while</span> (条件);</span><br><span class="line">var i = 3;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    console.log(i)</span><br><span class="line">    i<span class="comment">--;</span></span><br><span class="line">&#125;<span class="keyword">while</span> (i &gt; <span class="number">5</span>);</span><br><span class="line">// <span class="keyword">do</span>/<span class="keyword">while</span>循环至少会执行一次</span><br></pre></td></tr></table></figure><hr><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><ul><li>通过页面元素<code>ID</code>值进行获取：<code>document.getElementById(&#39;&#39;)</code><ul><li>获取到的是一个<code>HTML</code>对象，可以赋值给一个变量</li></ul></li><li><strong>注意</strong>：获取对应元素时，首先要确定页面已经生成所需元素</li></ul><blockquote><p>通常我们将<code>javascript</code>代码写到页面最下面</p><p>或通过使用<code>windows.onload()</code>事件判断是否已经生成页面</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sP = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sP);</span></span><br><span class="line">&#125;</span><br><span class="line">func()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取到的内容: &lt;p id="p"&gt;这是一段待获取的文字&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sP = <span class="built_in">document</span>.getElementById(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sP);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取到的内容: &lt;p id="p"&gt;这是一段待获取的文字&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="操作页面元素"><a href="#操作页面元素" class="headerlink" title="操作页面元素"></a>操作页面元素</h3><ul><li>可以通过<code>id</code>方式获取到对应页面内的元素，就可以对元素的属性进行操作，包括对属性的读和写</li><li>读取元素属性：元素<code>.</code>属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.id);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.style);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oP.style.color);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改元素属性：元素.属性 =<code>xxx</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"blue_font()"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">blue_font</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"color_button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    color_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以获取到对应按钮元素后在绑定函数到它</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一段待获取的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"Button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oButton = <span class="built_in">document</span>.getElementById(<span class="string">'Button'</span>);</span></span><br><span class="line"><span class="actionscript">    oButton.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">'aaa'</span>);</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改字体样式属性中的字体颜色为蓝色</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>读取或写入标签包裹的内容（读取或修改标签文本内容）：<code>innerHTML</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"urlChange()"</span>&gt;</span>变搜狗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">urlChange</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript">        oA.href = <span class="string">"https://www.sougou.com"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(oA.innerHTML); <span class="comment">// 获取标签文本内容</span></span></span><br><span class="line"><span class="actionscript">        oA.innerHTML = <span class="string">"搜狗"</span>; <span class="comment">//修改标签文本内容</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="JS事件及属性"><a href="#JS事件及属性" class="headerlink" title="JS事件及属性"></a>JS事件及属性</h3><ul><li>常见事件</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>用户点击鼠标</span><br><span class="line"><span class="bullet">- </span>网页已加载</span><br><span class="line"><span class="bullet">- </span>图像已加载</span><br><span class="line"><span class="bullet">- </span>鼠标移动某个元素上</span><br><span class="line"><span class="bullet">- </span>输入字段被改变时</span><br><span class="line"><span class="bullet">- </span>提交表单时</span><br><span class="line"><span class="bullet">- </span>用户触发某些按键时</span><br></pre></td></tr></table></figure><ul><li><code>onclick</code>事件：用户点击鼠标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"TextChange(this)"</span>&gt;</span>这是文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- this 代表当前所处的元素 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">TextChange</span><span class="params">(id)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        id.innerHTML = <span class="string">"文本修改"</span><span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p"</span>&gt;</span>这是文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">    oP.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.innerHTML = <span class="string">"文本修改"</span><span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>onmouseover</code>事件：鼠标移入</li><li><code>onmouseout</code>事件：鼠标移出</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span>请把鼠标移动过来<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementById(<span class="string">"aaa"</span>);</span></span><br><span class="line"><span class="actionscript">    oP.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"green"</span>;<span class="comment">//可以直接通过传来的参数进行页面元素的读取及修改</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    oP.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        oP.style.color = <span class="string">"red"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h2><h3 id="字符串及操作方法"><a href="#字符串及操作方法" class="headerlink" title="字符串及操作方法"></a>字符串及操作方法</h3><ul><li>字符串合并：<code>+</code></li><li>数字字符串变整数：<code>parseInt()</code></li><li>数字字符串变浮点数：<code>parseFloat()</code></li><li>字符串按分隔符切分：<code>split(&quot;*&quot;)</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"a*b*c*d"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.split(<span class="string">"*"</span>)</span></span>) <span class="comment">// a,b,c,d</span></span><br><span class="line">console.log(x.split(<span class="string">"*"</span>)) <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure><ul><li>查找字符串是否含有某字符，找到返回索引，找不到返回-1：<code>String.indexOf()</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"abcdefag"</span></span><br><span class="line"><span class="selector-tag">var</span> res = x.indexOf(<span class="string">"z"</span>)</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(res)</span></span></span><br></pre></td></tr></table></figure><ul><li>截取字符串：<code>String.substring(start, end)</code>，不包含end索引位置数据</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> x = <span class="string">"abcdefag"</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring(<span class="number">2</span>)</span></span>) <span class="comment">// cdefag</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring(<span class="number">2</span>,<span class="number">4</span>)</span></span>) <span class="comment">// cd</span></span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(x.substring()</span></span>) <span class="comment">// abcdefag</span></span><br></pre></td></tr></table></figure><ul><li>字符串反转：通过结合数组的<code>reverse()</code>函数</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> x = <span class="string">"abcd"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(x.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)) //dcba</span><br></pre></td></tr></table></figure><hr><h3 id="数组及操作方法"><a href="#数组及操作方法" class="headerlink" title="数组及操作方法"></a>数组及操作方法</h3><ul><li>定义数组的方法</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var aList = new Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">var aList = new Array();</span><br><span class="line">aList[<span class="number">0</span>] = <span class="string">"a"</span>;</span><br><span class="line">aList[<span class="number">1</span>] = <span class="string">"b"</span>;</span><br><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"a"</span>];</span><br></pre></td></tr></table></figure><ul><li>获取数组的长度：<code>Array.length()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aList.length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>将数组成员通过指定拼接符合并成一个字符串：<code>Array.join(&quot;*&quot;)</code></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">console.log(aList.join(<span class="string">"*"</span>)) <span class="comment">// 1*2*3*4*5</span></span><br></pre></td></tr></table></figure><ul><li>向数组的<strong>最后</strong>增加或删除成员：<code>Array.pop()</code>、<code>Array.push()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> opa = aList.pop() <span class="comment">// opa: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(opa) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(aList) <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">aList.push(<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(aList) <span class="comment">// [1, 2, 3, 4, "a"]</span></span><br></pre></td></tr></table></figure><ul><li>将数组反转：<code>Array.reverse()</code></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">aList.reverse();</span><br><span class="line">console.log(aList); <span class="comment">//[5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ul><li>返回数组中元素第一次出现的索引值：<code>Array.indexOf(chr)</code></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">console.log(aList.indexOf(<span class="number">3</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>在数组中增加或删除成员，并返回被删除的：<code>Array.splice(index, howmany, items...)</code></li></ul><blockquote><p>从<code>index</code>位置开始，给定的<code>hwomany</code>个数的值，并用后面的<code>items</code>替换这些被<strong>删除</strong>的值</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"a"</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">aList.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br><span class="line">console.log(aList) <span class="comment">// [1, 2, "b", "c", 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><blockquote><p>数组的成员包含数组</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var aList = [1,2,3,["a","b"]]</span><br><span class="line">console.log(aList[<span class="string">-1</span>][<span class="symbol">0</span>]) // 出错 undefined</span><br><span class="line">console.log(aList[<span class="string">3</span>][<span class="symbol">0</span>]) // a</span><br></pre></td></tr></table></figure><hr><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li>作用：定时调用函数、制作动画</li></ul><hr><h4 id="反复执行定时器"><a href="#反复执行定时器" class="headerlink" title="反复执行定时器"></a>反复执行定时器</h4><ul><li><code>setInterval(code, millisec)</code>：反复执行的定时器</li><li><code>code</code>: 必须参数，要调用的函数或要执行的代码串<ul><li><code>millisec</code>: 必须参数，执行<code>code</code>任务所需要的事件间隔，以毫秒计</li></ul></li><li><code>clearInterval(setInterval_obj)</code>：<strong>关闭</strong>反复执行的定时器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--跑马灯效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>abcdefg<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start_button"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop_button"</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    start_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">// 开启定时事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> sT = setInterval(loop,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.sT = sT; <span class="comment">// 声明此sT定时事件为全局变量</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">    stop_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">// 关闭定时事件</span></span></span><br><span class="line">        clearInterval(sT)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Opstr = <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>);</span></span><br><span class="line">        Opstr.innerHTML = Opstr.innerHTML.substring(1) + Opstr.innerHTML[0]</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(Opstr.innerHTML)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="等待执行定时器"><a href="#等待执行定时器" class="headerlink" title="等待执行定时器"></a>等待执行定时器</h4><ul><li><p><code>setTimeout(code, millisec)</code>：定义只执行一次的等待定时器</p></li><li><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">code</span></span><br></pre></td></tr></table></figure><p>: 必须参数，要调用的函数或要执行的代码串</p><ul><li><code>millisec</code>: 必须参数，执行<code>code</code>任务所需要的事件间隔，以毫秒计</li></ul></li><li><p><code>clearTimeout(setTimeout_obj)</code>：关闭只执行一次的等待计时器</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>我是一个内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start_button"</span>&gt;</span>让上面的内容消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    start_button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> st = setTimeout(clear,<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.st = st;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oH3 = <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>);</span></span><br><span class="line"><span class="actionscript">        oH3.innerHTML = <span class="string">""</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;是运行在浏览器端的脚本语言，&lt;code&gt;JavaScript&lt;/code&gt;主要解决的是前端与用户交互的问题&lt;/p&gt;
&lt;p&gt;是一种动态性、弱类型的语言；&lt;/p&gt;
&lt;p&gt;他的解释器就在我们的浏览器中，是浏览器的一部分&lt;/p&gt;
&lt;p&gt;这门语言对&lt;strong&gt;大小写敏感&lt;/strong&gt;，并会忽略多余的空格，可以使用&lt;code&gt;\&lt;/code&gt;进行代码换行，注释使用&lt;code&gt;//&lt;/code&gt;或&lt;code&gt;/**/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Css</title>
    <link href="http://laxe.top/2019/10/21/Css/"/>
    <id>http://laxe.top/2019/10/21/Css/</id>
    <published>2019-10-21T02:49:45.661Z</published>
    <updated>2019-10-21T02:51:18.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote><p><code>CSS</code>值层叠样式表（<code>Cascading Style Sheets</code>），主要为了让我们的HTML页面具有花里胡哨的样式效果</p><p>样式定义如何显示<code>HTML</code>元素</p><p>样式通常存储在样式表中</p><p>外部样式表可以极大的提高工作效率</p><p>外部样式表通常存储后缀为<code>CSS</code>的文件中</p><p>多个样式定义可层叠为一</p></blockquote><a id="more"></a><!-- # Css 发表于 1970-01-02 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><ul><li>有了<code>CSS</code>，<code>html</code>中大部分表现样式的标签就可以不用了</li><li><code>html</code>只负责文档的结构和内容，表现形式完全交给<code>CSS</code>，<code>html</code>文档变得更加简洁</li></ul><h3 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h3><ul><li>内联式引入：直接赋予标签<code>style</code>属性进行样式编写</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body <span class="attribute">style</span>=<span class="string">"background: #00ff00"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>嵌入式：直接在文档页面通过<code>style</code>标签创建嵌入的样式表</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">   background: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部式：在文档中通过<code>link</code>标签，将外部样式文件引入到页面中：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"css/main.css"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>优先级：内联式 &gt; 嵌入式 &gt; 外部式 （就近原则）</li></ul><hr><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><ul><li>CSS语法规则由两部分构成：选择器 &amp; 一条或多条声明</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selector&#123;</span><br><span class="line">declaration1<span class="comment">;</span></span><br><span class="line">declaration2<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>selector</code>：选择器，一般是你需要改变的<code>HTML</code>标签<br><code>declaration1</code>：每条声明，由一个属性和一个值组成</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性（<code>property</code>）是您希望设置的样式属性（<code>style attribute</code>） 每个属性有一个值；属性和值被冒号分开</p></blockquote><ul><li>当属性中的值为若干单词时，加引号</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"sans serif"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>颜色的写法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00FF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#0F0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(255,0,0);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(100%,0%,0%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，当使用<code>RGB</code>百分比时，即使当值为<code>0</code>时也要写百分比符号<br>当尺寸为<code>0</code>像素时，<code>0</code>之后不需要使用<code>px</code>单位，因为<code>0</code>就是<code>0</code>，无论单位是什么</p></blockquote><hr><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><blockquote><p>影响范围大，常做通用设置，或用在层级选择器中</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;p&gt;</span>第一段文字<span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span>再来一段<span class="params">&lt;/p&gt;</span></span><br><span class="line">p&#123;</span><br><span class="line"><span class="symbol">color:</span> blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义所有p标签字体为蓝色*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><blockquote><p>通过类名来选择元素，一个类可以用于多个元素</p><p>一个元素也可以使用多个类，应用灵活，可复用</p><p>是<code>CSS</code>中使用最多的一种选择器</p></blockquote><ul><li><strong>注意</strong>：类名的第一个字符不能使用数字</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"big"</span>&gt;第一段文字&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"big red"</span>&gt;再来一段&lt;/p&gt;</span><br><span class="line">.big&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义big类字体大小为20像素*/</span></span><br><span class="line">.red&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*定义类为red的字体颜色为红色*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>类选择器</strong>还可基于所属标签进行派生选择：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"red"</span>&gt;再来一段&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"red"</span>&gt;</span><br><span class="line">    文字测试</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">div</span>.red&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在页面中只有div类为red的字体颜色会变为红色*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><blockquote><p>对指定属性的<code>HTML</code>元素进行设置，而不限于<code>class</code>和<code>id</code>属性</p></blockquote><ul><li>通过属性</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://www.baidu.com"</span>&gt;这是一个连接&lt;/a&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> href=<span class="string">"test"</span>&gt;测试&lt;/p&gt;</span><br><span class="line">[href]&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为所有具有href属性的元素设置字体颜色*/</span></span><br></pre></td></tr></table></figure><ul><li>通过属性的值（整个匹配）</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"https://www.baidu.com"</span>&gt;这是一个连接&lt;/a&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> href=<span class="string">"test"</span>&gt;测试&lt;/p&gt;</span><br><span class="line">[href=<span class="string">"test"</span>]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为属性为test的元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（属性的值中包含所匹配的单词）：<code>~=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test-xx"</span>&gt;测试&lt;/p&gt; x</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test_xx"</span>&gt;测试&lt;/p&gt; x</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr~=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为属性包含test的元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：不包含下划线和连字符的</li><li>属性的值（从开头整个匹配或带有连字符的属性值）：<code>|=</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> √</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test-xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> √</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test_xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> x</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">attr</span>=<span class="string">"test xx"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> x</span><br><span class="line">[attr|=test]&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">/*为单词为test或开头为test-的元素设置字体大小*/</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：适用于由连字符分隔的属性值</li><li>属性的值（从属性值的开头进行匹配）：<code>^=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test-xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test_xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test xx"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr^=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为开头包含test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（从属性值的结尾开始匹配）：<code>$=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx-test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx_test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr$=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为结尾是test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><ul><li>属性的值（只要含有则匹配）：<code>*=</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx-test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx_test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">&lt;<span class="selector-tag">p</span> attr=<span class="string">"xx test"</span>&gt;测试&lt;/p&gt; √</span><br><span class="line">[attr*=test]&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为含有test的所有元素设置字体大小*/</span></span><br></pre></td></tr></table></figure><hr><ul><li><p>几种属性选择的匹配方式</p><ul><li><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~=</span><br></pre></td></tr></table></figure><p>：用于选取属性值中包含指定</p><p>词汇</p><p>的元素；</p><ul><li>必须是单独的词汇，不能是带有连字符或下划线组成的单词。</li></ul></li><li><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|=</span></span><br></pre></td></tr></table></figure><p>：用于选取带有以指定值开头的属性值的元素，该值必须是整个单词；</p><ul><li>可以有连字符组成，<code>word</code>或者是<code>word-wild</code></li></ul></li><li><p><code>^=</code>：匹配属性值以指定值开头的每个元素</p></li><li><p><code>$=</code>：匹配属性值以指定值结尾的每个元素</p></li><li><p><code>*=</code>：匹配属性值中包含指定值的每个元素</p></li></ul></li></ul><hr><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><blockquote><p>主要应用在标签嵌套的结构中，通过层级，限制样式的作用范围</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"header"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"title"</span>&gt;标题<span class="number">1</span>&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=<span class="string">"author"</span>&gt;作者<span class="number">1</span>&lt;/span&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"content"</span>&gt;</span><br><span class="line">        主要内容</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"footer"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"title"</span>&gt;标题<span class="number">2</span>&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=<span class="string">"author"</span>&gt;作者<span class="number">2</span>&lt;/span&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=<span class="string">"content"</span>&gt;</span><br><span class="line">        主要内容<span class="number">2</span></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.header</span> .title&#123;</span><br><span class="line"><span class="attribute">color</span>: gold;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类下的title类*/</span></span><br><span class="line"><span class="selector-class">.header</span> .author&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类下的author类*/</span></span><br><span class="line"><span class="selector-class">.header</span> p&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生效所有header类中的p标签*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><blockquote><p>通过<code>ID</code>名进行元素选择，元素的<code>ID</code>名定义时在整个文档属于唯一</p><p>通过<code>ID</code>选择器只能对应页面元素中的一个</p><p><code>ID</code>名通常作为<code>JS</code>脚本定位使用，不推荐<code>ID</code>选择器</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">header</span>"&gt;</span><br><span class="line">    &lt;<span class="symbol">p</span> <span class="symbol">id</span>="<span class="symbol">title</span>"&gt;标题<span class="symbol">1</span>&lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">span</span> <span class="symbol">id</span>="<span class="symbol">author</span>"&gt;作者<span class="symbol">1</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">p</span> <span class="symbol">id</span>="<span class="symbol">content</span>"&gt;</span><br><span class="line">        主要内容</span><br><span class="line">    &lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">#<span class="symbol">title</span>&#123;</span><br><span class="line">font-size: <span class="number">25</span>px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">#author&#123;</span><br><span class="line">font-size: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">#content&#123;</span><br><span class="line">color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><blockquote><p><code>CSS</code>伪类选择器用于向某些选择器添加特殊的效果</p></blockquote><ul><li>伪类的语法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span><span class="selector-pseudo">:pseudo-class</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与<code>css</code>类搭配使用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span><span class="selector-class">.class</span><span class="selector-pseudo">:pseudo-class</span>&#123;</span><br><span class="line"><span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="锚伪类"><a href="#锚伪类" class="headerlink" title="锚伪类"></a>锚伪类</h5><blockquote><p>控制连接访问状态，常见状态有：<strong>活动状态</strong>、<strong>已访问状态</strong>、<strong>未被访问状态</strong>、<strong>鼠标悬停状态</strong></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> class=<span class="string">"baidu"</span> href=<span class="string">"https://www.baidu.com"</span>&gt;访问这里&lt;/a&gt;</span><br><span class="line"><span class="selector-class">.baidu</span>:link&#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*未访问过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:visited&#123;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*访问过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:hover&#123;</span><br><span class="line"><span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标划过的连接*/</span></span><br><span class="line"><span class="selector-class">.baidu</span>:active&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*已选中的连接*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>、<strong>visited</strong>、<strong>hover</strong>、<strong>active</strong></li><li><strong>注意</strong><ul><li><code>hover</code>必须定义在<code>link</code>和<code>visited</code>之后，才是有效的</li><li><code>active</code>必须定义在<code>hover</code>之后，才是有效的</li></ul></li></ul><hr><h3 id="CSS选择器的权重"><a href="#CSS选择器的权重" class="headerlink" title="CSS选择器的权重"></a>CSS选择器的权重</h3><blockquote><p>当有多个同类样式作用于同一个元素时</p><p>权重高的样式对元素起作用</p><p>权重相同时后写的样式覆盖前面写的</p></blockquote><ul><li>使用<code>!important</code>将样式权重设置为<code>10000</code>，将<code>!important</code>写到样式属性值后</li><li>权重值：就近原则</li><li>内联式样式：<code>1000</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ID</code>选择器：<code>100</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><ul><li>类选择器：<code>10</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; <span class="attribute">background</span>: blue;&#125;</span><br></pre></td></tr></table></figure><ul><li>标签选择器：<code>1</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="attribute">id</span>=<span class="string">"test"</span> <span class="attribute">style</span>=<span class="string">"color: blue;"</span>&gt;测试&lt;/p&gt;</span><br><span class="line"><span class="comment">#test&#123;</span></span><br><span class="line">color: red !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CSS基本属性"><a href="#CSS基本属性" class="headerlink" title="CSS基本属性"></a>CSS基本属性</h3><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><ul><li><strong>width</strong>：设置元素（标签）的宽</li><li><strong>height</strong>：设置元素（标签）的高</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#button</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>background</strong>：设置背景色或背景图</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#00FF00</span> <span class="built_in">url</span>(<span class="string">"../img/1.jpg"</span>) no-repeat ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>background</code>属性可以分解为如下几个设置项：</li></ul><blockquote><p><code>background-color</code>：设置背景颜色</p><p><code>background-image</code>：设置背景图片地址</p><p><code>background-repeat</code>：设置图片如何重复平铺，可选参数有：<code>repeat</code>、<code>repeat-x</code>（水平方向重复）、<code>repeat-y</code>（垂直方向重复）、<code>no-repeat</code>（图片只显示一次）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; background-position`：设置图片的位置，可选参数有：`left`、`right`、`center</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>background-attachment</code>：设置图片是固定的还是会随页面滚动，可选参数有：<code>scroll</code>（背景图片会随着页面其余部分的滚动而移动）、<code>fixed</code>（页面的其余部分滚动时，背景图像不会移动）</p></blockquote><ul><li><strong>注意</strong>：在背景图片路径填写时，如果使用内联式写法则从当前页面路径开始查找相对路径，如写在外部<code>CSS</code>文件中，则以<code>CSS</code>文件为相对基础。</li><li><strong>border</strong>：设置元素周围的边框</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> double blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>依次设置：<code>border-width</code>、<code>border-style</code>、<code>border-color</code></p></blockquote><ul><li>也可以拆分成四个边的样式选项</li></ul><blockquote><p><code>border-top</code>：顶边框</p><p><code>border-buttom</code>：底边框</p><p><code>border-left</code>：左边框</p><p><code>border-right</code>：右边框</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attr]</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">5px</span> inset blue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">5px</span> inset green;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> outset red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">5px</span> outset red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置时提供的边框样式属性<ul><li><code>dotted</code>：点状</li><li><code>solid</code>：实线</li><li><code>double</code>：双线</li><li><code>dashed</code>：虚线</li><li><code>groove</code>：<code>3D</code>凹槽边框</li><li><code>ridge</code>：定义<code>3D</code>垄状边框</li><li><code>inset</code>：定义<code>3D</code> <code>inset</code> 边框</li><li><code>outset</code>：定义<code>3D</code> <code>outset</code>边框</li><li><code>inherit</code>：规定应该从父元素继承边框样式</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>aaaaaaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span>bbbbbbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p3"</span>&gt;</span>ccccccc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p4"</span>&gt;</span>ddddddd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p5"</span>&gt;</span>ggggggg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p6"</span>&gt;</span>eeeeeee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p7"</span>&gt;</span>fffffff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table1"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年纪<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">.p1&#123;</span><br><span class="line">border: 1px dotted blue;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line">.p3&#123;</span><br><span class="line">border: 1px double blue;</span><br><span class="line">&#125;</span><br><span class="line">.p4&#123;</span><br><span class="line">border: 1px dashed blue;</span><br><span class="line">&#125;</span><br><span class="line">.p5&#123;</span><br><span class="line">border: 10px groove green;</span><br><span class="line">&#125;</span><br><span class="line">.p6&#123;</span><br><span class="line">border: 10px ridge blue;</span><br><span class="line">&#125;</span><br><span class="line">.p7&#123;</span><br><span class="line">border: 10px inset blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.table1&#123;</span><br><span class="line">border: 5px double red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>padding</strong>：设置元素包含的内容和元素边框的距离，也叫<strong>内边距</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个样式属性也可以拆分成以下单独四种，可以分别设置对应位置的内边距</p></li><li><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">padding-<span class="built_in">top</span></span><br></pre></td></tr></table></figure><p>：设置上内边距</p><ul><li><code>padding-bottom</code>：设置下内边距</li><li><code>padding-left</code>：设置左内边距</li><li><code>padding-right</code>：设置右内边距</li></ul></li><li><p><strong>margin</strong>：设置元素和外界的边距，也叫<strong>外边距</strong></p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*同时设置四个边距为10px*/</span></span><br></pre></td></tr></table></figure><ul><li>与<code>padding</code>类似，<code>margin</code>属性也可以拆分为四个方向的单独设置</li><li><code>margin-top</code>：设置上外边距<ul><li><code>margin-bottom</code>：设置下外边距</li><li><code>margin-left</code>：设置左外边距</li><li><code>margin-right</code>：设置右外边距</li></ul></li><li><strong>float</strong>：定义元素在当前父元素下向哪个方向浮动，这个属性常用于图像，使文本围绕在图像周围</li></ul><blockquote><p>如果浮动方向空间不足，元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"&gt;</span><br><span class="line"><span class="keyword">input</span>&#123;</span><br><span class="line">    <span class="type">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本常用属性"><a href="#文本常用属性" class="headerlink" title="文本常用属性"></a>文本常用属性</h4><ul><li><strong>color</strong>：设置元素中的文字<strong>颜色</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-size</strong>：设置元素中的文字<strong>大小</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-family</strong>：设置元素中的<strong>文字字体</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>&#125;</span><br><span class="line"><span class="comment">/*为了避免中文兼容问题，常用字体的英文标识*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-family</span>:<span class="string">"Microsoft Yahei"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>font-widght</strong>：设置元素中的文字是否<strong>加粗</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-widght</span>:bold;&#125;</span><br><span class="line"><span class="comment">/*设置加粗*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-widght</span>:normal;&#125;</span><br><span class="line"><span class="comment">/*设置不加粗*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>line-height</strong>：设置元素中的文字<strong>行高</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">line-height</span>:<span class="number">24px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>text-decoration</p><p>：设置元素中文字的</p><p>下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>none</code>：默认文本格式，无下划线</p><p><code>underline</code>：定义文本下的一条线</p><p><code>overline</code>：定义文本上的一条线</p><p><code>line-through</code>：定义穿过文本的一条线</p><p><code>blink</code>：定义闪烁的文本</p><p><code>inherit</code>：规定应该从父元素继承<code>text-decoration</code>属性的值</p></blockquote><hr><ul><li><strong>text-align</strong>：设置元素中文字对齐方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>text-indent</strong>：设置元素中文字的首行缩进</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-indent</span>:<span class="number">24px</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>display</strong>：设置元素的类型及隐藏方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">display</span>:none;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>none</code>： 元素不会显示</p><p><code>block</code>：元素将显示为块级元素，此元素前后会带有换行符</p><p><code>inline</code>：此元素被显示为内联元素，元素前后没有换行符</p><p><code>list-item</code>：元素作为列表显示</p><p><code>table</code>：元素作为块级表格来显示（类似</p><p>），表格前后带有换行符</p><p><code>inline-table</code>：元素作为内联表格来显示（类似</p><p>），表格前后没有换行符</p><p><code>table-cell</code>：此元素会作为一个表格单元格显示（类似 和 ）</p><p><code>table-caption</code>：此元素会作为一个表格标题显示（类似 ）</p></blockquote><h4 id="元素溢出"><a href="#元素溢出" class="headerlink" title="元素溢出"></a>元素溢出</h4><ul><li><strong>overflow</strong>：当子元素的大小超过所承载的父元素大小时，需要设置父元素对于溢出的子元素显示方式</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="number">123456789</span>&lt;/p&gt;</span><br><span class="line">p&#123;</span><br><span class="line">width:<span class="number">500</span>px; </span><br><span class="line">text-indent: <span class="number">498</span>px; </span><br><span class="line">border: <span class="number">1</span>px solid blue;</span><br><span class="line">overflow:<span class="built_in">auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>visible</code>：默认值;内容不会被修剪，会呈现在元素框之外</p><p><code>hidden</code>：内容会被修剪，并且其余内容是不可见的</p><p><code>scroll</code>：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容</p><p><code>auto</code>：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容</p></blockquote><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><blockquote><p>使用浏览器F12查看元素</p></blockquote><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li><strong>文档流</strong>：文档流，是指盒子按照html标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。</li><li>CSS3主要有三种定位：<strong>普通流</strong>、<strong>浮动</strong>、<strong>绝对定位</strong></li><li><strong>static</strong>：元素框正常生成，块级元素生成一个矩形框、作为文档流的一部分、行内元素则会创建一个或多个行框，置于其父元素中</li><li><strong>relative</strong>：相对定位元素，元素还会保持定位前的形状，并且移动前的位置也会保留下来，不会脱离文档流<ul><li>一般是将父级设置相对定位（<code>relative</code>），子级设置绝对定位（<code>absolute</code>），子级就以父级作为参照来定位，否则子级相对于<code>body</code>来定位</li><li><strong>相对定位会按照元素的原始位置对该元素进行移动</strong></li></ul></li><li><strong>absolute</strong>：绝对定位元素，元素脱离文档流，移动前的位置在文档流中关闭，定位后生成一个新的块级框，不论他之前在原始文档流中生成何种类型的框</li><li>也可以理解为漂流在文档流的上方，相对于上一个设置了定位的父级元素来进行定位，如果找不到，则相对于<code>body</code>元素进行定位<ul><li><strong>通过绝对定位，元素可以放置到页面上的任何位置</strong></li></ul></li><li><strong>fixed</strong>：固定定位元素，元素脱离文档流，不占据文档流的位置，相对于浏览器窗口进行定位</li><li>元素偏移的设置：<ul><li><code>top</code>：定位元素的上外边距边界与其包含块上边界之间的偏移</li><li><code>bottom</code>：定位元素下外边距边界与其包含块下边界之间的偏移</li><li><code>right</code>：定位元素右外边距边界与其包含块下边界之间的偏移</li><li><code>left</code>：定位元素左外边距边界与其包含块下边界之间的偏移</li><li><code>z-index</code>：设置堆叠元素的层级，这里的层级不是从上到下，而是从里到外</li></ul></li></ul><blockquote><p>来一个小例子看看布局的效果</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">top</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="attribute">bottom</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"container"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"top"</span>&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"left"</span>&gt;左&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"right"</span>&gt;右&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"bottom"</span>&gt;底部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的例子可以将页面简单的分成四个部分</p></blockquote><p><a href="https://lienze.tech/blog/images/1561435572486.png" target="_blank" rel="noopener"><img src="https://lienze.tech/blog/images/1561435572486.png" alt="1561435572486"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt;值层叠样式表（&lt;code&gt;Cascading Style Sheets&lt;/code&gt;），主要为了让我们的HTML页面具有花里胡哨的样式效果&lt;/p&gt;
&lt;p&gt;样式定义如何显示&lt;code&gt;HTML&lt;/code&gt;元素&lt;/p&gt;
&lt;p&gt;样式通常存储在样式表中&lt;/p&gt;
&lt;p&gt;外部样式表可以极大的提高工作效率&lt;/p&gt;
&lt;p&gt;外部样式表通常存储后缀为&lt;code&gt;CSS&lt;/code&gt;的文件中&lt;/p&gt;
&lt;p&gt;多个样式定义可层叠为一&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Html</title>
    <link href="http://laxe.top/2019/10/21/Html/"/>
    <id>http://laxe.top/2019/10/21/Html/</id>
    <published>2019-10-21T02:47:06.598Z</published>
    <updated>2019-10-21T02:47:56.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><blockquote><p>超文本标记语言(<code>HyperText Markup Language</code>)，标准通用标记语言下的一个应用； 是网页制作必备的编程语言</p><p><strong>超文本</strong>就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素</p><p><code>HTML</code>不是一种编程语言，而是一种标记语言</p></blockquote><a id="more"></a><!-- # Html 发表于 1970-01-01 |  分类于 [Web](https://lienze.tech/blog/categories/Web/) --><h3 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>声明为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTML</span></span><br></pre></td></tr></table></figure><p>文档，</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTML</span></span><br></pre></td></tr></table></figure><p>文档也常称为网页，</p><ul><li>一个文档包含<code>HTML</code><strong>标签</strong>和<strong>文本</strong></li></ul></li><li><p><code>&lt;html&gt;</code>与<code>&lt;/html&gt;</code>之间的文本描述网页，同时<code>HTML</code>元素也是当前页面的<strong>根元素</strong></p></li><li><p><code>&lt;head&gt;</code>是包含了文档的元(<code>meta</code>)数据，如定义网页编码格式<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p></li><li><p><code>&lt;title&gt;</code>元素描述当前文档页面的<strong>标题</strong></p></li><li><p><code>&lt;body&gt;</code>与<code>&lt;body&gt;</code>之间的文本是<strong>可见</strong>的页面内容</p></li><li><p><code>&lt;h1&gt;</code>与<code>&lt;/h1&gt;</code>之间的文本被显示为标题</p></li><li><p><code>&lt;p&gt;</code>与<code>&lt;/p&gt;</code>之间的文本被显示为<strong>段落</strong></p></li></ul><h3 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个H5标题。<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 记得在此处添加信息 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><blockquote><p><code>HTML</code>标记标签通常被称为<code>HTML</code>标签 (<code>HTML tag</code>)</p></blockquote><ul><li><code>HTML</code>标签是由<strong>尖括号</strong>包围的关键词，比如<code>&lt;html&gt;</code></li><li><code>HTML</code>标签通常是<strong>成对出现</strong>的，比如 <code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li><li>多数情况下，<code>HTML</code>文档中的标签可以互相嵌套，实现更复杂的功能</li></ul><h4 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h4><ul><li>标题标签：<code>h1~h6</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    这是一个最大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>段落标签：<code>p</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    每一个段落标签中的内容都会换行输出</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>块级标签：<code>div</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: #FF0000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        div标签常用来组合一整块标签内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        以便通过CSS样式来对其中这些元素进行格式化控制</span><br><span class="line">        比如当前div标签下的所有文本均为红色</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>换行标签：br</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="number">222</span></span><br></pre></td></tr></table></figure><ul><li>图片标签：img</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">'xxx.img'</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>src</code>：用来指明当前图片路径</p><p><code>alt</code>：光标位于图片时所显示的内容，或是当图片加载失败时所显示的内容</p></blockquote><ul><li>链接标签：<code>a</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>href</code>：控制访问地址</p><p><code>a</code>：标签的文本元素为页面展示内容</p></blockquote><ul><li>无序列表：ul、li</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ul</code>:指明当前为无序列表</p><p><code>li</code>:具体列表项使用这个标签</p><p>单个列表项可不加<code>ul</code>标签</p></blockquote><ul><li>有序列表：<code>ol</code>、<code>li</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ol</code>：指明当前为有序列表</p><p><code>li</code>：具体列表项使用这个标签</p><p>单个列表项可不加<code>ul</code>标签</p></blockquote><h3 id="连接外部文件"><a href="#连接外部文件" class="headerlink" title="连接外部文件"></a>连接外部文件</h3><blockquote><p>像<code>img</code>等类似的标签需要我们去访问一个外部文件，常用的方式有如下几种</p></blockquote><ul><li>引入外部图片：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/1.jpg"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>引入另外一个网页：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">"other.html"</span>&gt;</span>其他页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引入CSS样式文件：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"css/main.css"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>rel</code>：<code>relationship</code>的英文缩写，用于定义链接的文件和<code>HTML</code>文档之间的关系</p><p><code>stylesheet</code>：样式表</p><p><code>type</code>：外链文档的类型</p><p><code>href</code>：外链文档的路径</p></blockquote><ul><li>引入<code>js</code>文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>与<code>href</code>：</li></ul><blockquote><p><code>src</code>用于引入资源，引入的资源为页面必不可少的一部分，类似换内裤</p><p><code>href</code>只是引用资源，表示超文本引用，类似穿外套</p></blockquote><ul><li>相对路径：使用当前文件为起点定位资源</li></ul><blockquote><p><code>./</code>：表示位于当前文件所在目录下</p><p><code>../</code>：表示位于当前文件所处的上一层目录下</p></blockquote><ul><li>绝对路径：使用当前磁盘目录为起点定位资源</li></ul><h3 id="表格标签：table"><a href="#表格标签：table" class="headerlink" title="表格标签：table"></a>表格标签：table</h3><blockquote><p>表格标签由<code>table</code>标签进行定义</p><p>表格中的每一行由<code>tr</code>标签定义<code>table row</code></p><p>每一行有几个单元格由<code>td</code>标签定义<code>table data</code></p><p>表格的表头由<code>th</code>标签定义<code>table header</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>用户表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>border</code>：定义表格边框，数字越大，边框越粗</p><p><code>caption</code> ：定义表格标题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"3"</span> <span class="attr">frame</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span> &gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>合并单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>cellpadding</code>：规定<strong>单元格边缘</strong>和内容的空白</p><p><code>cellspacing</code>：增加单元格之间的<strong>距离</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; align`：设置单元格内容靠齐，可选属性有`left`、`right`以及`center</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>frame</code>：控制围绕表格的边框<code>box</code>四面环山</p><blockquote><p><code>above</code>：上面</p><p><code>below</code>：下面</p><p><code>hsides</code>：上下两侧</p><p><code>vsides</code>：左右两侧</p></blockquote><p><code>colspan</code>：合并列</p><p><code>rowspan：</code>合并行</p></blockquote><h3 id="表单标签：form"><a href="#表单标签：form" class="headerlink" title="表单标签：form"></a>表单标签：form</h3><blockquote><p>表单用于收集不同类型的用户输入，表单由不同类型的标签组成</p></blockquote><ul><li>单行文本输入框</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">label</span>&gt;姓名：&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"张三"</span> /&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;密码：&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>text</code>：单行文本框</p><p><code>password</code>：密码输入框</p><p><code>value</code>：定义表单元素的值</p><p><code>name</code>：定义表单元素的名称，提交到后台时通过该值获取对应表单中的数据</p></blockquote><ul><li>单选框</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="gender" <span class="keyword">value</span>="0" /&gt; 男</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="radio" <span class="type">name</span>="gender" <span class="keyword">value</span>="1" /&gt; 女</span><br></pre></td></tr></table></figure><blockquote><p>在单选框中的<code>name</code>属性可以控制哪几个表单为一组</p></blockquote><ul><li>复选框</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="sing" /&gt; 唱歌</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="run" /&gt; 跑步</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="like" <span class="keyword">value</span>="swiming" /&gt; 游泳</span><br></pre></td></tr></table></figure><ul><li>上传文件</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="picture"&gt;</span><br></pre></td></tr></table></figure><ul><li>多行文本输入框</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下拉表单元素：<code>select</code></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> <span class="type">name</span>="site"&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="0"&gt;北京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="1"&gt;上海&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="2"&gt;广州&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>="3"&gt;深圳&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>option</code>：下拉框中的具体属性</p><p><code>value</code>：在表单提交时真正发送给服务器的值</p></blockquote><ul><li>提交按钮：<code>submit</code></li></ul><blockquote><p>点击时触发<code>form</code>标签中的<code>action</code>动作</p></blockquote><ul><li>重置按钮：<code>reset</code></li></ul><blockquote><p>重置所属表单中所有表单框的所填数据</p></blockquote><ul><li>普通按钮：<code>button</code></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="提交"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="reset" <span class="keyword">value</span>="重置"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="button" <span class="keyword">value</span>="按钮"&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;h3 id=&quot;什么是HTML&quot;&gt;&lt;a href=&quot;#什么是HTML&quot; class=&quot;headerlink&quot; title=&quot;什么是HTML&quot;&gt;&lt;/a&gt;什么是HTML&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;超文本标记语言(&lt;code&gt;HyperText Markup Language&lt;/code&gt;)，标准通用标记语言下的一个应用； 是网页制作必备的编程语言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超文本&lt;/strong&gt;就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTML&lt;/code&gt;不是一种编程语言，而是一种标记语言&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="http://laxe.top/tags/Django/"/>
    
  </entry>
  
</feed>
